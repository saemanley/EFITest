<?xml version="1.0" encoding="UTF-8"?>
<Entities
 build="b557"
 majorVersion="8"
 minorVersion="2"
 modelPersistenceProviderPackage="PostgresPersistenceProviderPackage"
 revision="7"
 schemaVersion="1020"
 universal="">
    <ThingTemplates>
        <ThingTemplate
         aspect.isExtension="true"
         baseThingTemplate="GenericThing"
         description=""
         documentationContent=""
         effectiveThingPackage="TW.RSM.SFW.SoftwareManagerPackage"
         homeMashup=""
         lastModifiedDate="2018-10-24T21:00:18.256Z"
         name="TW.RSM.SFW.Tmpl.Manager"
         projectName=""
         tags="Applications:RSM;Applications:SCM"
         thingPackage="TW.RSM.SFW.SoftwareManagerPackage"
         valueStream="">
            <avatar></avatar>
            <DesignTimePermissions>
                <Create></Create>
                <Read></Read>
                <Update></Update>
                <Delete></Delete>
                <Metadata></Metadata>
            </DesignTimePermissions>
            <RunTimePermissions></RunTimePermissions>
            <VisibilityPermissions>
                <Visibility></Visibility>
            </VisibilityPermissions>
            <ConfigurationTables></ConfigurationTables>
            <PropertyBindings></PropertyBindings>
            <RemotePropertyBindings></RemotePropertyBindings>
            <RemoteServiceBindings></RemoteServiceBindings>
            <RemoteEventBindings></RemoteEventBindings>
            <AlertConfigurations></AlertConfigurations>
            <ThingShape>
                <PropertyDefinitions></PropertyDefinitions>
                <ServiceDefinitions>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="AddOrUpdateDeliveryTargetParameter">
                        <ResultType
                         aspect.dataShape="TW.RSM.SFW.DataShape.DeliveryTargetParameters"
                         baseType="NOTHING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description=""
                             name="Name"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description=""
                             name="Value"
                             ordinal="3"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description="Deprecated. Use TW.UTL.SFW.SessionHelper AddToDeploymentTargetSearches instead."
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="AddSearchToExcludedTargets">
                        <ResultType
                         baseType="NOTHING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="AssetSearchName"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description="Deprecated. Use TW.UTL.SFW.SessionHelper AddToDeploymentTargetSearches instead."
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="AddSearchToIncludedTargets">
                        <ResultType
                         baseType="NOTHING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="AssetSearchName"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description="Deprecated"
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="ApproveCampaign">
                        <ResultType
                         aspect.dataShape="TW.RSM.SFW.DataShape.DeliveryTarget"
                         aspect.isDataTableEntry="true"
                         baseType="NOTHING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description=""
                             name="ID"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="AutoRetryDeliveryTargets">
                        <ResultType
                         baseType="NOTHING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="ClearDeliveryTargetParameters">
                        <ResultType
                         aspect.dataShape="TW.RSM.SFW.DataShape.DeliveryTargetParameters"
                         baseType="NOTHING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description="Deprecated. Use TW.UTL.SFW.SessionHelper ClearDeploymentTargetSearches instead."
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="ClearIncludedAssetSearches">
                        <ResultType
                         baseType="NOTHING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="CopyCampaignDefinition">
                        <ResultType
                         baseType="STRING"
                         description="Returns DefinitionID of the copied Package "
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description=""
                             name="DefinitionID"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description="New package name"
                             name="Name"
                             ordinal="2"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="DeleteCampaign">
                        <ResultType
                         baseType="NOTHING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description=""
                             name="CampaignID"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="DeleteDefinition">
                        <ResultType
                         baseType="NOTHING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description=""
                             name="DefinitionID"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="DeleteDeliveryTargetParameter">
                        <ResultType
                         aspect.dataShape="TW.RSM.SFW.DataShape.DeliveryTargetParameters"
                         baseType="NOTHING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description=""
                             name="Name"
                             ordinal="2"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="EditCampaign">
                        <ResultType
                         baseType="NOTHING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="Description"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             baseType="DATETIME"
                             description=""
                             name="DownloadDate"
                             ordinal="5"></FieldDefinition>
                            <FieldDefinition
                             baseType="BOOLEAN"
                             description=""
                             name="DownloadImmediately"
                             ordinal="7"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="ID"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             baseType="DATETIME"
                             description=""
                             name="InstallDate"
                             ordinal="6"></FieldDefinition>
                            <FieldDefinition
                             baseType="BOOLEAN"
                             description=""
                             name="InstallImmediately"
                             ordinal="8"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="Name"
                             ordinal="2"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="EnableAutoRetry">
                        <ResultType
                         baseType="NOTHING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="BOOLEAN"
                             description=""
                             name="enable"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetAccessPrivileges">
                        <ResultType
                         aspect.dataShape="TW.RSM.SFW.DataShape.AccessPrivileges"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description=""
                             name="DefinitionID"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="BOOLEAN"
                             description="Specify whether this is a user or usergroup."
                             name="IsUser"
                             ordinal="4"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetAllDeploymentsForAsset">
                        <ResultType
                         aspect.dataShape="TW.RSM.SFW.DataShape.Campaign"
                         aspect.isDataTableEntry="true"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description=""
                             name="AssetName"
                             ordinal="9"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description="Deprecated"
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetApprovalServices">
                        <ResultType
                         aspect.dataShape="EntityList"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetAutoRetryRate">
                        <ResultType
                         baseType="INTEGER"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetByTimeSelections">
                        <ResultType
                         aspect.dataShape="TW.RSM.SFW.DataShape.NameValue"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetCampaignById">
                        <ResultType
                         aspect.dataShape="TW.RSM.SFW.DataShape.Campaign"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description=""
                             name="CampaignID"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetCampaigns">
                        <ResultType
                         aspect.dataShape="TW.RSM.SFW.DataShape.Campaign"
                         aspect.isDataTableEntry="true"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.defaultValue="500"
                             baseType="INTEGER"
                             description=""
                             name="max"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetCompletedWithSelections">
                        <ResultType
                         aspect.dataShape="TW.RSM.SFW.DataShape.NameValue"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetConcatenatedVersion">
                        <ResultType
                         baseType="STRING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description=""
                             name="version1"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="version2"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="version3"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="version4"
                             ordinal="4"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetDefaultAutoRetryCountMax">
                        <ResultType
                         baseType="INTEGER"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetDefinitionById">
                        <ResultType
                         aspect.dataShape="TW.RSM.SFW.DataShape.Definition"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description=""
                             name="DefinitionID"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetDefinitions">
                        <ResultType
                         aspect.dataShape="TW.RSM.SFW.DataShape.Definition"
                         aspect.isDataTableEntry="true"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetDefinitionsByCriteria">
                        <ResultType
                         aspect.dataShape="TW.RSM.SFW.DataShape.Definition"
                         aspect.isDataTableEntry="true"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.isRequired="false"
                             baseType="DATETIME"
                             description=""
                             name="endDate"
                             ordinal="4"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="packageDescription"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="packageName"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             baseType="BOOLEAN"
                             description=""
                             name="published"
                             ordinal="5"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="showExpired"
                             ordinal="11"></FieldDefinition>
                            <FieldDefinition
                             baseType="DATETIME"
                             description=""
                             name="startDate"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             baseType="USERNAME"
                             description=""
                             name="user"
                             ordinal="6"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="version1"
                             ordinal="7"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="version2"
                             ordinal="8"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="version3"
                             ordinal="9"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="version4"
                             ordinal="10"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetDeliveryTargetParametersInfoTable">
                        <ResultType
                         aspect.dataShape="TW.RSM.SFW.DataShape.DeliveryTargetParameters"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetDeliveryTargetsForCampaign">
                        <ResultType
                         aspect.dataShape="TW.RSM.SFW.DataShape.DeliveryTarget"
                         aspect.isDataTableEntry="true"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="AssetName"
                             ordinal="4"></FieldDefinition>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description=""
                             name="CampaignID"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             baseType="DATETIME"
                             description=""
                             name="EndDate"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             baseType="DATETIME"
                             description=""
                             name="StartDate"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="Status"
                             ordinal="6"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="Username"
                             ordinal="5"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetDeploymentCountForAssetSearches">
                        <ResultType
                         aspect.dataShape="TW.RSM.SFW.DataShape.Campaign"
                         aspect.isDataTableEntry="true"
                         baseType="NUMBER"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.dataShape="PTC.Asset.SavedFilter"
                             baseType="INFOTABLE"
                             description=""
                             name="ExcludedTargetSearches"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             baseType="BOOLEAN"
                             description=""
                             name="excludeInActive"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             aspect.dataShape="PTC.Asset.SavedFilter"
                             baseType="INFOTABLE"
                             description=""
                             name="IncludedTargetSearches"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetDeploymentsByCriteria">
                        <ResultType
                         aspect.dataShape="TW.RSM.SFW.DataShape.Campaign"
                         aspect.isDataTableEntry="true"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="Description"
                             ordinal="6"></FieldDefinition>
                            <FieldDefinition
                             baseType="DATETIME"
                             description=""
                             name="EndDate"
                             ordinal="4"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="Name"
                             ordinal="5"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="PackageName"
                             ordinal="9"></FieldDefinition>
                            <FieldDefinition
                             baseType="DATETIME"
                             description=""
                             name="StartDate"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="Status"
                             ordinal="7"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="Username"
                             ordinal="2"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetDeploymentsForAsset">
                        <ResultType
                         aspect.dataShape="TW.RSM.SFW.DataShape.Campaign"
                         aspect.isDataTableEntry="true"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description=""
                             name="AssetName"
                             ordinal="9"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetDeploymentsForAssetSearches">
                        <ResultType
                         aspect.dataShape="TW.RSM.SFW.DataShape.Campaign"
                         aspect.isDataTableEntry="true"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.dataShape="PTC.Asset.SavedFilter"
                             baseType="INFOTABLE"
                             description=""
                             name="ExcludedTargetSearches"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             baseType="BOOLEAN"
                             description=""
                             name="excludeInActive"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             aspect.dataShape="PTC.Asset.SavedFilter"
                             baseType="INFOTABLE"
                             description=""
                             name="IncludedTargetSearches"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetDeploymentsHistoricalConfig">
                        <ResultType
                         aspect.dataShape="TW.RSM.SFW.DataShape.NameValue"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetDeploymentsPendingApproval">
                        <ResultType
                         baseType="INTEGER"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description="Deprecated. Use TW.UTL.SFW.SessionHelper GetDeploymentTargetSearches instead."
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetExcludedTargetSearches">
                        <ResultType
                         aspect.dataShape="EntityList"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetExpiredPackageCount">
                        <ResultType
                         baseType="INTEGER"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description="Returns the total failed deployments"
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetFailedDeploymentCount">
                        <ResultType
                         baseType="INTEGER"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.defaultValue="false"
                             baseType="BOOLEAN"
                             description=""
                             name="IsTest"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetFinalDeliveryStateCounts">
                        <ResultType
                         aspect.dataShape="TW.RSM.SFW.DataShape.FinalDeliveryStateCounts"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description=""
                             name="CampaignID"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetHistoricalDeploymentResultsByStatus">
                        <ResultType
                         aspect.dataShape="TW.RSM.SFW.DataShape.StatusDateValue"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.defaultValue="Day"
                             baseType="STRING"
                             description=""
                             name="by"
                             ordinal="4"></FieldDefinition>
                            <FieldDefinition
                             baseType="DATETIME"
                             description=""
                             name="endDate"
                             ordinal="4"></FieldDefinition>
                            <FieldDefinition
                             baseType="DATETIME"
                             description=""
                             name="startDate"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="status"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description="Deprecated. Use TW.UTL.SFW.SessionHelper GetDeploymentTargetSearches instead."
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetIncludedTargetSearches">
                        <ResultType
                         aspect.dataShape="EntityList"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetMaxAutoRetriesPerInterval">
                        <ResultType
                         baseType="INTEGER"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetOverallDeploymentByStatus">
                        <ResultType
                         aspect.dataShape="TW.RSM.SFW.DataShape.LabelValue"
                         aspect.isDataTableEntry="true"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetOverallPackageByStatus">
                        <ResultType
                         aspect.dataShape="TW.RSM.SFW.DataShape.LabelValue"
                         aspect.isDataTableEntry="true"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetPackagesExpiringCount">
                        <ResultType
                         baseType="INTEGER"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetPurgeDateRanges">
                        <ResultType
                         aspect.dataShape="TW.RSM.SFW.DataShape.NameValue"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetRecentCampaigns">
                        <ResultType
                         aspect.dataShape="TW.RSM.SFW.DataShape.Campaign"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="USERNAME"
                             description=""
                             name="user"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetRecentDefinitions">
                        <ResultType
                         aspect.dataShape="TW.RSM.SFW.DataShape.Definition"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="USERNAME"
                             description=""
                             name="user"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetStatusSelections">
                        <ResultType
                         aspect.dataShape="TW.RSM.SFW.DataShape.NameValue"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetTargetMashup">
                        <ResultType
                         baseType="MASHUPNAME"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="targetMashupName"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description="number of published, unexpired packages containing a selected file"
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetTotalActivePackagesContainingFile">
                        <ResultType
                         aspect.dataShape="TW.RSM.SFW.DataShape.Definition"
                         aspect.isDataTableEntry="true"
                         baseType="INTEGER"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description=""
                             name="filePath"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             aspect.defaultValue="true"
                             aspect.isRequired="true"
                             baseType="BOOLEAN"
                             description=""
                             name="published"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             aspect.defaultValue="false"
                             aspect.isRequired="true"
                             baseType="STRING"
                             description=""
                             name="showExpired"
                             ordinal="4"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetTotalCampaigns">
                        <ResultType
                         baseType="INTEGER"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetTotalDefinitions">
                        <ResultType
                         baseType="INTEGER"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="Initialize">
                        <ResultType
                         baseType="NOTHING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="IsAutoRetryIfDisconnected">
                        <ResultType
                         baseType="BOOLEAN"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="Ping">
                        <ResultType
                         baseType="NOTHING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="PurgeDeliveryTargetsForDeployment">
                        <ResultType
                         baseType="NOTHING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description=""
                             name="DeploymentID"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="PurgeDeploymentsByCriteria">
                        <ResultType
                         aspect.dataShape="TW.RSM.SFW.DataShape.Campaign"
                         aspect.isDataTableEntry="true"
                         baseType="NOTHING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description=""
                             name="DefinitionID"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="Description"
                             ordinal="6"></FieldDefinition>
                            <FieldDefinition
                             baseType="DATETIME"
                             description=""
                             name="EndDate"
                             ordinal="4"></FieldDefinition>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="BOOLEAN"
                             description=""
                             name="IsTest"
                             ordinal="8"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="Name"
                             ordinal="5"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="PackageName"
                             ordinal="9"></FieldDefinition>
                            <FieldDefinition
                             baseType="DATETIME"
                             description=""
                             name="StartDate"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="Status"
                             ordinal="7"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="Username"
                             ordinal="2"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="PurgeDeploymentsForAsset">
                        <ResultType
                         aspect.dataShape="TW.RSM.SFW.DataShape.Campaign"
                         aspect.isDataTableEntry="true"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description=""
                             name="AssetName"
                             ordinal="9"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="PurgeDeploymentsForAssetSearches">
                        <ResultType
                         aspect.dataShape="TW.RSM.SFW.DataShape.Campaign"
                         aspect.isDataTableEntry="true"
                         baseType="NOTHING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.dataShape="PTC.Asset.SavedFilter"
                             baseType="INFOTABLE"
                             description=""
                             name="ExcludedTargetSearches"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             aspect.dataShape="PTC.Asset.SavedFilter"
                             baseType="INFOTABLE"
                             description=""
                             name="IncludedTargetSearches"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="QueryCampaigns">
                        <ResultType
                         aspect.dataShape="TW.RSM.SFW.DataShape.Campaign"
                         aspect.isDataTableEntry="true"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="Description"
                             ordinal="6"></FieldDefinition>
                            <FieldDefinition
                             baseType="DATETIME"
                             description=""
                             name="EndDate"
                             ordinal="4"></FieldDefinition>
                            <FieldDefinition
                             aspect.defaultValue="false"
                             aspect.isRequired="true"
                             baseType="BOOLEAN"
                             description=""
                             name="IsTest"
                             ordinal="8"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="Name"
                             ordinal="5"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="PackageName"
                             ordinal="9"></FieldDefinition>
                            <FieldDefinition
                             baseType="DATETIME"
                             description=""
                             name="StartDate"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="Status"
                             ordinal="7"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="Username"
                             ordinal="2"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description="Deprecated. Use TW.UTL.SFW.SessionHelper RemoveFromDeploymentTargetSearches instead."
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="RemoveSearchFromExcludedTargets">
                        <ResultType
                         baseType="NOTHING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="AssetSearchName"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description="Deprecated. Use TW.UTL.SFW.SessionHelper RemoveFromDeploymentTargetSearches instead."
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="RemoveSearchFromIncludedTargets">
                        <ResultType
                         baseType="NOTHING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="AssetSearchName"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="SetAutoRetryRate">
                        <ResultType
                         baseType="NOTHING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="INTEGER"
                             description=""
                             name="rate"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="UpdateAutoRetrySettings">
                        <ResultType
                         baseType="NOTHING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="BOOLEAN"
                             description=""
                             name="autoRetryIfDisconnected"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="LONG"
                             description=""
                             name="autoRetryRate"
                             ordinal="5"></FieldDefinition>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="INTEGER"
                             description=""
                             name="defaultMaxAutoRetries"
                             ordinal="4"></FieldDefinition>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="BOOLEAN"
                             description=""
                             name="enabled"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="INTEGER"
                             description=""
                             name="maxAutoRetriesPerInterval"
                             ordinal="3"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="UpdateDeploymentsHistoricalConfig">
                        <ResultType
                         baseType="NOTHING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="HistoricalAge"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                </ServiceDefinitions>
                <EventDefinitions></EventDefinitions>
                <ServiceMappings></ServiceMappings>
                <ServiceImplementations>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="AddOrUpdateDeliveryTargetParameter">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        //Validate input
                                        if((Name == null) || (Name == undefined) || (Name.length <= 0)){
                                            throw "Invalid Parameter Name";
                                        }
                                        if((Value == null) || (Value == undefined) || (Value.length <= 0)){
                                            throw "Invalid Parameter Value";
                                        }
                                        //Get the session value (create it if it does not exist)
                                        var sessionTable = Resources["CurrentSessionInfo"].GetGlobalSessionValues();
                                        if((sessionTable.DeliveryTargetParameters == null) || (sessionTable.DeliveryTargetParameters == undefined)) {
                                            var params = {
                                                infoTableName : "InfoTable",
                                                dataShapeName : "TW.RSM.SFW.DataShape.DeliveryTargetParameters"
                                            };
                                            parametersTable = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                            params = {
                                                name: "DeliveryTargetParameters",
                                                value: parametersTable
                                            };
                                            Resources["CurrentSessionInfo"].SetGlobalSessionInfoTableValue(params);
                                        }
                                        
                                        //If the name exists do an update, otherwise add
                                        var adding = true;
                                        var parameterRowCount = sessionTable.DeliveryTargetParameters.getRowCount();
                                        for (var i=0 ; i<parameterRowCount ; i++) {
                                            var row = sessionTable.DeliveryTargetParameters.getRow(i);
                                            if(row.Name.toLowerCase() == Name.toLowerCase()){
                                                //Found, do an in-place update
                                                row.Value = Value;
                                                adding = false;
                                                break;
                                            }
                                        }
                                        
                                        //If adding, add it to the table
                                        if (adding) {
                                            var params = {
                                                Name:Name,
                                                Value:Value
                                            };
                                            sessionTable.DeliveryTargetParameters.AddRow(params);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="AddSearchToExcludedTargets">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        if((AssetSearchName == null) || (AssetSearchName == undefined) || (AssetSearchName.length <= 0)) {
                                            throw "No Asset search name specified.";
                                        }
                                        
                                        var params = {
                                            infoTableName : "InfoTable",
                                            dataShapeName : "EntityList"
                                        };
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(EntityList)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        var AssetSearchList = Resources["CurrentSessionInfo"].GetGlobalSessionValues().ExcludedTargetAssets;
                                        if( (AssetSearchList != null) && (AssetSearchList != undefined ) && (AssetSearchList.getRowCount() > 0) )
                                        {
                                            var exists = false;
                                            for (var i=0; i<AssetSearchList.getRowCount(); i++) {
                                                var row = AssetSearchList.getRow(i);
                                                if(AssetSearchName == row.name)
                                                {
                                                    exists = true;
                                                }
                                                result.AddRow(row);
                                            }
                                        }
                                        if(! exists) {
                                            // EntityList entry object
                                            var newEntry = new Object();
                                            newEntry.description = undefined;
                                            newEntry.name = AssetSearchName;
                                            result.AddRow(newEntry);
                                        }
                                        
                                        params = {
                                            name: "ExcludedTargetAssets" /* STRING */,
                                            value: result /* INFOTABLE */
                                        };
                                        
                                        // no return
                                        Resources["CurrentSessionInfo"].SetGlobalSessionInfoTableValue(params);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="AddSearchToIncludedTargets">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        if((AssetSearchName == null) || (AssetSearchName == undefined) || (AssetSearchName.length <= 0)) {
                                            throw "No Asset search name specified.";
                                        }
                                        
                                        var params = {
                                            infoTableName : "InfoTable",
                                            dataShapeName : "EntityList"
                                        };
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(EntityList)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        var AssetSearchList = Resources["CurrentSessionInfo"].GetGlobalSessionValues().IncludedTargetAssets;
                                        
                                        if( (AssetSearchList != null) && (AssetSearchList != undefined ) && (AssetSearchList.getRowCount() > 0) )
                                        {
                                            var exists = false;
                                            for (var i=0; i<AssetSearchList.getRowCount(); i++) {
                                                var row = AssetSearchList.getRow(i);
                                                if(AssetSearchName == row.name)
                                                {
                                                    exists = true;
                                                }
                                                result.AddRow(row);
                                            }
                                        }
                                        if(! exists) {
                                            // EntityList entry object
                                            var newEntry = new Object();
                                            newEntry.description = undefined;
                                            newEntry.name = AssetSearchName;
                                            result.AddRow(newEntry);
                                        }
                                        
                                        params = {
                                            name: "IncludedTargetAssets" /* STRING */,
                                            value: result /* INFOTABLE */
                                        };
                                        
                                        // no return
                                        Resources["CurrentSessionInfo"].SetGlobalSessionInfoTableValue(params);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="ApproveCampaign">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        if((ID == null) || (ID == undefined)) {
                                            throw "No campaign specified.";
                                        }
                                        
                                        //First get the campaign so we can look up the definition and make sure the state is correct
                                        var params = { key: ID };
                                        var campaignResult = Things[me.name + ".Campaign"].GetDataTableEntryByKey(params);
                                        
                                        if(campaignResult.getRowCount() <= 0) {
                                            throw "Campaign [" + ID + "] not found";
                                        }
                                        
                                        var campaign = campaignResult.getRow(0);
                                        if((campaign.Status != "created")) {
                                            throw 'Campaign must be in "created" state in order to be approved.';
                                        }
                                        
                                        //set to in-progress state
                                        var params = {
                                            State: "in-progress",
                                            ID: ID
                                        };
                                        me.UpdateCampaignState(params);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="AutoRetryDeliveryTargets">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var eligibleDeliveryTargets = Things["TW.RSM.SFW.SoftwareManager.DeliveryTarget"].QueryDataTableEntries({
                                            query: {
                                                "sorts": [
                                                    {
                                                        "fieldName": "StatusUpdated",
                                                        "isAscending": true,
                                                    },
                                                ],
                                                "filters": {
                                                    "type": "And",
                                                    "filters": [
                                                        {
                                                            "type": "IN",
                                                            "fieldName": "Status",
                                                            "values": ["pending retry"],
                                                        },
                                                        {
                                                            "type": "GT",
                                                            "fieldName": "AutoRetriesRemaining",
                                                            "value": "0",
                                                        },
                                                    ],
                                                },
                                            },
                                        });
                                        
                                        var isTestDeployment = {};
                                        var isEligible = function(deliveryTarget) {
                                            if(!isTestDeployment.hasOwnProperty(deliveryTarget.CampaignID)) {
                                                isTestDeployment[deliveryTarget.CampaignID] = Things["TW.RSM.SFW.SoftwareManager.Campaign"].GetDataTableEntryByKey({key: deliveryTarget.CampaignID}).IsTest;
                                            }
                                            try {
                                                return !isTestDeployment[deliveryTarget.CampaignID] && (autoRetryIfDisconnected == "false" && Things[deliveryTarget.Name].isConnected || autoRetryIfDisconnected == "true");
                                            } catch (e) {
                                                logger.error("Thing: " + deliveryTarget.Name + " could not be found.");
                                                return false;
                                            }
                                        }
                                        
                                        var retryDeliveryTarget = function (deliveryTarget) {
                                            Things["TW.RSM.SFW.SoftwareManager"].RetryDeliveryTarget({ID: deliveryTarget.ID});
                                            deliveryTarget.AutoRetriesRemaining--;
                                        
                                            var values = Things["TW.RSM.SFW.SoftwareManager.DeliveryTarget"].CreateValues();
                                            values.ID = deliveryTarget.ID;
                                            values.AutoRetriesRemaining = deliveryTarget.AutoRetriesRemaining;
                                            values.MaxNumAutoRetries = deliveryTarget.MaxNumAutoRetries;
                                        
                                            Things["TW.RSM.SFW.SoftwareManager.DeliveryTarget"].UpdateDataTableEntry({values: values});
                                        }
                                        
                                        var autoRetryIfDisconnected = Things["TW.RSM.SFW.SoftwareManager.Configuration"].GetDataTableEntryByKey({key: "AutoRetryIfDisconnected"}).Value;
                                        var maxPerInterval = parseInt(Things["TW.RSM.SFW.SoftwareManager.Configuration"].GetDataTableEntryByKey({key: "AutoRetryMaxPerInterval"}).Value);
                                        
                                        eligibleDeliveryTargets = eligibleDeliveryTargets.rows.toArray()
                                            .filter(isEligible)
                                            .filter(function(deliveryTarget, i) { return i < maxPerInterval})
                                            .forEach(retryDeliveryTarget);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="ClearDeliveryTargetParameters">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var params = {
                                            infoTableName : "InfoTable",
                                            dataShapeName : "TW.RSM.SFW.DataShape.DeliveryTargetParameters"
                                        };
                                        var targetParameters = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        params = {
                                            name: "DeliveryTargetParameters",
                                            value: targetParameters
                                        };
                                        Resources["CurrentSessionInfo"].SetGlobalSessionInfoTableValue(params);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="ClearIncludedAssetSearches">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var params = {
                                            infoTableName : "InfoTable",
                                            dataShapeName : "EntityList"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(EntityList)
                                        var empty = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        var params = {
                                            name: "IncludedTargetAssets" /* STRING */,
                                            value: empty /* INFOTABLE */
                                        };
                                        
                                        var params2 = {
                                            name: "ExcludedTargetAssets" /* STRING */,
                                            value: empty /* INFOTABLE */
                                        };
                                        
                                        // no return
                                        Resources["CurrentSessionInfo"].SetGlobalSessionInfoTableValue(params);
                                        Resources["CurrentSessionInfo"].SetGlobalSessionInfoTableValue(params2);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="CopyCampaignDefinition">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        if((DefinitionID == null) || (DefinitionID == undefined)) {
                                            throw "No Package ID specified.";
                                        }
                                        if((Name == null) || (Name == undefined)) {
                                            throw "New package name not specified.";
                                        }
                                        
                                        
                                        //First look up the definition (make sure it exists)
                                        var params = { key: DefinitionID };
                                        var definitionResult = Things[me.name + ".Definition"].GetDataTableEntryByKey(params);
                                        if(definitionResult.getRowCount() <= 0) {
                                            throw "Error finding Package.  Package for ID [" + DefinitionID + "] was not found.";
                                        }
                                        var definitionRow = definitionResult.getRow(0);
                                        
                                        
                                        params = {
                                            Version1: definitionRow.Version1 /* STRING */,
                                            Version2: definitionRow.Version2 /* STRING */,
                                            Version3: definitionRow.Version3 /* STRING */,
                                            Version4: definitionRow.Version4 /* STRING */,
                                            PackageName: Name /* STRING */
                                        };
                                        
                                        // result: BOOLEAN
                                        if (!me.ValidateUniquePackageNameVersion(params)) {
                                            throw Resources["RuntimeLocalizationFunctions"].GetEffectiveToken({token: "TW.RSM.SFW.Mashup.PackageExistsDialog.Message"});
                                        }
                                        
                                        params = {
                                            Version1: definitionRow.Version1 /* STRING */,
                                            Repository: definitionRow.Repository /* THINGNAME */,
                                            Version2: definitionRow.Version2 /* STRING */,
                                            Description: definitionRow.Description /* STRING */,
                                            Version3: definitionRow.Version3 /* STRING */,
                                            ExpirationDate: definitionRow.ExpirationDate /* DATETIME */,
                                            Version4: definitionRow.Version4 /* STRING */,
                                            ScriptName: definitionRow.ScriptName /* STRING */,
                                            Published: false /* BOOLEAN */,
                                            UseCdn: definitionRow.UseCdn /* BOOLEAN */,
                                            Package: definitionRow.Package /* STRING */,
                                            Name: Name /* STRING */
                                        };
                                        
                                        // result: STRING
                                        var result = me.CreatePackage(params);
                                        
                                        //update campaign history
                                        params = {
                                            Name: Name,
                                            State: "created",
                                            Message: "Copied Package " + definitionRow.Name,
                                            ID: result
                                        };
                                        me.WriteSoftwareAuditHistory(params);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="DeleteCampaign">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        if((CampaignID == null) || (CampaignID == undefined)) {
                                            throw "No deployment ID specified.";
                                        }
                                        
                                        //Check that the campaign exists
                                        var params = { key: CampaignID };
                                        var campaignResult = Things[me.name + ".Campaign"].GetDataTableEntryByKey(params);
                                        if(campaignResult.getRowCount() <= 0) {
                                            throw "Deployment [" + CampaignID + "] not found";
                                        }
                                        var campaignRow = campaignResult.getRow(0);
                                        
                                        //Delete the targets
                                        var params = {
                                            DeploymentID: CampaignID /* STRING */
                                        };
                                        me.PurgeDeliveryTargetsForDeployment(params);
                                        
                                        //update campaign history
                                        var params = {
                                            Name: campaignRow.Name,
                                            State: "deleted",
                                            Message: "Deleted deployment " + campaignRow.Name,
                                            ID: CampaignID
                                        };
                                        me.WriteSoftwareAuditHistory(params);
                                        
                                        //Generate audit Event for Deployment Deletion
                                        var currentUser = Resources["CurrentSessionInfo"].GetCurrentUser();
                                        var eventData = {
                                            name: campaignRow.Name,
                                            username: currentUser
                                        };
                                        me.DeploymentDeletedEvent(eventData);
                                        
                                        //now delete the campaign
                                        var params = { key: CampaignID };
                                        Things[me.name + ".Campaign"].DeleteDataTableEntryByKey(params);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="DeleteDefinition">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        if((DefinitionID == null) || (DefinitionID == undefined)) {
                                            throw "No package ID specified.";
                                        }
                                        
                                        //First check to see if there are any campaigns that use this definition
                                        var query = {
                                          "filters": {
                                            "fieldName": "DefinitionID",
                                            "type": "EQ",
                                            "value": DefinitionID
                                          }
                                        };
                                        var params = {
                                        	query: query /* QUERY */
                                        };
                                        
                                        // result: INFOTABLE
                                        var campaignResult = Things[me.name + ".Campaign"].QueryDataTableEntries(params);
                                        if(campaignResult != null && campaignResult != undefined)
                                        {
                                            var campaignRowCount = campaignResult.getRowCount();
                                            if(campaignRowCount > 0) {
                                                var errorString = "Can not delete package because it is used by the following deployments: ";
                                                for (var i=0 ; i<campaignRowCount ; i++) {
                                                    var campaignRow = campaignResult.getRow(i);
                                                    errorString = errorString + campaignRow.Name;
                                                    if(i < (campaignRowCount - 1)) {
                                                        errorString = errorString + ", ";
                                                    }
                                                }
                                                errorString = errorString + ".";
                                        
                                                throw errorString;
                                            }
                                        }
                                        
                                        
                                        var paramDef = {
                                        	DefinitionID: DefinitionID
                                        };
                                        
                                        //Generate audit Event for Delete definition/Package
                                        var packageResult = me.GetDefinitionById(paramDef);
                                        var packageName = packageResult.getRow(0).Name;
                                        var currentUser = Resources["CurrentSessionInfo"].GetCurrentUser();
                                        var version = packageResult.getRow(0).VersionConcat;
                                        var eventData = {
                                            name: packageName,
                                            username: currentUser,
                                            version: version
                                        };
                                        me.PackageDeletedEvent(eventData);
                                        //There are no campaigns defined, delete the definition
                                        params = { key: DefinitionID };
                                        Things[me.name + ".Definition"].DeleteDataTableEntryByKey(params);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="DeleteDeliveryTargetParameter">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        //Validate input
                                        if((Name == null) || (Name == undefined) || (Name.length <= 0)){
                                            throw "Invalid Parameter Name";
                                        }
                                        
                                        var sessionTable = Resources["CurrentSessionInfo"].GetGlobalSessionValues();
                                        
                                        if((sessionTable.DeliveryTargetParameters == null) || (sessionTable.DeliveryTargetParameters == undefined)) {
                                            //Do nothing, nothing is there to delete
                                        } else {
                                            //Search for the name
                                            var parameterRowCount = sessionTable.DeliveryTargetParameters.getRowCount();
                                            for (var i=0 ; i<parameterRowCount ; i++) {
                                                var row = sessionTable.DeliveryTargetParameters.getRow(i);
                                                //Check case insensitive
                                                if(row.Name.toLowerCase() == Name.toLowerCase()){
                                                    //Found - delete it and then break out of the loop
                                                    sessionTable.DeliveryTargetParameters.RemoveRow(i);
                                                    break;
                                                }
                                            }
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="EditCampaign">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var values = Things["TW.RSM.SFW.SoftwareManager.Campaign"].CreateValues();
                                        
                                        if(DownloadImmediately)
                                        {
                                            DownloadDate = new Date();
                                        }
                                        
                                        if(InstallImmediately)
                                        {
                                            InstallDate = DownloadDate;
                                        }
                                        
                                        values.Description = Description; //STRING
                                        values.DownloadImmediately = DownloadImmediately; //BOOLEAN
                                        values.Name = Name; //STRING
                                        values.ScheduledDownloadDate = DownloadDate; //DATETIME
                                        values.ScheduledInstallDate = InstallDate; //DATETIME
                                        values.InstallImmediately = InstallImmediately; //BOOLEAN
                                        values.ID = ID;
                                        
                                        var params = {
                                            values: values,
                                        };
                                        
                                        // no return
                                        Things["TW.RSM.SFW.SoftwareManager.Campaign"].UpdateDataTableEntry(params);
                                        
                                        
                                        var values = Things["TW.RSM.SFW.SoftwareManager.DeliveryTarget"].CreateValues();
                                        
                                        values.CampaignID = ID; //STRING
                                        
                                        var params = {
                                            values: values,
                                        };
                                        
                                        // result: INFOTABLE
                                        var deliveryTargets = Things["TW.RSM.SFW.SoftwareManager.DeliveryTarget"].QueryDataTableEntries(params);
                                        
                                        for(var i=0; i<deliveryTargets.getRowCount(); i++)
                                        {
                                            values = Things["TW.RSM.SFW.SoftwareManager.DeliveryTarget"].CreateValues();
                                        
                                            values.ID = deliveryTargets.getRow(i).ID; //STRING [Primary Key]
                                            values.InstallDate = InstallDate; //DATETIME
                                            values.DownloadDate = DownloadDate; //DATETIME
                                        
                                            var params = {
                                                values: values,
                                            };
                                        
                                            // no return
                                            Things["TW.RSM.SFW.SoftwareManager.DeliveryTarget"].UpdateDataTableEntry(params);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="EnableAutoRetry">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        if(enable) {
                                            Things["TW.RSM.SFW.Timer.AutoRetryTimer"].EnableTimer();
                                        } else {
                                            Things["TW.RSM.SFW.Timer.AutoRetryTimer"].DisableTimer();
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetAccessPrivileges">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        if((DefinitionID == null) || (DefinitionID == undefined) || (DefinitionID.length <= 0)) {
                                            throw "No Defintion ID specified.";
                                        }
                                        
                                        //First look up the definition (make sure it exists)
                                        var params = { key: DefinitionID };
                                        var definitionResult = Things[me.name + ".Definition"].GetDataTableEntryByKey(params);
                                        if(definitionResult.getRowCount() <= 0) {
                                            throw "Error adding Access Privilege '" + PrivilegeName + "' for Package with ID [" + DefinitionID + "]. Package was not found.";
                                        }
                                        
                                        
                                        // Determine if this privilege was already added for this Definition:
                                        var query = {
                                            "filters": {
                                                "type": "AND",
                                                "filters": [
                                                    {
                                                        "fieldName": "DefinitionID",
                                                        "type": "EQ",
                                                        "value": DefinitionID
                                                    }
                                                ]
                                            }
                                            ,
                                            "sorts": [
                                                {
                                                    "fieldName": "Timestamp",
                                                    "isAscending": "false"
                                                }
                                            ]
                                        };
                                        
                                        
                                        query.filters.filters.push( {
                                           "fieldName": "IsUser",
                                           "type": "EQ",
                                            "value": IsUser
                                        })
                                        
                                        var params = {
                                            maxItems: 500,
                                            query: query
                                        };
                                        
                                        var result = Things[me.name + ".AccessPrivileges"].QueryDataTableEntries(params);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetAllDeploymentsForAsset">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var result;
                                        if(!AssetName)
                                        {
                                            result = { dataShape: { fieldDefinitions : {} }, rows: [] };
                                        }
                                        else
                                        {
                                            if(AssetName == null || AssetName == undefined || AssetName.length == 0)
                                                AssetName = "*";
                                        
                                            var targetQuery = {
                                              "filters": {
                                                "fieldName": "Name",
                                                "type": "LIKE",
                                                "value": AssetName
                                              }
                                            };
                                        
                                            var params = {
                                                query: targetQuery /* QUERY */,
                                            };
                                        
                                        
                                            // result: INFOTABLE
                                            var targetRows = Things["TW.RSM.SFW.SoftwareManager.DeliveryTarget"].QueryDataTableEntries(params);
                                        
                                            params = {
                                                infoTableName : "InfoTable",
                                                dataShapeName : "TW.RSM.SFW.DataShape.Campaign"
                                            };
                                        
                                            // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(TW.RSM.SFW.DataShape.Campaign)
                                            var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                            var campHash = {};
                                        
                                            for (var i=0; i<targetRows.getRowCount(); i++) {
                                                var targetRow = targetRows.getRow(i);
                                        
                                                query = {
                                                    "filters": {
                                                        "type": "AND",
                                                        "filters": [
                                                            {
                                                                "fieldName": "ID",
                                                                "type": "EQ",
                                                                "value": targetRow.CampaignID
                                                            }
                                                        ]
                                                    }
                                                    ,
                                                    sorts: [
                                                    {
                                                        fieldName: "DateCreated",
                                                        isAscending: false,
                                                        isCaseSensitive: false
                                                    }
                                                ]
                                                };
                                        
                                                params = {
                                                    maxItems: 500,
                                                    query: query
                                                };
                                                var campaigns = Things["TW.RSM.SFW.SoftwareManager.Campaign"].QueryDataTableEntries(params);
                                        
                                                if(campaigns.getRowCount() > 0)
                                                {
                                                    campHash[campaigns.getRow(0).ID] = campaigns.getRow(0);
                                                }
                                        
                                            }
                                        
                                            for (var i in campHash)
                                            {
                                                result.AddRow(campHash[i]);
                                            }
                                        
                                        var params = {
                                            sortColumn: "DateCreated" /* STRING */,
                                            t: result /* INFOTABLE */,
                                            ascending: false /* BOOLEAN */
                                        };
                                        
                                        // result: INFOTABLE
                                        result = Resources["InfoTableFunctions"].Sort(params);
                                        
                                        
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetApprovalServices">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        //Get the services of the software update manager
                                        var services = me.GetServiceDefinitions();
                                        
                                        //Construct the result infotable
                                        var params = {
                                            infoTableName : "InfoTable",
                                            dataShapeName : "EntityList"
                                        };
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        //Loop over all services to see if the parameters and result match the required service defintion
                                        for (var i=0 ; i<services.getRowCount() ; i++) {
                                            var serviceRow = services.getRow(i);
                                            var parameters = serviceRow.parameterDefinitions;
                                            //Check that the parameter count, base type, and name are correct
                                            if(parameters.getRowCount() == 1) {
                                                var parameterRow = parameters.getRow(0);
                                                if(parameterRow.baseType == "INFOTABLE") {
                                                    if(parameterRow.name.toLowerCase() == "campaign") {
                                                        //Check result base type is correct
                                                        var resultTypeRow = serviceRow.resultType.getRow(0);
                                                        if(resultTypeRow.baseType == "NOTHING") {
                                                            result.AddRow({"name" : serviceRow.name, "description" : serviceRow.description});
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetAutoRetryRate">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        result = Things["TW.RSM.SFW.Timer.AutoRetryTimer"].GetConfigurationTable({tableName: "Settings"}).updateRate;
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetByTimeSelections">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var shape = {
                                            infoTableName : "InfoTable",
                                            dataShapeName : "TW.RSM.SFW.DataShape.NameValue"
                                        };
                                        
                                        var table = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(shape);
                                        
                                        
                                        table.AddRow({
                                            Name: 'Day',
                                            Value: 'Day',
                                            LocalizedName: Resources["RuntimeLocalizationFunctions"].GetEffectiveToken({token: 'TW.RSM.SFW.Day'})
                                        });
                                        
                                        table.AddRow({
                                            Name: 'Week',
                                            Value: 'Week',
                                            LocalizedName: Resources["RuntimeLocalizationFunctions"].GetEffectiveToken({token: 'TW.RSM.SFW.Week'})
                                        });
                                        
                                        
                                        var result = table;
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetCampaignById">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var params = { key: CampaignID };
                                        result = Things[me.name + ".Campaign"].GetDataTableEntryByKey(params);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetCampaigns">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var query = {
                                            "sorts": [{
                                                    "fieldName": "timestamp",
                                                    "isAscending": "true"
                                             }]
                                        };
                                        var params = { maxItems: 500, query: query };
                                        if (max&&!isNaN(max)) {
                                            params.maxItems = max;
                                        }
                                        var result = Things[me.name + ".Campaign"].GetDataTableEntries(params);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetCompletedWithSelections">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var shape = {
                                                                                    infoTableName : "InfoTable",
                                                                                    dataShapeName : "TW.RSM.SFW.DataShape.NameValue"
                                                                                };
                                        
                                                                                var table = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(shape);
                                        
                                                                                table.AddRow({
                                                                                    Name: 'All',
                                                                                    Value: "",
                                                                                    LocalizedName: Resources["RuntimeLocalizationFunctions"].GetEffectiveToken({token: 'TW.RSM.SFW.CompletedWith.All'})
                                                                                });
                                        
                                                                                table.AddRow({
                                                                                    Name: 'With Issues',
                                                                                    Value: "with_issues",
                                                                                    LocalizedName: Resources["RuntimeLocalizationFunctions"].GetEffectiveToken({token: 'TW.RSM.SFW.CompletedWith.WithIssues'})
                                                                                });
                                        
                                                                                table.AddRow({
                                                                                    Name: 'Without Issues',
                                                                                    Value: "without_issues",
                                                                                    LocalizedName: Resources["RuntimeLocalizationFunctions"].GetEffectiveToken({token: 'TW.RSM.SFW.CompletedWith.WithoutIssues'})
                                                                                });
                                        
                                                                                var result = table;
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetConcatenatedVersion">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        versionSuffix = version4 ? version4 : ""
                                        
                                        versionSuffix = version3 ?
                                            (versionSuffix.length > 0) ? version3 + "." + versionSuffix : version3 :
                                            (versionSuffix.length > 0) ? "." + versionSuffix : versionSuffix
                                        
                                        versionSuffix = version2 ?
                                            (versionSuffix.length > 0) ? version2 + "." + versionSuffix : version2 :
                                            (versionSuffix.length > 0) ? "." + versionSuffix : versionSuffix
                                        
                                        result = (versionSuffix.length > 0) ? version1 + "." + versionSuffix : version1
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetDefaultAutoRetryCountMax">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        result = Things["TW.RSM.SFW.SoftwareManager.Configuration"].GetDataTableEntryByKey({key: "DefaultAutoRetryCountMax"}).Value;
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetDefinitionById">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        if((DefinitionID == null) || (DefinitionID == undefined) || (DefinitionID.length == 0)) {
                                            // TW.RSM.SFW.DataShape.Definition entry object
                                            var newEntry = new Object();
                                            newEntry.Description = ""; // STRING
                                            newEntry.Published = undefined; // BOOLEAN
                                            newEntry.Repository = undefined; // STRING
                                            newEntry.Version1 = undefined; // STRING
                                            newEntry.Version2 = undefined; // STRING
                                            newEntry.Version3 = undefined; // STRING
                                            newEntry.ScriptName = undefined; // STRING
                                            newEntry.Version4 = undefined; // STRING
                                            newEntry.ApprovalService = undefined; // STRING
                                            newEntry.Timestamp = undefined; // DATETIME
                                            newEntry.ExpirationDate = undefined; // DATETIME
                                            newEntry.Name = ""; // STRING
                                            newEntry.ID = undefined; // STRING - isPrimaryKey = true
                                            newEntry.CreatedBy = undefined; // USERNAME
                                            newEntry.Package = undefined; // STRING
                                            newEntry.RequiresApproval = undefined; // BOOLEAN
                                        
                                            var params = {
                                                infoTableName : "InfoTable",
                                                dataShapeName : "TW.RSM.SFW.DataShape.Definition"
                                            };
                                        
                                            // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(TW.RSM.SFW.DataShape.Definition)
                                            var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                            result.AddRow(newEntry);
                                        }
                                        else {
                                            params = { key: DefinitionID };
                                            result = Things[me.name + ".Definition"].GetDataTableEntryByKey(params);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetDefinitions">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var params = {
                                            maxItems: 500,
                                            query: {
                                        
                                                sorts: [
                                                    {
                                                        fieldName: "Name",
                                                        isAscending: true,
                                                        isCaseSensitive: false
                                                    }
                                                ]
                                            }
                                        };
                                        var result = Things[me.name + ".Definition"].QueryDataTableEntries(params);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetDefinitionsByCriteria">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var query = {
                                            "filters": {
                                                "type": "AND",
                                                "filters": [
                                                    {
                                                        "fieldName": "Version1",
                                                        "type": "LIKE",
                                                        "value": (version1!=""?version1:'*')
                                                    }
                                                    ,
                                                    {
                                                        "fieldName": "Version2",
                                                        "type": "LIKE",
                                                        "value": (version2!=""?version2:'*')
                                                    }
                                                    ,
                                                    {
                                                        "fieldName": "Version3",
                                                        "type": "LIKE",
                                                        "value": (version3!=""?version3:'*')
                                                    }
                                                    ,
                                                    {
                                                        "fieldName": "Version4",
                                                        "type": "LIKE",
                                                        "value": (version4!=""?version4:'*')
                                                    }
                                                ]
                                            }
                                            ,
                                            "sorts": [
                                                {
                                                    "fieldName": "Timestamp",
                                                    "isAscending": "false"
                                                }
                                            ]
                                        };
                                        
                                        var sessionInfo = Resources["CurrentSessionInfo"].GetGlobalSessionValues()["queryPackageByStatus"];
                                        //logger.error("Mah Package Status Before: "+sessionInfo);
                                        if (sessionInfo&&sessionInfo!=""&&sessionInfo!=undefined) {
                                            if (sessionInfo=="Awaiting Approval") {
                                                query.filters.filters.push({
                                                    "fieldName": "RequiresApproval",
                                                    "type": "EQ",
                                                    "value": true
                                                });
                                            } else if (sessionInfo=="Approved") {
                                                query.filters.filters.push({
                                                    "fieldName": "Published",
                                                    "type": "EQ",
                                                    "value": false
                                                });
                                                query.filters.filters.push({
                                                    "fieldName": "RequiresApproval",
                                                    "type": "EQ",
                                                    "value": true
                                                });
                                            } else if (sessionInfo=="Published") {
                                                query.filters.filters.push({
                                                    "fieldName": "Published",
                                                    "type": "EQ",
                                                    "value": true
                                                });
                                            } else if (sessionInfo=="Not Published") {
                                                query.filters.filters.push({
                                                    "fieldName": "Published",
                                                    "type": "EQ",
                                                    "value": false
                                                });
                                            } else if (sessionInfo=="expired") {
                                                query.filters.filters.push({
                                                    "fieldName": "ExpirationDate",
                                                    "type": "LT",
                                                    "value": new Date()
                                                });
                                            } else if (sessionInfo=="expiring") {
                                                var dateExpring = new Date();
                                                dateExpring.setDate(dateExpring.getDate()+3);
                                                query.filters.filters.push({
                                                    "fieldName": "ExpirationDate",
                                                    "type": "LT",
                                                    "value": dateExpring
                                                });
                                                query.filters.filters.push({
                                                    "fieldName": "ExpirationDate",
                                                    "type": "GT",
                                                    "value": new Date()
                                                });
                                                query.filters.filters.push({
                                                    "fieldName": "Published",
                                                    "type": "EQ",
                                                    "value": false
                                                });
                                            }
                                        
                                            params = {
                                               name: "queryPackageByStatus",
                                               value: undefined
                                            };
                                            Resources["CurrentSessionInfo"].SetGlobalSessionStringValue(params);
                                        }
                                        //logger.error("Mah Package Status After: "+sessionInfo);
                                        
                                        if (user) {
                                            query.filters.filters.push({
                                                "fieldName": "CreatedBy",
                                                "type": "EQ",
                                                "value": user
                                            })
                                        }
                                        if(packageName){
                                            query.filters.filters.push({
                                                "fieldName": "Name",
                                                "type": "LIKE",
                                                "value": packageName
                                            }
                                                                      )
                                        }
                                        if(endDate && startDate){
                                            query.filters.filters.push({
                                                "fieldName": "timestamp",
                                                "type": "BETWEEN",
                                                "from": startDate,
                                                "to": endDate
                                            }
                                                                      )
                                        }
                                        if(packageDescription){
                                            query.filters.filters.push( {
                                                "fieldName": "Description",
                                                "type": "LIKE",
                                                "value": packageDescription
                                            })
                                        }
                                        if (published!==undefined) {
                                                query.filters.filters.push({
                                                    "fieldName": "Published",
                                                    "type": "EQ",
                                                    "value": published
                                                }
                                            )
                                        }
                                        if(showExpired != "Both") {
                                            if(showExpired == "true"){
                                                query.filters.filters.push({
                                                    "fieldName": "ExpirationDate",
                                                    "type": "LT",
                                                    "value": new Date()
                                                })
                                            }
                                            else if(showExpired == "false")
                                            {
                                                query.filters.filters.push({
                                                    "fieldName": "ExpirationDate",
                                                    "type": "GT",
                                                    "value": new Date()
                                                })
                                            }
                                        }
                                        
                                        var params = {
                                        
                                            maxItems: 500,
                                            query: query
                                        };
                                        
                                        //logger.info("GetDefinitionsByCriteria(): Get definition...");
                                        var definitionResult = Things[me.name + ".Definition"].QueryDataTableEntries(params);
                                        //logger.info("GetDefinitionsByCriteria(): Got definitionResult: " + definitionResult.getRowCount());
                                        
                                        var result;
                                        if(isAdmin(user)){
                                            result = definitionResult;
                                        }
                                        else {
                                            logger.info("GetDefinitionsByCriteria(): Not an admin...");
                                            var params = {
                                                infoTableName : "InfoTable",
                                                dataShapeName : "TW.RSM.SFW.DataShape.Definition"
                                            };
                                        
                                            // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(TW.RSM.SFW.DataShape.Definition)
                                            var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                            //logger.info("GetDefinitionsByCriteria(): pkgs:" + definitionResult.rows.length);
                                            for(var i=0;i<definitionResult.rows.length; i++)
                                            {
                                        
                                                var currentUser = Resources["CurrentSessionInfo"].GetCurrentUser();
                                                //logger.info("GetDefinitionsByCriteria(): Get Access setting for 'View & Deploy' and pkg: " + definitionResult.rows[i].Name + " for user '" + currentUser + "'");
                                                var params = {
                                                    PrivilegeName: "View & Deploy" /* STRING */,
                                                    UserName: currentUser /* STRING */,
                                                    DefinitionID: definitionResult.rows[i].ID /* STRING */
                                                };
                                        
                                                // result: BOOLEAN
                                                if(definitionResult.rows[i].CreatedBy == currentUser || me.HasAccessPrivilege(params))
                                                {
                                                    logger.debug("Access to package '" + definitionResult.rows[i].Name + "' for user '" + currentUser + "'");
                                                    result.AddRow(definitionResult.rows[i]);
                                                }
                                                else
                                                {
                                                    logger.debug("No Access to package '" + definitionResult.rows[i].Name + "' for user '" + currentUser + "'");
                                                }
                                            }
                                        }
                                        
                                        
                                        function isAdmin(UserName)
                                        {
                                            try{
                                            var members = Groups["Administrators"].GetGroupMembers();
                                            } catch(error)
                                            {
                                                //logger.info("GetDefinitionsByCriteria(): Got isAdmin error: " + error);
                                                return false;
                                            }
                                            var membersTableLength = members.rows.length;
                                        
                                            for (var x = 0; x < membersTableLength; x++) {
                                                 var memberRow = members.rows[x];
                                                if(UserName == memberRow.name)
                                                {
                                                     //logger.info("User '" + UserName + "' is an admin");
                                                    return true;
                                                }
                                            }
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetDeliveryTargetParametersInfoTable">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var sessionTable = Resources["CurrentSessionInfo"].GetGlobalSessionValues();
                                        //If the session variable does not exist, creeate it
                                        if((sessionTable.DeliveryTargetParameters == null) || (sessionTable.DeliveryTargetParameters == undefined)) {
                                            var params = {
                                                infoTableName : "InfoTable",
                                                dataShapeName : "TW.RSM.SFW.DataShape.DeliveryTargetParameters"
                                            };
                                            var targetParameters = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                            params = {
                                                name: "DeliveryTargetParameters",
                                                value: targetParameters
                                            };
                                            Resources["CurrentSessionInfo"].SetGlobalSessionInfoTableValue(params);
                                        
                                            //Get the table again after adding the value
                                            sessionTable = Resources["CurrentSessionInfo"].GetGlobalSessionValues();
                                        }
                                        var result = sessionTable.DeliveryTargetParameters;
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetDeliveryTargetsForCampaign">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var query = {
                                            "filters": {
                                                "type": "AND",
                                                "filters": [
                                                    {
                                                        "fieldName": "CampaignID",
                                                        "type": "EQ",
                                                        "value": CampaignID
                                                    }
                                                ]
                                            }
                                            ,
                                            "sorts": [
                                                {
                                                    "fieldName": "Timestamp",
                                                    "isAscending": "false"
                                                },
                                                {
                                                    "fieldName": "Name",
                                                    "isAscending": "true"
                                                }
                                            ]
                                        };
                                        if(AssetName){
                                            query.filters.filters.push({
                                                "fieldName": "Name",
                                                "type": "LIKE",
                                                "value": AssetName
                                            }
                                                                      )
                                        }
                                        if(StartDate && EndDate){
                                            query.filters.filters.push({
                                                "fieldName": "timestamp",
                                                "type": "BETWEEN",
                                                "from": StartDate,
                                                "to": EndDate
                                            }
                                                                      )
                                        }
                                        
                                        if(Status){
                                            query.filters.filters.push( {
                                                "fieldName": "Status",
                                                "type": "LIKE",
                                                "value": Status
                                            })
                                        }
                                        
                                        
                                        
                                            var params = {
                                        
                                                maxItems: 500,
                                                query: query
                                            };
                                        
                                            var result = Things[me.name + ".DeliveryTarget"].QueryDataTableEntries(params);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetDeploymentCountForAssetSearches">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var result;
                                        
                                        var params = {
                                            ExcludedTargetSearches: ExcludedTargetSearches /* INFOTABLE */,
                                            IncludedTargetSearches: IncludedTargetSearches /* INFOTABLE */,
                                            UserName: Resources["CurrentSessionInfo"].GetCurrentUser(),
                                            excludeInActive: excludeInActive
                                        }
                                        var assets = Things["TW.RSM.SFW.SFWHelper"].GetTargetAssets(params);
                                        var campHash = {};
                                        params = {
                                            infoTableName : "InfoTable",
                                            dataShapeName : "TW.RSM.SFW.DataShape.Campaign"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(TW.RSM.SFW.DataShape.Campaign)
                                        var deployments = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        for(var i=0; i<assets.getRowCount(); i++)
                                        {
                                        
                                            var targetQuery = {
                                              "filters": {
                                                "fieldName": "Name",
                                                "type": "EQ",
                                                "value": assets.getRow(i).Name
                                              }
                                            };
                                        
                                            var params = {
                                                query: targetQuery /* QUERY */,
                                            };
                                        
                                        
                                            // result: INFOTABLE
                                            var targetRows = Things["TW.RSM.SFW.SoftwareManager.DeliveryTarget"].QueryDataTableEntries(params);
                                        
                                            for (var j=0; j<targetRows.getRowCount(); j++) {
                                                var targetRow = targetRows.getRow(j);
                                        
                                                query = {
                                                    "filters": {
                                                        "type": "AND",
                                                        "filters": [
                                                            {
                                                                "fieldName": "ID",
                                                                "type": "EQ",
                                                                "value": targetRow.CampaignID
                                                            }
                                                        ]
                                                    }
                                                    ,
                                                    sorts: [
                                                    {
                                                        fieldName: "DateCreated",
                                                        isAscending: false,
                                                        isCaseSensitive: false
                                                    }
                                                ]
                                                };
                                        
                                                params = {
                                                    maxItems: 500,
                                                    query: query
                                                };
                                                var campaigns = Things["TW.RSM.SFW.SoftwareManager.Campaign"].QueryDataTableEntries(params);
                                        
                                                if(campaigns.getRowCount() > 0)
                                                {
                                                    campHash[campaigns.getRow(0).ID] = campaigns.getRow(0);
                                                }
                                        
                                            }
                                        
                                        }
                                        
                                        for (var i in campHash)
                                        {
                                            deployments.AddRow(campHash[i]);
                                        }
                                        result = deployments.getRowCount();
                                        
                                        /*
                                            for(var i=0; i<result.getRowCount(); i++)
                                            {
                                                var deplo = result.getRow(i);
                                                params =
                                                {
                                                    key : deplo.ID
                                                }
                                                // no return
                                                Things["TW.RSM.SFW.SoftwareManager.Campaign"].DeleteDataTableEntryByKey(params);
                                            }
                                            */
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetDeploymentsByCriteria">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var query = {
                                            "filters": {
                                                "type": "AND",
                                                "filters": [
                                                    {
                                                        "fieldName": "DefinitionID",
                                                        "type": "LIKE",
                                                        "value": "*"
                                                    }
                                                ]
                                            }
                                            ,
                                            sorts: [
                                                    {
                                                        fieldName: "timestamp",
                                                        isAscending: false,
                                                        isCaseSensitive: false
                                                    }
                                                ]
                                        };
                                        
                                        if(Username){
                                            query.filters.filters.push({
                                                "fieldName": "CreatedBy",
                                                "type": "EQ",
                                                "value": Username
                                            }
                                                                      )
                                        }
                                        
                                        
                                        if(Name){
                                            query.filters.filters.push({
                                                "fieldName": "Name",
                                                "type": "LIKE",
                                                "value": Name
                                            }
                                                                      )
                                        }
                                        
                                        if(StartDate && EndDate){
                                            query.filters.filters.push({
                                                "fieldName": "timestamp",
                                                "type": "BETWEEN",
                                                "from": StartDate,
                                                "to": EndDate
                                            }
                                                                      )
                                        }
                                        
                                        if(Description){
                                            query.filters.filters.push( {
                                                "fieldName": "Description",
                                                "type": "LIKE",
                                                "value": Description
                                            })
                                        }
                                        if(Status){
                                            query.filters.filters.push( {
                                                "fieldName": "Status",
                                                "type": "LIKE",
                                                "value": Status
                                            })
                                        }
                                        if(PackageName){
                                            query.filters.filters.push( {
                                                "fieldName": "PackageName",
                                                "type": "LIKE",
                                                "value": PackageName
                                            })
                                        }
                                        
                                        var params = {
                                            query: query /* QUERY */,
                                        };
                                        
                                        // no return
                                        try{
                                            result = Things["TW.RSM.SFW.SoftwareManager.Campaign"].QueryDataTableEntries(params);
                                        }catch(ex)
                                        {
                                            logger.error(ex.message)
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetDeploymentsForAsset">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var result;
                                        if(!AssetName)
                                        {
                                            result = { dataShape: { fieldDefinitions : {} }, rows: [] };
                                        }
                                        else
                                        {
                                            if(AssetName == null || AssetName == undefined || AssetName.length == 0)
                                                AssetName = "";
                                        
                                            var targetQuery = {
                                              "filters": {
                                                "fieldName": "Name",
                                                "type": "EQ",
                                                "value": AssetName
                                              }
                                            };
                                        
                                            var params = {
                                                query: targetQuery /* QUERY */,
                                            };
                                        
                                        
                                            // result: INFOTABLE
                                            var targetRows = Things["TW.RSM.SFW.SoftwareManager.DeliveryTarget"].QueryDataTableEntries(params);
                                        
                                            params = {
                                                infoTableName : "InfoTable",
                                                dataShapeName : "TW.RSM.SFW.DataShape.Campaign"
                                            };
                                        
                                            // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(TW.RSM.SFW.DataShape.Campaign)
                                            var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                            var campHash = {};
                                        
                                            for (var i=0; i<targetRows.getRowCount(); i++) {
                                                var targetRow = targetRows.getRow(i);
                                        
                                                query = {
                                                    "filters": {
                                                        "type": "AND",
                                                        "filters": [
                                                            {
                                                                "fieldName": "ID",
                                                                "type": "EQ",
                                                                "value": targetRow.CampaignID
                                                            }
                                                        ]
                                                    }
                                                    ,
                                                    sorts: [
                                                    {
                                                        fieldName: "DateCreated",
                                                        isAscending: false,
                                                        isCaseSensitive: false
                                                    }
                                                ]
                                                };
                                        
                                                params = {
                                                    maxItems: 500,
                                                    query: query
                                                };
                                                var campaigns = Things["TW.RSM.SFW.SoftwareManager.Campaign"].QueryDataTableEntries(params);
                                        
                                                if(campaigns.getRowCount() > 0)
                                                {
                                                    campHash[campaigns.getRow(0).ID] = campaigns.getRow(0);
                                                }
                                        
                                            }
                                        
                                            for (var i in campHash)
                                            {
                                                result.AddRow(campHash[i]);
                                            }
                                        
                                            var params = {
                                                sortColumn: "DateCreated" /* STRING */,
                                                t: result /* INFOTABLE */,
                                                ascending: false /* BOOLEAN */
                                            };
                                        
                                            // result: INFOTABLE
                                            result = Resources["InfoTableFunctions"].Sort(params);
                                        
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetDeploymentsForAssetSearches">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var result;
                                        
                                        var params = {
                                            ExcludedTargetSearches: ExcludedTargetSearches /* INFOTABLE */,
                                            IncludedTargetSearches: IncludedTargetSearches /* INFOTABLE */,
                                            UserName: Resources["CurrentSessionInfo"].GetCurrentUser(),
                                            excludeInActive: excludeInActive
                                        }
                                        var assets = Things["TW.RSM.SFW.SFWHelper"].GetTargetAssets(params);
                                        var campHash = {};
                                        params = {
                                            infoTableName : "InfoTable",
                                            dataShapeName : "TW.RSM.SFW.DataShape.Campaign"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(TW.RSM.SFW.DataShape.Campaign)
                                        var deployments = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        for(var i=0; i<assets.getRowCount(); i++)
                                        {
                                        
                                            var targetQuery = {
                                              "filters": {
                                                "fieldName": "Name",
                                                "type": "EQ",
                                                "value": assets.getRow(i).Name
                                              }
                                            };
                                        
                                            var params = {
                                                query: targetQuery /* QUERY */,
                                            };
                                        
                                        
                                            // result: INFOTABLE
                                            var targetRows = Things["TW.RSM.SFW.SoftwareManager.DeliveryTarget"].QueryDataTableEntries(params);
                                        
                                            for (var j=0; j<targetRows.getRowCount(); j++) {
                                                var targetRow = targetRows.getRow(j);
                                        
                                                query = {
                                                    "filters": {
                                                        "type": "AND",
                                                        "filters": [
                                                            {
                                                                "fieldName": "ID",
                                                                "type": "EQ",
                                                                "value": targetRow.CampaignID
                                                            }
                                                        ]
                                                    }
                                                    ,
                                                    sorts: [
                                                    {
                                                        fieldName: "DateCreated",
                                                        isAscending: false,
                                                        isCaseSensitive: false
                                                    }
                                                ]
                                                };
                                        
                                                var params2 = {
                                                    maxItems: 500,
                                                    query: query
                                                };
                                                var campaigns = Things["TW.RSM.SFW.SoftwareManager.Campaign"].QueryDataTableEntries(params2);
                                        
                                                if(campaigns.getRowCount() > 0)
                                                {
                                                    campHash[campaigns.getRow(0).ID] = campaigns.getRow(0);
                                                }
                                        
                                            }
                                        
                                        }
                                        
                                        for (var i in campHash)
                                        {
                                            deployments.AddRow(campHash[i]);
                                        }
                                        result = deployments;
                                        
                                        /*
                                            for(var i=0; i<result.getRowCount(); i++)
                                            {
                                                var deplo = result.getRow(i);
                                                params =
                                                {
                                                    key : deplo.ID
                                                }
                                                // no return
                                                Things["TW.RSM.SFW.SoftwareManager.Campaign"].DeleteDataTableEntryByKey(params);
                                            }
                                            */
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetDeploymentsHistoricalConfig">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var params = {
                                            infoTableName : "InfoTable",
                                            dataShapeName : "TW.RSM.SFW.DataShape.NameValue"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(TW.RSM.SFW.DataShape.NameValue)
                                        result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        var params = {
                                            key: "historical_age_purge" /* STRING */
                                        };
                                        
                                        // result: INFOTABLE
                                        var entry = Things["TW.RSM.SFW.SoftwareManager.Configuration"].GetDataTableEntryByKey(params);
                                        // TW.RSM.SFW.DataShape.NameValue entry object
                                        var newEntry = new Object();
                                        newEntry.Value = entry.Value; // STRING
                                        if(entry.Value == "-1")
                                        {
                                            newEntry.Name = Resources["RuntimeLocalizationFunctions"].GetEffectiveToken({token: 'TW.RSM.SFW.PurgeDeploymentHistoryOption.Never'}); // STRING - isPrimaryKey = true
                                        }else if(entry.Value == "86400000")
                                        {
                                            newEntry.Name = Resources["RuntimeLocalizationFunctions"].GetEffectiveToken({token: 'TW.RSM.SFW.PurgeDeploymentHistoryOption.1Day'}); // STRING - isPrimaryKey = true
                                        }else if(entry.Value == "604800000")
                                        {
                                            newEntry.Name = Resources["RuntimeLocalizationFunctions"].GetEffectiveToken({token: 'TW.RSM.SFW.PurgeDeploymentHistoryOption.1Week'}); // STRING - isPrimaryKey = true
                                        }else if(entry.Value == "2592000000")
                                        {
                                            newEntry.Name = Resources["RuntimeLocalizationFunctions"].GetEffectiveToken({token: 'TW.RSM.SFW.PurgeDeploymentHistoryOption.1Month'}); // STRING - isPrimaryKey = true
                                        }else if(entry.Value == "7776000000")
                                        {
                                            newEntry.Name = Resources["RuntimeLocalizationFunctions"].GetEffectiveToken({token: 'TW.RSM.SFW.PurgeDeploymentHistoryOption.3Months'}); // STRING - isPrimaryKey = true
                                        }else if(entry.Value == "15552000000")
                                        {
                                            newEntry.Name = Resources["RuntimeLocalizationFunctions"].GetEffectiveToken({token: 'TW.RSM.SFW.PurgeDeploymentHistoryOption.6Months'}); // STRING - isPrimaryKey = true
                                        }else if(entry.Value == "31536000000")
                                        {
                                            newEntry.Name = Resources["RuntimeLocalizationFunctions"].GetEffectiveToken({token: 'TW.RSM.SFW.PurgeDeploymentHistoryOption.1Year'}); // STRING - isPrimaryKey = true
                                        }
                                        
                                        result.AddRow(newEntry);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetDeploymentsPendingApproval">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var query = {
                                            "filters": {
                                                "type": "AND",
                                                "filters": [
                                                    {
                                                        "fieldName": "Status",
                                                        "type": "EQ",
                                                        "value": "pending approval"
                                                    }
                                                ]
                                            }
                                            ,
                                            "sorts": [
                                                {
                                                    "fieldName": "Timestamp",
                                                    "isAscending": "false"
                                                }
                                            ]
                                        };
                                        
                                        var params = {
                                            maxItems: 1000000000,
                                            query: query
                                        };
                                        
                                        var result = Things[me.name + ".Campaign"].QueryDataTableEntries(params).getRowCount();
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetExcludedTargetSearches">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        // result: INFOTABLE
                                        var result = Resources["CurrentSessionInfo"].GetGlobalSessionValues().ExcludedTargetAssets;
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetExpiredPackageCount">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var query = {
                                            "filters": {
                                                "type": "AND",
                                                "filters": [
                                                    {
                                                        "fieldName": "ExpirationDate",
                                                        "type": "LT",
                                                        "value": (new Date())
                                                    },
                                                ]
                                            }
                                            ,
                                            "sorts": [
                                                {
                                                    "fieldName": "Timestamp",
                                                    "isAscending": "false"
                                                }
                                            ]
                                        };
                                        
                                        var params = {
                                            maxItems: 100000000,
                                            query: query
                                        };
                                        
                                        var result = Things[me.name + ".Definition"].QueryDataTableEntries(params).getRowCount();
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetFailedDeploymentCount">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var query = {
                                                                                    "filters": {
                                                                                        "type": "AND",
                                                                                        "filters": [
                                                                                            {
                                                                                                "fieldName": "Status",
                                                                                                "type": "EQ",
                                                                                                "value": "completed"
                                                                                            },
                                                                                            {
                                                                                                "fieldName": "CompletedWithIssues",
                                                                                                "type": "EQ",
                                                                                                "value": true
                                                                                            },
                                                                                            {
                                                                                                "fieldName": "IsTest",
                                                                                                "type": "EQ",
                                                                                                "value": (IsTest === true)
                                                                                            }
                                                                                        ]
                                                                                    }
                                                                                    ,
                                                                                    "sorts": [
                                                                                        {
                                                                                            "fieldName": "Timestamp",
                                                                                            "isAscending": "false"
                                                                                        }
                                                                                    ]
                                                                                };
                                        
                                                                                var params = {
                                                                                    maxItems: 1000000000,
                                                                                    query: query
                                                                                };
                                        
                                                                                var result = Things[me.name + ".Campaign"].QueryDataTableEntries(params).getRowCount();
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetFinalDeliveryStateCounts">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var query = {
                                            "filters": {
                                                "fieldName": "CampaignID",
                                                "type": "EQ",
                                                "value": CampaignID
                                            }
                                        
                                        };
                                        var queryParams = {
                                            maxItems: 100000,
                                            query: query
                                        };
                                        
                                        var deliveryTargets = Things[me.name + ".DeliveryTarget"].QueryDataTableEntries(queryParams);
                                        
                                        /*
                                        terminal states are:
                                        aborted, canceled by user, ineligible, completed, failed
                                        Everything else is in progress
                                        */
                                        var stateCounts = {InProgressCount: 0, CompletedCount: 0, Ineligible: 0, AbortedCount: 0, CanceledByUserCount: 0, FailedCount: 0};
                                        
                                        for (var x = 0; x < deliveryTargets.getRowCount(); x++) {
                                            var row = deliveryTargets.rows[x];
                                            switch (row.Status) {
                                                case "completed":
                                                    stateCounts.CompletedCount++;
                                                    break;
                                                case "ineligible":
                                                    stateCounts.Ineligible++;
                                                    break;
                                                case "aborted":
                                                    stateCounts.AbortedCount++;
                                                    break;
                                                case "canceled by user":
                                                    stateCounts.CanceledByUserCount++;
                                                    break;
                                                case "failed":
                                                    stateCounts.FailedCount++;
                                                    break;
                                                default:
                                                    stateCounts.InProgressCount++;
                                            }
                                        }
                                        
                                        var infoTableCreateParams = {
                                            infoTableName : "InfoTable",
                                            dataShapeName : "TW.RSM.SFW.DataShape.FinalDeliveryStateCounts"
                                        };
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(infoTableCreateParams);
                                        result.AddRow(stateCounts);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetHistoricalDeploymentResultsByStatus">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var query = {
                                            "filters": {
                                                "type": "AND",
                                                "filters": [{
                                                    "fieldName": "IsTest",
                                                    "type": "EQ",
                                                    "value": false
                                                }]
                                            },
                                            "sorts": [{
                                                    "fieldName": "timestamp",
                                                    "isAscending": "true"
                                             }]
                                        };
                                        
                                        if (status&&status!='') {
                                            query.filters.filters.push({
                                                "fieldName": "Status",
                                                "type": "EQ",
                                                "value": status
                                            });
                                        }
                                        
                                        if (endDate&&startDate){
                                            query.filters.filters.push({
                                                "fieldName": "DateCreated",
                                                "type": "BETWEEN",
                                                "from": startDate,
                                                "to": endDate
                                            });
                                        } else {
                                            endDate = new Date();
                                            startDate = new Date();
                                            endDate.setDate(endDate.getDate()+1);
                                            startDate.setDate(startDate.getDate()-14);
                                            query.filters.filters.push({
                                                "fieldName": "DateCreated",
                                                "type": "BETWEEN",
                                                "from": startDate,
                                                "to": endDate
                                            });
                                        }
                                        
                                        var params = { maxItems: 10000, query: query };
                                        var entries = Things[me.name + ".Campaign"].QueryDataTableEntries(params);
                                        var shape = { infoTableName : "InfoTable", dataShapeName : "TW.RSM.SFW.DataShape.StatusDateValue" };
                                        var table = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(shape);
                                        var values = new Array();
                                        var statuses = new Array();
                                        var theStatus = DataShapes["TW.RSM.SFW.DataShape.PackageStatus"].GetFieldDefinitions();
                                        
                                        var currentCounts = new Array();
                                        if (status&&status!='') {
                                            for (var i=0; i<theStatus.length; i++) {
                                                var row = theStatus.getRow(i);
                                                statuses[statuses.length] = row.name.toLowerCase();
                                                currentCounts[row.name.toLowerCase()] = 0;
                                            }
                                        } else statuses[statuses.length] = status;
                                        
                                        if (by=="Week") {
                                            var currentKey = "";
                                            var currentCount = 0;
                                            var lastDay = 0;
                                            var thisDate;
                                            var start = startDate;
                                            while (start<=endDate) {
                                                var thisDate = start;
                                                if (thisDate.getDay()==6) {
                                                    currentKey = createKey(thisDate, true);
                                                    values[values.length] = {
                                                        key: currentKey,
                                                        inProgress: 0,
                                                        completed: 0
                                                    }
                                                }
                                                start.setDate(start.getDate()+1);
                                            }
                                            for (var i=0; i<entries.getRowCount(); i++) {
                                                var row = entries.getRow(i);
                                                thisDate = row.DateCreated;
                                                currentCount++;
                                                if (currentCounts[row.Status]) currentCounts[row.Status]++;
                                                else currentCounts[row.Status] = 1;
                                                if (thisDate.getDay()==0&&thisDate.getDay()!=lastDay) {
                                                    for (var j=0; j<values.length; j++) {
                                                        if (values[j].key==currentKey) {
                                                            values[j].inProgress = currentCounts["in-progress"];
                                                            values[j].completed = currentCounts["completed"];
                                                            for (var k=0; k<statuses.length; k++) currentCounts[statuses[k]] = 0;
                                                            break;
                                                        }
                                                    }
                                                    currentCount = 0;
                                                }
                                                if (thisDate.getDay()==6) {
                                                    currentKey = createKey(thisDate,true);
                                                }
                                                lastDay = thisDate.getDay();
                                            }
                                            if (currentCount!=0) {
                                                while (thisDate.getDay()<6) {
                                                    thisDate.setDate(thisDate.getDate()+1);
                                                }
                                                currentKey = createKey(thisDate, true);
                                                for (var j=0; j<values.length; j++) {
                                                        if (values[j].key==currentKey) {
                                                            values[j].inProgress = currentCounts["in-progress"];
                                                            values[j].completed = currentCounts["completed"];
                                                            for (var k=0; k<statuses.length; k++) currentCounts[statuses[k]] = 0;
                                                            break;
                                                        }
                                                }
                                            }
                                        } else {
                                            var start = startDate;
                                            var currentCounts = new Array();
                                            while (start<endDate) {
                                                var thisDate = start;
                                                var key = createKey(thisDate, false);
                                                values[values.length] = {
                                                    key: key,
                                                    inProgress: 0,
                                                    completed: 0
                                                }
                                                start.setDate(start.getDate()+1);
                                            }
                                            for (var i=0; i<entries.getRowCount(); i++) {
                                                var row = entries.getRow(i);
                                                var thisDate = row.DateCreated;
                                                var key = createKey(thisDate, false);
                                                for (var j=0; j<values.length; j++) {
                                                    if (values[j].key==key&&row.Status) {
                                                        if (row.Status=="in-progress") values[j].inProgress++;
                                                        else if (row.Status=="completed") values[j].completed++;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        
                                        for (var i=0; i<values.length; i++) {
                                            if (status!=null&&status!='') {
                                                table.AddRow({
                                                    Label: values[i].key,
                                                    InProgressTotal: ((status=='in-progress')?(values[i].inProgress):0),
                                                    CompletedTotal: ((status=='completed')?(values[i].completed):0),
                                                });
                                            } else {
                                                table.AddRow({
                                                    Label: values[i].key,
                                                    InProgressTotal: values[i].inProgress,
                                                    CompletedTotal: values[i].completed
                                                });
                                            }
                                        }
                                        
                                        
                                        var result = table;
                                        
                                        function createKey(thisDate, isWeek)
                                        {
                                            var key;
                                            var localeSpec = Resources["CurrentSessionInfo"].GetCurrentUserLanguage();
                                            var formatSpec = "S";
                                            var params = {
                                                locale: localeSpec /* STRING */,
                                                format: formatSpec /* STRING */,
                                                datetime: thisDate /* DATETIME */
                                            };
                                        
                                            // result: STRING
                                            var key = Resources["TW.UTL.InternationalizationUtilities"].FormatLocaleDateString(params);
                                            return key;
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetIncludedTargetSearches">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        // result: INFOTABLE
                                        var result = Resources["CurrentSessionInfo"].GetGlobalSessionValues().IncludedTargetAssets;
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetMaxAutoRetriesPerInterval">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        result = Things["TW.RSM.SFW.SoftwareManager.Configuration"].GetDataTableEntryByKey({key: "AutoRetryMaxPerInterval"}).Value;
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetOverallDeploymentByStatus">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var query = {
                                            "filters": {
                                                "type": "AND",
                                                "filters": [{
                                                    "fieldName": "IsTest",
                                                    "type": "EQ",
                                                    "value": false
                                                }]
                                            }
                                        };
                                        
                                        var params = {
                                            maxItems: 10000,
                                            query: query
                                        };
                                        
                                        var entries = Things[me.name + ".Campaign"].QueryDataTableEntries(params);
                                        var values = new Array();
                                        
                                        for (var i=0; i<entries.getRowCount(); i++) {
                                            var row = entries.getRow(i);
                                            if (!row.IsTest) {
                                                if (values[row.Status]==null) values[row.Status] = 1;
                                                else values[row.Status]++;
                                            }
                                        }
                                        
                                        var shape = {
                                            infoTableName : "InfoTable",
                                            dataShapeName : "TW.RSM.SFW.DataShape.LabelValue"
                                        };
                                        
                                        var table = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(shape);
                                        var labels = {};
                                        for (var key in values) {
                                            if (!labels[key]) {
                                                labels[key] = Resources["RuntimeLocalizationFunctions"].GetEffectiveToken(
                                                    {token: 'TW.RSM.SFW.Status.' + key.charAt(0).toUpperCase()+key.slice(1)});
                                            }
                                            table.AddRow({
                                                LocalizedLabel: labels[key],
                                                Value: values[key],
                                                Label: key.charAt(0).toUpperCase()+key.slice(1)
                                            });
                                        }
                                        
                                        var result = table;
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetOverallPackageByStatus">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var query = {
                                            "filters": {
                                                "type": "AND",
                                                "filters": [{
                                                        "fieldName": "RequiresApproval",
                                                        "type": "EQ",
                                                        "value": true
                                                    }]
                                            }
                                        };
                                        
                                        var params = {
                                            maxItems: 1000000000,
                                            query: query
                                        };
                                        
                                        /*
                                        var totalPending = Things[me.name + ".Definition"].QueryDataTableEntries(params).getRowCount();
                                        
                                        params.query = {
                                            "filters": {
                                                "type": "AND",
                                                "filters": [{
                                                        "fieldName": "Published",
                                                        "type": "EQ",
                                                        "value": false
                                                    },
                                                    {
                                                        "fieldName": "RequiresApproval",
                                                        "type": "EQ",
                                                        "value": true
                                                    }]
                                            }
                                        }
                                        
                                        var totalApproved = Things[me.name + ".Definition"].QueryDataTableEntries(params).getRowCount();
                                        */
                                        
                                        params.query = {
                                            "filters": {
                                                "type": "AND",
                                                "filters": [{
                                                        "fieldName": "Published",
                                                        "type": "EQ",
                                                        "value": false
                                                    }]
                                            }
                                        }
                                        
                                        var totalNotPublished = Things[me.name + ".Definition"].QueryDataTableEntries(params).getRowCount();var totalApproved = Things[me.name + ".Definition"].QueryDataTableEntries(params).getRowCount();
                                        
                                        params.query = {
                                            "filters": {
                                                "type": "AND",
                                                "filters": [{
                                                        "fieldName": "Published",
                                                        "type": "EQ",
                                                        "value": true
                                                    }]
                                            }
                                        }
                                        
                                        var totalPublished = Things[me.name + ".Definition"].QueryDataTableEntries(params).getRowCount();var totalApproved = Things[me.name + ".Definition"].QueryDataTableEntries(params).getRowCount();
                                        
                                        var shape = {
                                            infoTableName : "InfoTable",
                                            dataShapeName : "TW.RSM.SFW.DataShape.LabelValue"
                                        };
                                        
                                        var table = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(shape);
                                        
                                        table.AddRow({
                                            LocalizedLabel: Resources["RuntimeLocalizationFunctions"].GetEffectiveToken({token: 'TW.RSM.SFW.Not Published'}),
                                            Value: totalNotPublished,
                                            Label: 'Not Published'
                                        });
                                        table.AddRow({
                                            LocalizedLabel: Resources["RuntimeLocalizationFunctions"].GetEffectiveToken({token: 'TW.RSM.SFW.Published'}),
                                            Value: totalPublished,
                                            Label: 'Published'
                                        });
                                        
                                        var result = table;
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetPackagesExpiringCount">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var dateExpring = new Date();
                                        dateExpring.setDate(dateExpring.getDate()+3);
                                        
                                        var query = {
                                            "filters": {
                                                "type": "AND",
                                                "filters": [
                                                    {
                                                        "fieldName": "ExpirationDate",
                                                        "type": "GT",
                                                        "value": (new Date())
                                                    },
                                                    {
                                                        "fieldName": "ExpirationDate",
                                                        "type": "LT",
                                                        "value": dateExpring
                                                    },
                                                    {
                                                        "fieldName": "Published",
                                                        "type": "EQ",
                                                        "value": false
                                                    }
                                        
                                                ]
                                            }
                                            ,
                                            "sorts": [
                                                {
                                                    "fieldName": "Timestamp",
                                                    "isAscending": "false"
                                                }
                                            ]
                                        };
                                        
                                        var params = {
                                            maxItems: 100000000,
                                            query: query
                                        };
                                        
                                        var result = Things[me.name + ".Definition"].QueryDataTableEntries(params).getRowCount();
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetPurgeDateRanges">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var params = {
                                            infoTableName : "InfoTable",
                                            dataShapeName : "TW.RSM.SFW.DataShape.NameValue"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(TW.RSM.SFW.DataShape.NameValue)
                                        var options = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        // TW.RSM.SFW.DataShape.NameValue entry object
                                        var newEntry = new Object();
                                        newEntry.Value = "-1"; // STRING
                                        newEntry.Name = Resources["RuntimeLocalizationFunctions"].GetEffectiveToken({token: 'TW.RSM.SFW.PurgeDeploymentHistoryOption.Never'}); // STRING - isPrimaryKey = true
                                        options.AddRow(newEntry);
                                        
                                        newEntry = new Object();
                                        newEntry.Value = "86400000"; // STRING
                                        newEntry.Name = Resources["RuntimeLocalizationFunctions"].GetEffectiveToken({token: 'TW.RSM.SFW.PurgeDeploymentHistoryOption.1Day'}); // STRING - isPrimaryKey = true
                                        options.AddRow(newEntry);
                                        
                                        newEntry = new Object();
                                        newEntry.Value = "604800000"; // STRING
                                        newEntry.Name = Resources["RuntimeLocalizationFunctions"].GetEffectiveToken({token: 'TW.RSM.SFW.PurgeDeploymentHistoryOption.1Week'}); // STRING - isPrimaryKey = true
                                        options.AddRow(newEntry);
                                        
                                        newEntry = new Object();
                                        newEntry.Value = "2592000000"; // STRING
                                        newEntry.Name = Resources["RuntimeLocalizationFunctions"].GetEffectiveToken({token: 'TW.RSM.SFW.PurgeDeploymentHistoryOption.1Month'}); // STRING - isPrimaryKey = true
                                        options.AddRow(newEntry);
                                        
                                        newEntry = new Object();
                                        newEntry.Value = "7776000000"; // STRING
                                        newEntry.Name = Resources["RuntimeLocalizationFunctions"].GetEffectiveToken({token: 'TW.RSM.SFW.PurgeDeploymentHistoryOption.3Months'}); // STRING - isPrimaryKey = true
                                        options.AddRow(newEntry);
                                        
                                        newEntry = new Object();
                                        newEntry.Value = "15552000000"; // STRING
                                        newEntry.Name = Resources["RuntimeLocalizationFunctions"].GetEffectiveToken({token: 'TW.RSM.SFW.PurgeDeploymentHistoryOption.6Months'}); // STRING - isPrimaryKey = true
                                        options.AddRow(newEntry);
                                        
                                        newEntry = new Object();
                                        newEntry.Value = "31536000000"; // STRING
                                        newEntry.Name = Resources["RuntimeLocalizationFunctions"].GetEffectiveToken({token: 'TW.RSM.SFW.PurgeDeploymentHistoryOption.1Year'}); // STRING - isPrimaryKey = true
                                        options.AddRow(newEntry);
                                        
                                        result = options;
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetRecentCampaigns">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var query = {
                                            "filters": {
                                                "type": "AND",
                                                "filters": [{
                                                     "fieldName": "CreatedBy",
                                                     "type": "EQ",
                                                     "value": user
                                                },{
                                                    "fieldName": "IsTest",
                                                    "type": "EQ",
                                                    "value": false
                                                }]
                                            },
                                            "sorts": [
                                                {
                                                    "fieldName": "timestamp",
                                                    "isAscending": "false"
                                                }
                                            ]
                                        };
                                        
                                        var params = {
                                            maxItems: 10,
                                            query: query
                                        };
                                        
                                        var result = Things[me.name + ".Campaign"].QueryDataTableEntries(params);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetRecentDefinitions">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var query = {
                                            "filters": {
                                                "type": "AND",
                                                "filters": [{
                                                     "fieldName": "CreatedBy",
                                                     "type": "EQ",
                                                     "value": user
                                                }]
                                            },
                                            "sorts": [
                                                {
                                                    "fieldName": "timestamp",
                                                    "isAscending": "false"
                                                }
                                            ]
                                        };
                                        
                                        var params = {
                                            maxItems: 10,
                                            query: query
                                        };
                                        
                                        var result = Things[me.name + ".Definition"].QueryDataTableEntries(params);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetStatusSelections">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var params = {
                                            maxItems: 1000000
                                        };
                                        
                                        var shape = {
                                            infoTableName : "InfoTable",
                                            dataShapeName : "TW.RSM.SFW.DataShape.NameValue"
                                        };
                                        
                                        var table = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(shape);
                                        
                                        table.AddRow({
                                            Name: 'All',
                                            Value: "",
                                            LocalizedName: Resources["RuntimeLocalizationFunctions"].GetEffectiveToken({token: 'TW.RSM.SFW.Status.All'})
                                        });
                                        
                                        table.AddRow({
                                            Name: 'In Progress',
                                            Value: "in-progress",
                                            LocalizedName: Resources["RuntimeLocalizationFunctions"].GetEffectiveToken({token: 'TW.RSM.SFW.Status.In-progress'})
                                        });
                                        
                                        table.AddRow({
                                            Name: 'Completed',
                                            Value: "completed",
                                            LocalizedName: Resources["RuntimeLocalizationFunctions"].GetEffectiveToken({token: 'TW.RSM.SFW.Status.Completed'})
                                        });
                                        
                                        var result = table;
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetTargetMashup">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        result = targetMashupName;
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetTotalActivePackagesContainingFile">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var query = {
                                            "filters": {
                                                "type": "AND",
                                                "filters": [
                                                    {
                                                        "fieldName": "Package",
                                                        "type": "LIKE",
                                                        "value": filePath
                                                    }
                                                ]
                                            },
                                            "sorts": [
                                                {
                                                    "fieldName": "Timestamp",
                                                    "isAscending": "false"
                                                }
                                            ]
                                        };
                                        if (published!==undefined) {
                                            query.filters.filters.push({
                                                "fieldName": "Published",
                                                "type": "EQ",
                                                "value": published
                                            } )
                                        }
                                        
                                        // showExpired false only
                                        query.filters.filters.push({
                                                    "fieldName": "ExpirationDate",
                                                    "type": "GT",
                                                    "value": new Date()
                                        })
                                        
                                        var params = {
                                            maxItems: 500,
                                            query: query
                                        };
                                        
                                        var definitionResult = Things[me.name + ".Definition"].QueryDataTableEntries(params);
                                        logger.info("GetDefinitionsByCriteria(): Got definitionResult: " + definitionResult.getRowCount());
                                        
                                        var result;
                                        result = definitionResult.getRowCount();
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetTotalCampaigns">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var query = {
                                            "filters": {
                                                "type": "AND",
                                                "filters": [{
                                                    "fieldName": "IsTest",
                                                    "type": "EQ",
                                                    "value": false
                                                }]
                                            }
                                        };
                                        
                                        var params = {
                                            maxItems: 1000000000,
                                            query: query
                                        };
                                        
                                        var result = Things[me.name + ".Campaign"].QueryDataTableEntries(params).getRowCount();
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetTotalDefinitions">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var query = {
                                            "filters": {
                                                "type": "AND",
                                                "filters": []
                                            }
                                        };
                                        
                                        var params = {
                                            maxItems: 100000,
                                            query: query
                                        };
                                        
                                        var result = Things[me.name + ".Definition"].QueryDataTableEntries(params).getRowCount();
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="Initialize">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        // the initialization is happening in processStartNotification() on the SoftwareManager
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="IsAutoRetryIfDisconnected">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        result = Things["TW.RSM.SFW.SoftwareManager.Configuration"].GetDataTableEntryByKey({key: "AutoRetryIfDisconnected"}).Value;
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="Ping">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        //Do nothing
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="PurgeDeliveryTargetsForDeployment">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var query = {
                                          "filters": {
                                            "fieldName": "CampaignID",
                                            "type": "EQ",
                                            "value": DeploymentID
                                          }
                                        };
                                        
                                        var params = {
                                            query: query /* INFOTABLE*/
                                        };
                                        
                                        Things[me.name + ".DeliveryTarget"].DeleteDataTableEntriesWithQuery(params);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="PurgeDeploymentsByCriteria">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var query = {
                                            "filters": {
                                                "type": "AND",
                                                "filters": [
                                                    {
                                                        "fieldName": "DefinitionID",
                                                        "type": "LIKE",
                                                        "value": "*"
                                                    }
                                                ]
                                            }
                                            ,
                                            sorts: [
                                                    {
                                                        fieldName: "timestamp",
                                                        isAscending: false,
                                                        isCaseSensitive: false
                                                    }
                                                ]
                                        };
                                        
                                        if(Username){
                                            query.filters.filters.push({
                                                "fieldName": "CreatedBy",
                                                "type": "EQ",
                                                "value": Username
                                            }
                                                                      )
                                        }
                                        
                                        
                                        if(Name){
                                            query.filters.filters.push({
                                                "fieldName": "Name",
                                                "type": "LIKE",
                                                "value": Name
                                            }
                                                                      )
                                        }
                                        
                                        if(StartDate && EndDate){
                                            query.filters.filters.push({
                                                "fieldName": "timestamp",
                                                "type": "BETWEEN",
                                                "from": StartDate,
                                                "to": EndDate
                                            }
                                                                      )
                                        }
                                        
                                        if(Description){
                                            query.filters.filters.push( {
                                                "fieldName": "Description",
                                                "type": "LIKE",
                                                "value": Description
                                            })
                                        }
                                        if(Status){
                                            query.filters.filters.push( {
                                                "fieldName": "Status",
                                                "type": "LIKE",
                                                "value": Status
                                            })
                                        }
                                        if(PackageName){
                                            query.filters.filters.push( {
                                                "fieldName": "PackageName",
                                                "type": "LIKE",
                                                "value": PackageName
                                            })
                                        }
                                        
                                        var values = Things[me.name + ".Campaign"].CreateValues();
                                        
                                        
                                        var params = {
                                            query: query /* QUERY */,
                                            values: values /* INFOTABLE*/
                                        };
                                        
                                        // no return
                                        try{
                                            // result: INFOTABLE
                                            var deployments = Things[me.name + ".Campaign"].QueryDataTableEntries(params);
                                        
                                            var tableLength = deployments.rows.length;
                                        
                                            for (var x = 0; x < tableLength; x++) {
                                                var id = deployments.rows[x].ID;
                                        
                                                Things[me.name + ".Campaign"].DeleteDataTableEntryByKey({key: id});
                                                me.PurgeDeliveryTargetsForDeployment({DeploymentID: id});
                                            }
                                        } catch(ex) {
                                            logger.error(ex.message)
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="PurgeDeploymentsForAsset">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var result;
                                        if(!AssetName)
                                        {
                                            result = { dataShape: { fieldDefinitions : {} }, rows: [] };
                                        }
                                        else
                                        {
                                            if(AssetName == null || AssetName == undefined || AssetName.length == 0)
                                                AssetName = "";
                                        
                                            var targetQuery = {
                                              "filters": {
                                                "fieldName": "Name",
                                                "type": "EQ",
                                                "value": AssetName
                                              }
                                            };
                                        
                                            var params = {
                                                query: targetQuery /* QUERY */,
                                            };
                                        
                                        
                                            // result: INFOTABLE
                                            var targetRows = Things[me.name + ".DeliveryTarget"].QueryDataTableEntries(params);
                                        
                                            params = {
                                                infoTableName : "InfoTable",
                                                dataShapeName : "TW.RSM.SFW.DataShape.Campaign"
                                            };
                                        
                                            // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(TW.RSM.SFW.DataShape.Campaign)
                                            var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                            var campHash = {};
                                        
                                            for (var i=0; i<targetRows.getRowCount(); i++) {
                                                var targetRow = targetRows.getRow(i);
                                        
                                                query = {
                                                    "filters": {
                                                        "type": "AND",
                                                        "filters": [
                                                            {
                                                                "fieldName": "ID",
                                                                "type": "EQ",
                                                                "value": targetRow.CampaignID
                                                            }
                                                        ]
                                                    }
                                                    ,
                                                    sorts: [
                                                    {
                                                        fieldName: "DateCreated",
                                                        isAscending: false,
                                                        isCaseSensitive: false
                                                    }
                                                ]
                                                };
                                        
                                                params = {
                                                    maxItems: 500,
                                                    query: query
                                                };
                                                var campaigns = Things[me.name + ".Campaign"].QueryDataTableEntries(params);
                                        
                                                if(campaigns.getRowCount() > 0)
                                                {
                                                    campHash[campaigns.getRow(0).ID] = campaigns.getRow(0);
                                                }
                                        
                                            }
                                        
                                            for (var i in campHash)
                                            {
                                                result.AddRow(campHash[i]);
                                            }
                                        
                                            for(var i=0; i<result.getRowCount(); i++)
                                            {
                                                var deplo = result.getRow(i);
                                                params = { key : deplo.ID };
                                                // no return
                                                Things[me.name + ".Campaign"].DeleteDataTableEntryByKey(params);
                                        
                                                params = { DeploymentID: deplo.ID };
                                                me.PurgeDeliveryTargetsForDeployment(params);
                                            }
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="PurgeDeploymentsForAssetSearches">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var result;
                                        
                                        var params = {
                                            IncludedTargetSearches: IncludedTargetSearches /* INFOTABLE */,
                                            ExcludedTargetSearches: ExcludedTargetSearches /* INFOTABLE */,
                                            UserName: Resources["CurrentSessionInfo"].GetCurrentUser(),
                                            excludeInActive: false
                                        }
                                        var assets = Things["TW.RSM.SFW.SFWHelper"].GetTargetAssets(params);
                                        var campHash = {};
                                        params = {
                                            infoTableName : "InfoTable",
                                            dataShapeName : "TW.RSM.SFW.DataShape.Campaign"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(TW.RSM.SFW.DataShape.Campaign)
                                        var deployments = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        for(var i=0; i<assets.getRowCount(); i++)
                                        {
                                        
                                            var targetQuery = {
                                              "filters": {
                                                "fieldName": "Name",
                                                "type": "EQ",
                                                "value": assets.getRow(i).Name
                                              }
                                            };
                                        
                                            var params = {
                                                query: targetQuery /* QUERY */,
                                            };
                                        
                                        
                                            // result: INFOTABLE
                                            var targetRows = Things[me.name + ".DeliveryTarget"].QueryDataTableEntries(params);
                                        
                                            for (var j=0; j<targetRows.getRowCount(); j++) {
                                                var targetRow = targetRows.getRow(j);
                                        
                                                query = {
                                                    "filters": {
                                                        "type": "AND",
                                                        "filters": [
                                                            {
                                                                "fieldName": "ID",
                                                                "type": "EQ",
                                                                "value": targetRow.CampaignID
                                                            }
                                                        ]
                                                    }
                                                    ,
                                                    sorts: [
                                                    {
                                                        fieldName: "DateCreated",
                                                        isAscending: false,
                                                        isCaseSensitive: false
                                                    }
                                                ]
                                                };
                                        
                                                params = {
                                                    maxItems: 500,
                                                    query: query
                                                };
                                                var campaigns = Things[me.name + ".Campaign"].QueryDataTableEntries(params);
                                        
                                                if(campaigns.getRowCount() > 0)
                                                {
                                                    campHash[campaigns.getRow(0).ID] = campaigns.getRow(0);
                                                }
                                        
                                            }
                                        
                                        }
                                        
                                        for (var i in campHash)
                                        {
                                            deployments.AddRow(campHash[i]);
                                        }
                                        result = deployments;
                                        
                                        
                                        for(var i=0; i<result.getRowCount(); i++)
                                        {
                                            var deplo = result.getRow(i);
                                            params =
                                            {
                                                key : deplo.ID
                                            }
                                            // no return
                                            Things[me.name + ".Campaign"].DeleteDataTableEntryByKey(params);
                                        
                                            var params = {
                                                DeploymentID: deplo.ID /* STRING */
                                            };
                                            me.PurgeDeliveryTargetsForDeployment(params);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="QueryCampaigns">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        if(!PackageName)
                                        {
                                            PackageName = "*";
                                        }
                                        var query = {
                                            "filters": {
                                                "type": "AND",
                                                "filters": [
                                                    {
                                                        "fieldName": "PackageName",
                                                        "type": "Like",
                                                        "value": PackageName
                                                    }
                                                ]
                                            }
                                            ,
                                            "sorts": [
                                                {
                                                    "fieldName": "timestamp",
                                                    "isAscending": "false"
                                                }
                                            ]
                                        };
                                        
                                        query.filters.filters.push({
                                            "fieldName": "IsTest",
                                            "type": "EQ",
                                            "value": IsTest
                                        });
                                        
                                        if(Username){
                                            query.filters.filters.push({
                                                "fieldName": "CreatedBy",
                                                "type": "EQ",
                                                "value": Username
                                            }
                                                                      )
                                        }
                                        
                                        if(Name){
                                            query.filters.filters.push({
                                                "fieldName": "Name",
                                                "type": "LIKE",
                                                "value": Name
                                            }
                                                                      )
                                        }
                                        
                                        if(StartDate && EndDate){
                                            query.filters.filters.push({
                                                "fieldName": "timestamp",
                                                "type": "BETWEEN",
                                                "from": StartDate,
                                                "to": EndDate
                                            }
                                                                      )
                                        }
                                        
                                        if(Description){
                                            query.filters.filters.push( {
                                                "fieldName": "Description",
                                                "type": "LIKE",
                                                "value": Description
                                            })
                                        }
                                        
                                        if(Status){
                                            query.filters.filters.push( {
                                                "fieldName": "Status",
                                                "type": "LIKE",
                                                "value": Status
                                            })
                                        }
                                        
                                        
                                            var params = {
                                        
                                                maxItems: 500,
                                                query: query
                                            };
                                        
                                            var result = Things[me.name + ".Campaign"].QueryDataTableEntries(params);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="RemoveSearchFromExcludedTargets">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        if((AssetSearchName == null) || (AssetSearchName == undefined) || (AssetSearchName.length <= 0)) {
                                            throw "No Asset search name specified.";
                                        }
                                        
                                        var params = {
                                            infoTableName : "InfoTable",
                                            dataShapeName : "EntityList"
                                        };
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(EntityList)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        var AssetSearchList = Resources["CurrentSessionInfo"].GetGlobalSessionValues().ExcludedTargetAssets;
                                        
                                        if( (AssetSearchList != null) && (AssetSearchList != undefined ) && (AssetSearchList.getRowCount() > 0) )
                                        {
                                            for (var i=0; i<AssetSearchList.getRowCount(); i++) {
                                                var row = AssetSearchList.getRow(i);
                                                if(AssetSearchName != row.name)
                                                {
                                                    result.AddRow(row);
                                                }
                                            }
                                        }
                                        
                                        params = {
                                            name: "ExcludedTargetAssets" /* STRING */,
                                            value: result /* INFOTABLE */
                                        };
                                        
                                        // no return
                                        Resources["CurrentSessionInfo"].SetGlobalSessionInfoTableValue(params);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="RemoveSearchFromIncludedTargets">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        if((AssetSearchName == null) || (AssetSearchName == undefined) || (AssetSearchName.length <= 0)) {
                                            throw "No Asset search name specified.";
                                        }
                                        
                                        var params = {
                                            infoTableName : "InfoTable",
                                            dataShapeName : "EntityList"
                                        };
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(EntityList)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        var AssetSearchList = Resources["CurrentSessionInfo"].GetGlobalSessionValues().IncludedTargetAssets;
                                        
                                        if( (AssetSearchList != null) && (AssetSearchList != undefined ) && (AssetSearchList.getRowCount() > 0) )
                                        {
                                            for (var i=0; i<AssetSearchList.getRowCount(); i++) {
                                                var row = AssetSearchList.getRow(i);
                                                if(AssetSearchName != row.name)
                                                {
                                                    result.AddRow(row);
                                                }
                                            }
                                        }
                                        
                                        params = {
                                            name: "IncludedTargetAssets" /* STRING */,
                                            value: result /* INFOTABLE */
                                        };
                                        
                                        // no return
                                        Resources["CurrentSessionInfo"].SetGlobalSessionInfoTableValue(params);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="SetAutoRetryRate">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var autoRetryTimer = Things["TW.RSM.SFW.Timer.AutoRetryTimer"];
                                        var configTable = autoRetryTimer.GetConfigurationTable({tableName: "Settings"});
                                        configTable.updateRate = rate;
                                        
                                        autoRetryTimer.SetConfigurationTable({
                                            configurationTable: configTable,
                                            persistent: true,
                                            tableName: "Settings",
                                        });
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="UpdateAutoRetrySettings">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var config = Things["TW.RSM.SFW.SoftwareManager.Configuration"].CreateValues();
                                        
                                        config.AddRow({Name: "AutoRetryIfDisconnected", Value: autoRetryIfDisconnected});
                                        config.AddRow({Name: "DefaultAutoRetryCountMax", Value: defaultMaxAutoRetries});
                                        config.AddRow({Name: "AutoRetryMaxPerInterval", Value: maxAutoRetriesPerInterval});
                                        
                                        Things["TW.RSM.SFW.SoftwareManager.Configuration"].UpdateDataTableEntries({values: config});
                                        
                                        me.EnableAutoRetry({enable: enabled});
                                        me.SetAutoRetryRate({rate: autoRetryRate});
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="UpdateDeploymentsHistoricalConfig">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var values = Things["TW.RSM.SFW.SoftwareManager.Configuration"].CreateValues();
                                        
                                        values.Value = HistoricalAge; //STRING
                                        values.Name = "historical_age_purge"; //STRING [Primary Key]
                                        
                                        // result: INFOTABLE dataShape: "TW.RSM.SFW.DataShape.NameValue"
                                        var existingConfig = me.GetDeploymentsHistoricalConfig();
                                        var configName = existingConfig.getRow(0).Name;
                                        if((configName == null) || (configName == undefined) || (configName.length <= 0)){
                                            configName = "None";
                                        }
                                        var HistoricalAgeValue = "Never";
                                        
                                        if(HistoricalAge == "-1")
                                        {
                                            HistoricalAgeValue = Resources["RuntimeLocalizationFunctions"].GetEffectiveToken({token: 'TW.RSM.SFW.PurgeDeploymentHistoryOption.Never'}); // STRING - isPrimaryKey = true
                                        }else if(HistoricalAge == "86400000")
                                        {
                                            HistoricalAgeValue = Resources["RuntimeLocalizationFunctions"].GetEffectiveToken({token: 'TW.RSM.SFW.PurgeDeploymentHistoryOption.1Day'}); // STRING - isPrimaryKey = true
                                        }else if(HistoricalAge == "604800000")
                                        {
                                            HistoricalAgeValue = Resources["RuntimeLocalizationFunctions"].GetEffectiveToken({token: 'TW.RSM.SFW.PurgeDeploymentHistoryOption.1Week'}); // STRING - isPrimaryKey = true
                                        }else if(HistoricalAge == "2592000000")
                                        {
                                            HistoricalAgeValue = Resources["RuntimeLocalizationFunctions"].GetEffectiveToken({token: 'TW.RSM.SFW.PurgeDeploymentHistoryOption.1Month'}); // STRING - isPrimaryKey = true
                                        }else if(HistoricalAge == "7776000000")
                                        {
                                            HistoricalAgeValue = Resources["RuntimeLocalizationFunctions"].GetEffectiveToken({token: 'TW.RSM.SFW.PurgeDeploymentHistoryOption.3Months'}); // STRING - isPrimaryKey = true
                                        }else if(HistoricalAge == "15552000000")
                                        {
                                            HistoricalAgeValue = Resources["RuntimeLocalizationFunctions"].GetEffectiveToken({token: 'TW.RSM.SFW.PurgeDeploymentHistoryOption.6Months'}); // STRING - isPrimaryKey = true
                                        }else if(HistoricalAge == "31536000000")
                                        {
                                            HistoricalAgeValue = Resources["RuntimeLocalizationFunctions"].GetEffectiveToken({token: 'TW.RSM.SFW.PurgeDeploymentHistoryOption.1Year'}); // STRING - isPrimaryKey = true
                                        }
                                        
                                        var eventData = {
                                        	confName: "Historical Age Purge" /* STRING */,
                                        	newValue: HistoricalAgeValue /* STRING */,
                                            oldValue: configName
                                        };
                                        
                                        me.SCMConfigurationChangedEvent(eventData);
                                        
                                        var params = {
                                            values: values /* INFOTABLE*/,
                                        };
                                        
                                        // result: STRING
                                        var id = Things["TW.RSM.SFW.SoftwareManager.Configuration"].AddOrUpdateDataTableEntry(params);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                </ServiceImplementations>
                <Subscriptions>
                    <Subscription
                     enabled="true"
                     eventName="Timer"
                     source="TW.RSM.SFW.Timer.AutoRetryTimer"
                     sourceProperty=""
                     sourceType="Thing">
                        <ServiceImplementation
                         description=""
                         handlerName="Script"
                         name="Type.Thing:Entity.TW.RSM.SFW.Timer.AutoRetryTimer:Event.Timer">
                            <ConfigurationTables>
                                <ConfigurationTable
                                 description=""
                                 isMultiRow="false"
                                 name="Script"
                                 ordinal="0">
                                    <DataShape>
                                        <FieldDefinitions>
                                            <FieldDefinition
                                             baseType="STRING"
                                             description="code"
                                             name="code"
                                             ordinal="0"></FieldDefinition>
                                        </FieldDefinitions>
                                    </DataShape>
                                    <Rows>
                                        <Row>
                                            <code>
                                            <![CDATA[
                                            me.AutoRetryDeliveryTargets();
                                            ]]>
                                            </code>
                                        </Row>
                                    </Rows>
                                </ConfigurationTable>
                            </ConfigurationTables>
                        </ServiceImplementation>
                    </Subscription>
                    <Subscription
                     enabled="true"
                     eventName="Timer"
                     source="TW.RSM.SFW.Timer.CheckStateTimer"
                     sourceProperty=""
                     sourceType="Thing">
                        <ServiceImplementation
                         description=""
                         handlerName="Script"
                         name="Type.Thing:Entity.TW.RSM.SFW.Timer.CheckStateTimer:Event.Timer">
                            <ConfigurationTables>
                                <ConfigurationTable
                                 description=""
                                 isMultiRow="false"
                                 name="Script"
                                 ordinal="0">
                                    <DataShape>
                                        <FieldDefinitions>
                                            <FieldDefinition
                                             baseType="STRING"
                                             description="code"
                                             name="code"
                                             ordinal="0"></FieldDefinition>
                                        </FieldDefinitions>
                                    </DataShape>
                                    <Rows>
                                        <Row>
                                            <code>
                                            <![CDATA[
                                            //First make sure that the tables exist or we will have errors in the log
                                            if( (Things[me.name + ".Definition"] != null) &&
                                                (Things[me.name + ".Campaign"] != null) &&
                                                (Things[me.name + ".DeliveryTarget"] != null) )
                                            {
                                                try { me.CheckDeliveryTargetsStatus(); } catch (e) {}
                                                try { me.VerifyDeploymentComplete(); } catch (e) {}
                                            }
                                            ]]>
                                            </code>
                                        </Row>
                                    </Rows>
                                </ConfigurationTable>
                            </ConfigurationTables>
                        </ServiceImplementation>
                    </Subscription>
                    <Subscription
                     enabled="true"
                     eventName="Timer"
                     source="TW.RSM.SFW.Timer.DownloadTimer"
                     sourceProperty=""
                     sourceType="Thing">
                        <ServiceImplementation
                         description=""
                         handlerName="Script"
                         name="Type.Thing:Entity.TW.RSM.SFW.Timer.DownloadTimer:Event.Timer">
                            <ConfigurationTables>
                                <ConfigurationTable
                                 description=""
                                 isMultiRow="false"
                                 name="Script"
                                 ordinal="0">
                                    <DataShape>
                                        <FieldDefinitions>
                                            <FieldDefinition
                                             baseType="STRING"
                                             description="code"
                                             name="code"
                                             ordinal="0"></FieldDefinition>
                                        </FieldDefinitions>
                                    </DataShape>
                                    <Rows>
                                        <Row>
                                            <code>
                                            <![CDATA[
                                            //First make sure that the tables exist or we will have errors in the log
                                            if( (Things[me.name + ".Definition"] != null) &&
                                                (Things[me.name + ".Campaign"] != null) &&
                                                (Things[me.name + ".DeliveryTarget"] != null) )
                                            {
                                                try { me.StartDownloads(); } catch (e) {}
                                            }
                                            ]]>
                                            </code>
                                        </Row>
                                    </Rows>
                                </ConfigurationTable>
                            </ConfigurationTables>
                        </ServiceImplementation>
                    </Subscription>
                    <Subscription
                     enabled="true"
                     eventName="Timer"
                     source="TW.RSM.SFW.Timer.InstallTimer"
                     sourceProperty=""
                     sourceType="Thing">
                        <ServiceImplementation
                         description=""
                         handlerName="Script"
                         name="Type.Thing:Entity.TW.RSM.SFW.Timer.InstallTimer:Event.Timer">
                            <ConfigurationTables>
                                <ConfigurationTable
                                 description=""
                                 isMultiRow="false"
                                 name="Script"
                                 ordinal="0">
                                    <DataShape>
                                        <FieldDefinitions>
                                            <FieldDefinition
                                             baseType="STRING"
                                             description="code"
                                             name="code"
                                             ordinal="0"></FieldDefinition>
                                        </FieldDefinitions>
                                    </DataShape>
                                    <Rows>
                                        <Row>
                                            <code>
                                            <![CDATA[
                                            //First make sure that the tables exist or we will have errors in the log
                                            if( (Things[me.name + ".Definition"] != null) &&
                                                (Things[me.name + ".Campaign"] != null) &&
                                                (Things[me.name + ".DeliveryTarget"] != null) ) {
                                            
                                                try { me.StartInstalls(); } catch (e) {}
                                            }
                                            ]]>
                                            </code>
                                        </Row>
                                    </Rows>
                                </ConfigurationTable>
                            </ConfigurationTables>
                        </ServiceImplementation>
                    </Subscription>
                    <Subscription
                     enabled="true"
                     eventName="Timer"
                     source="TW.RSM.SFW.Timer.NotifyTimer"
                     sourceProperty=""
                     sourceType="Thing">
                        <ServiceImplementation
                         description=""
                         handlerName="Script"
                         name="Type.Thing:Entity.TW.RSM.SFW.Timer.NotifyTimer:Event.Timer">
                            <ConfigurationTables>
                                <ConfigurationTable
                                 description=""
                                 isMultiRow="false"
                                 name="Script"
                                 ordinal="0">
                                    <DataShape>
                                        <FieldDefinitions>
                                            <FieldDefinition
                                             baseType="STRING"
                                             description="code"
                                             name="code"
                                             ordinal="0"></FieldDefinition>
                                        </FieldDefinitions>
                                    </DataShape>
                                    <Rows>
                                        <Row>
                                            <code>
                                            <![CDATA[
                                            //First make sure that the tables exist or we will have errors in the log
                                            if( (Things[me.name + ".Definition"] != null) &&
                                                (Things[me.name + ".Campaign"] != null) &&
                                                (Things[me.name + ".DeliveryTarget"] != null) )
                                            {
                                                try { me.NotifyTargets(); } catch (e) {}
                                            }
                                            ]]>
                                            </code>
                                        </Row>
                                    </Rows>
                                </ConfigurationTable>
                            </ConfigurationTables>
                        </ServiceImplementation>
                    </Subscription>
                    <Subscription
                     enabled="false"
                     eventName="Timer"
                     source="TW.RSM.SFW.Timer.PurgeTimer"
                     sourceProperty=""
                     sourceType="Thing">
                        <ServiceImplementation
                         description=""
                         handlerName="Script"
                         name="Type.Thing:Entity.TW.RSM.SFW.Timer.PurgeTimer:Event.Timer">
                            <ConfigurationTables>
                                <ConfigurationTable
                                 description=""
                                 isMultiRow="false"
                                 name="Script"
                                 ordinal="0">
                                    <DataShape>
                                        <FieldDefinitions>
                                            <FieldDefinition
                                             baseType="STRING"
                                             description="code"
                                             name="code"
                                             ordinal="0"></FieldDefinition>
                                        </FieldDefinitions>
                                    </DataShape>
                                    <Rows>
                                        <Row>
                                            <code>
                                            <![CDATA[
                                            me.PurgeOldDeployments();
                                            ]]>
                                            </code>
                                        </Row>
                                    </Rows>
                                </ConfigurationTable>
                            </ConfigurationTables>
                        </ServiceImplementation>
                    </Subscription>
                </Subscriptions>
            </ThingShape>
            <ImplementedShapes></ImplementedShapes>
            <SharedConfigurationTables></SharedConfigurationTables>
            <InstanceDesignTimePermissions>
                <Create></Create>
                <Read></Read>
                <Update></Update>
                <Delete></Delete>
                <Metadata></Metadata>
            </InstanceDesignTimePermissions>
            <InstanceRunTimePermissions></InstanceRunTimePermissions>
            <InstanceVisibilityPermissions>
                <Visibility></Visibility>
            </InstanceVisibilityPermissions>
        </ThingTemplate>
    </ThingTemplates>
</Entities>
