<?xml version="1.0" encoding="UTF-8"?>
<Entities
 build="b557"
 majorVersion="8"
 minorVersion="2"
 modelPersistenceProviderPackage="PostgresPersistenceProviderPackage"
 revision="7"
 schemaVersion="1020"
 universal="">
    <Things>
        <Thing
         description=""
         documentationContent=""
         effectiveThingPackage="ConfiguredThing"
         enabled="true"
         homeMashup=""
         identifier=""
         lastModifiedDate="2018-11-06T02:37:24.572Z"
         name="NCR.BaseDeviceHelper-250279"
         projectName="DCS. Project.Main"
         published="false"
         tags=""
         thingTemplate="GenericThing"
         valueStream="">
            <avatar></avatar>
            <DesignTimePermissions>
                <Create></Create>
                <Read></Read>
                <Update></Update>
                <Delete></Delete>
                <Metadata></Metadata>
            </DesignTimePermissions>
            <RunTimePermissions>
                <Permissions
                 resourceName="*">
                    <PropertyRead>
                        <Principal
                         isPermitted="false"
                         name="NCR.DCS.Mashup"
                         type="Group"></Principal>
                        <Principal
                         isPermitted="true"
                         name="NCR_All"
                         type="Group"></Principal>
                    </PropertyRead>
                    <PropertyWrite>
                        <Principal
                         isPermitted="false"
                         name="NCR.DCS.Mashup"
                         type="Group"></Principal>
                        <Principal
                         isPermitted="true"
                         name="NCR_All"
                         type="Group"></Principal>
                    </PropertyWrite>
                    <ServiceInvoke>
                        <Principal
                         isPermitted="true"
                         name="NCR.DCS.Mashup"
                         type="Group"></Principal>
                        <Principal
                         isPermitted="true"
                         name="NCR_All"
                         type="Group"></Principal>
                    </ServiceInvoke>
                    <EventInvoke>
                        <Principal
                         isPermitted="false"
                         name="NCR.DCS.Mashup"
                         type="Group"></Principal>
                        <Principal
                         isPermitted="true"
                         name="NCR_All"
                         type="Group"></Principal>
                    </EventInvoke>
                    <EventSubscribe>
                        <Principal
                         isPermitted="false"
                         name="NCR.DCS.Mashup"
                         type="Group"></Principal>
                        <Principal
                         isPermitted="true"
                         name="NCR_All"
                         type="Group"></Principal>
                    </EventSubscribe>
                </Permissions>
            </RunTimePermissions>
            <VisibilityPermissions>
                <Visibility>
                    <Principal
                     isPermitted="true"
                     name="DCS:ReleaseManagement"
                     type="OrganizationalUnit"></Principal>
                    <Principal
                     isPermitted="true"
                     name="DCS:SCM"
                     type="OrganizationalUnit"></Principal>
                    <Principal
                     isPermitted="true"
                     name="DCS:TCS"
                     type="OrganizationalUnit"></Principal>
                </Visibility>
            </VisibilityPermissions>
            <ConfigurationTables></ConfigurationTables>
            <ThingShape>
                <PropertyDefinitions></PropertyDefinitions>
                <ServiceDefinitions>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="calculateAssetCompMenuItems">
                        <ResultType
                         aspect.dataShape="NCR.DCS.MenuDS"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description=""
                             name="assetType"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="calculateCommandString">
                        <ResultType
                         baseType="STRING"
                         description="Command String from command and parameters input files captured"
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description=""
                             name="command"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="parameters"
                             ordinal="2"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="calculateCPUUtilized">
                        <ResultType
                         baseType="NUMBER"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="assetName"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="calculateDCSMashupMenuItems">
                        <ResultType
                         aspect.dataShape="NCR.DCS.MenuDS"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="userName"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="calculateDiskSpaceUtilized">
                        <ResultType
                         baseType="NUMBER"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="assetName"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="calculateMemoryUtilized">
                        <ResultType
                         baseType="NUMBER"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="assetName"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description="Create an incident in the ITSM system via SOUP"
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="CreateFromSoupService">
                        <ResultType
                         baseType="STRING"
                         description="The description of the Event which will be send to NEOS."
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description="Unique ID used between NEOS and DCS to link the objects."
                             name="CIID1"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description=""
                             name="Description1"
                             ordinal="2"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description="list connected and disconnected device of an customer"
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="CustomerDeviceStatus">
                        <ResultType
                         aspect.dataShape="NCR.DCS.CustomerDeviceDetailsDS"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="customer"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             baseType="QUERY"
                             description=""
                             name="Query"
                             ordinal="2"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description="to check if startDate is less than endDate"
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="dateValidation">
                        <ResultType
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="customer"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             baseType="DATETIME"
                             description=""
                             name="endDate"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             baseType="DATETIME"
                             description=""
                             name="startDate"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description="gives totalAsset , connectedAsset and disconnectedAsset"
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="DeviceStatusAnalysis">
                        <ResultType
                         aspect.dataShape="NCR.DCS.CustomerDeviceAnalysis"
                         baseType="INFOTABLE"
                         description="service returns number of connected and disconnected devices"
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="customer"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="disableButton">
                        <ResultType
                         baseType="BOOLEAN"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetActiveUsers">
                        <ResultType
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetAnalyticsSummaryData">
                        <ResultType
                         aspect.dataShape="NCR.DCS.AnalyticsSummaryDS"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="customer"
                             ordinal="4"></FieldDefinition>
                            <FieldDefinition
                             baseType="DATETIME"
                             description=""
                             name="endate"
                             ordinal="5"></FieldDefinition>
                            <FieldDefinition
                             baseType="DATETIME"
                             description=""
                             name="startdate"
                             ordinal="4"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetAssetManagementMSName">
                        <ResultType
                         aspect.dataShape="NCR.DCS.AssetsMashupSelectionDS"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="assetName"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="assetType"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetAssetsForCustomer">
                        <ResultType
                         aspect.dataShape="NCR.DCS.CollectionDemo"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description=""
                             name="customer"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="siteName"
                             ordinal="2"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description="gives number of Event and Incident of an Customer, Device and Store depending on the input selectionType "
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetAssetTypeIncAndEventAnalysis">
                        <ResultType
                         aspect.dataShape="NCR.DCS.CustomerIncidentAnalysis"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="DATETIME"
                             description=""
                             name="endDate"
                             ordinal="4"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description="select any particular device , store and customer name"
                             name="name"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description="It will decide that service will run for :&#xA;&#xA;1) Customer&#xA;2) Store&#xA;3) Device"
                             name="selectionType"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             baseType="DATETIME"
                             description=""
                             name="startDate"
                             ordinal="3"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetAvailabilityAssetsForCustomer">
                        <ResultType
                         aspect.dataShape="NCR.DCS.AssetAvailabiltyBySiteAllDS"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="customerName"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             baseType="DATETIME"
                             description=""
                             name="endDate"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             baseType="DATETIME"
                             description=""
                             name="startDate"
                             ordinal="2"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetAvailabilityForCustomerBySite">
                        <ResultType
                         aspect.dataShape="NCR.DCS.AnalyticsAvailForCustBySiteDS"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="customerName"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             baseType="DATETIME"
                             description=""
                             name="endDate"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             baseType="DATETIME"
                             description=""
                             name="startDate"
                             ordinal="2"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description="Analytics"
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetAvailabilityHHCurrent">
                        <ResultType
                         baseType="NUMBER"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="assetName"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             baseType="DATETIME"
                             description=""
                             name="endDate"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             baseType="DATETIME"
                             description=""
                             name="startDate"
                             ordinal="2"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description="for performance mashup"
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetAvailabilityHHOverTime">
                        <ResultType
                         aspect.dataShape="NCR.DCS.AvailabilityHandHeldDS"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="assetName"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             baseType="DATETIME"
                             description=""
                             name="endDate"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             baseType="DATETIME"
                             description=""
                             name="startDate"
                             ordinal="2"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetAvailabilityHHsForCustomer">
                        <ResultType
                         aspect.dataShape="NCR.DCS.AssetAvailabiltyBySiteAllDS"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="customerName"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             baseType="DATETIME"
                             description=""
                             name="endDate"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             baseType="DATETIME"
                             description=""
                             name="startDate"
                             ordinal="2"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetAvailabilityHHsForCustomerBySite">
                        <ResultType
                         aspect.dataShape="NCR.DCS.AnalyticsAvailForCustBySiteDS"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="customerName"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             baseType="DATETIME"
                             description=""
                             name="endDate"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             baseType="DATETIME"
                             description=""
                             name="startDate"
                             ordinal="2"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description="Bluetooth state of  device"
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getBluetoothState">
                        <ResultType
                         baseType="BOOLEAN"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="assetName"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getBrigtnessMode">
                        <ResultType
                         baseType="BOOLEAN"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="assetName"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetCollectionUsedInfoForDemo">
                        <ResultType
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="customer"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetCommandsForAsset">
                        <ResultType
                         aspect.dataShape="NCR.DCS.RemoteActionCommandsDS"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="assetName"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description=""
                             name="assetType"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetCompanyAssetHierarchy">
                        <ResultType
                         aspect.dataShape="NCR.DCS.HierarchyDS"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="assetID"
                             ordinal="5"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="assetName"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="assetSerialNumber"
                             ordinal="7"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="assetTag"
                             ordinal="6"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="assetType"
                             ordinal="4"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="customerName"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="siteName"
                             ordinal="2"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getComponentMenu">
                        <ResultType
                         aspect.dataShape="NCR.DCS.MenuDS"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetCPUGaugeValDispStr">
                        <ResultType
                         baseType="STRING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="assetName"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetCurrentIPAddress">
                        <ResultType
                         baseType="STRING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetCurrentUserGroups">
                        <ResultType
                         aspect.dataShape="EntityList"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetCustomerAssetType">
                        <ResultType
                         aspect.dataShape="NCR.DCS.CustomerAssetTypeDS"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="customerName"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetCustomerAssetTypeAnalysis">
                        <ResultType
                         aspect.dataShape="NCR.DCS.CustomerDeviceAnalysis"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="assetType"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="customerName"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description="gives number of Event and Incident of an Customer, Device and Store depending on the input selectionType "
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getCustomerIncidentAnalysis">
                        <ResultType
                         aspect.dataShape="NCR.DCS.CustomerIncidentAnalysis"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="DATETIME"
                             description=""
                             name="endDate"
                             ordinal="4"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description="select any particular device , store and customer name"
                             name="name"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description="It will decide that service will run for :&#xA;&#xA;1) Customer&#xA;2) Store&#xA;3) Device"
                             name="selectionType"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             baseType="DATETIME"
                             description=""
                             name="startDate"
                             ordinal="3"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getCustomerName">
                        <ResultType
                         aspect.dataShape="NCR.DCS.CustomerNameShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getDeviceIncidentAnalysis">
                        <ResultType
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="assetName"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             baseType="DATETIME"
                             description=""
                             name="endDate"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             baseType="DATETIME"
                             description=""
                             name="startDate"
                             ordinal="2"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetEventsForAsset">
                        <ResultType
                         aspect.dataShape="NCR.DCS.AssetEventsDS"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description=""
                             name="assetName"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             baseType="DATETIME"
                             description=""
                             name="endate"
                             ordinal="5"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="incident"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             baseType="DATETIME"
                             description=""
                             name="startdate"
                             ordinal="4"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="statuscode"
                             ordinal="2"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetEventsFromLTEventsTable">
                        <ResultType
                         aspect.dataShape="NCR.DCS.LTAssetEventsDS"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="QUERY"
                             description=""
                             name="query"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetFileNameFromExecCommandResult">
                        <ResultType
                         baseType="STRING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="resultstring"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetFilesToGenRetrieveForAsset">
                        <ResultType
                         aspect.dataShape="NCR.DCS.RemoteActionGenRetrieveFilesDS"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="assetName"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description=""
                             name="assetType"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetGroupsForUserByName">
                        <ResultType
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="userName"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetHTMLPropertyTableForComponent">
                        <ResultType
                         aspect.dataShape="NCR.ATMInventoryDS"
                         baseType="HTML"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description=""
                             name="assetName"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="propertyName"
                             ordinal="2"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetHTMLTableForATMCompsINV">
                        <ResultType
                         aspect.dataShape="NCR.ATMInventoryDS"
                         baseType="HTML"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description=""
                             name="assetName"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetHTMLTableForATMCompsNIC">
                        <ResultType
                         aspect.dataShape="NCR.ATMInventoryDS"
                         baseType="HTML"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description=""
                             name="assetName"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetHTMLTableForATMCompsStatus">
                        <ResultType
                         aspect.dataShape="NCR.ATMInventoryDS"
                         baseType="HTML"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description=""
                             name="assetName"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetHTMLTableForCompDisk">
                        <ResultType
                         aspect.dataShape="NCR.ATMInventoryDS"
                         baseType="HTML"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description=""
                             name="assetName"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetHTMLTableForCompPatches">
                        <ResultType
                         aspect.dataShape="NCR.ATMInventoryDS"
                         baseType="HTML"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description=""
                             name="assetName"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetHTMLTableForCompPrinters">
                        <ResultType
                         aspect.dataShape="NCR.ATMInventoryDS"
                         baseType="HTML"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description=""
                             name="assetName"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetHTMLTableForCompSoftware">
                        <ResultType
                         aspect.dataShape="NCR.ATMInventoryDS"
                         baseType="HTML"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description=""
                             name="assetName"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetHTMLTableForRemoteActionsOutput">
                        <ResultType
                         aspect.dataShape="NCR.ATMInventoryDS"
                         baseType="HTML"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="outputRA"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetImageForAsset">
                        <ResultType
                         baseType="IMAGELINK"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="assetModel"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description=""
                             name="assetType"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetImageITForAsset">
                        <ResultType
                         aspect.dataShape="NCR.DCS.ImageStatusDS"
                         baseType="STRING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="BOOLEAN"
                             description=""
                             name="status"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetImageStatusForAsset">
                        <ResultType
                         baseType="IMAGELINK"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="BOOLEAN"
                             description=""
                             name="status"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetInfoTableForATMComponentsINV">
                        <ResultType
                         aspect.dataShape="NCR.ATMDevicesDS"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description=""
                             name="assetName"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetInfoTableForATMComponentsPropertyTL">
                        <ResultType
                         aspect.dataShape="NCR.ATMInventoryDS"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description=""
                             name="assetName"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="propertyName"
                             ordinal="2"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetInfoTableForBatteryCommonComponent">
                        <ResultType
                         aspect.dataShape="NCR.DCS.BatteryCompoDS"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description=""
                             name="assetName"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetInfoTableForBrightnessCommonComponent">
                        <ResultType
                         aspect.dataShape="NCR.DCS.BrightnessCompoDS"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description=""
                             name="assetName"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetInfoTableForBrightnessCommonComponentCopy">
                        <ResultType
                         aspect.dataShape="NCR.DCS.BrightnessCompoDS"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description=""
                             name="assetName"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetInfoTableForComponentProperty">
                        <ResultType
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description=""
                             name="assetName"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="propertyName"
                             ordinal="2"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetInfoTableForComponentServices">
                        <ResultType
                         aspect.dataShape="NCR.DCS.ServicesCompDS"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description=""
                             name="assetName"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetInfoTableForComponentSW">
                        <ResultType
                         aspect.dataShape="NCR.DCS.SWCompDS"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description=""
                             name="assetName"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetInfoTableForCPU">
                        <ResultType
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description=""
                             name="assetName"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetInfoTableForCPUCommonComponent">
                        <ResultType
                         aspect.dataShape="NCR.DCS.CPUCompoDS"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description=""
                             name="assetName"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetInfoTableForExecCommandResult">
                        <ResultType
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="resultstring"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetInfoTableForNetworkPrinterPRTALL">
                        <ResultType
                         aspect.dataShape="NCR.DCS.NETPRINTERPRTALLDS"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description=""
                             name="assetName"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetInfoTableForOSCommonComponent">
                        <ResultType
                         aspect.dataShape="NCR.DCS.OSCompoDS"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description=""
                             name="assetName"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetInfoTableForRebootCommonComponent">
                        <ResultType
                         aspect.dataShape="NCR.DCS.RebootInfoCompoDS"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description=""
                             name="assetName"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetInfoTableForSoftRunningCommComp">
                        <ResultType
                         aspect.dataShape="NCR.DCS.SWRunningCompoDS"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description=""
                             name="assetName"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetInfoTableForWiFiCommonComponent">
                        <ResultType
                         aspect.dataShape="NCR.DCS.WiFiCompoDS"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description=""
                             name="assetName"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetInstanceIdLicenseSubsystem">
                        <ResultType
                         baseType="STRING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetMashupNameFromMenu">
                        <ResultType
                         aspect.dataShape="NCR.DCS.AssetsMashupSelectionDS"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="assetName"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="assetType"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="menuSelected"
                             ordinal="3"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetMemoryGaugeValDispStr">
                        <ResultType
                         baseType="STRING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="assetName"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetMemoryUtilizedHandHeld">
                        <ResultType
                         aspect.dataShape="NCR.DCS.MemUtilizedHH"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="assetName"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetPortyQueryServicesForAsset">
                        <ResultType
                         aspect.dataShape="NCR.DCS.RemoteActionCommandsDS"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="assetName"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description=""
                             name="assetType"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetPropertiesForATMComponents">
                        <ResultType
                         aspect.dataShape="NCR.ATMComponentsDS"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description=""
                             name="assetName"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetPropertiesForBaseBoard">
                        <ResultType
                         aspect.dataShape="NCR.BaseBoardDS"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description=""
                             name="assetName"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetPropertiesForBIOS">
                        <ResultType
                         aspect.dataShape="NCR.BIOSDS"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description=""
                             name="assetName"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetPropertiesForCashDrawer">
                        <ResultType
                         aspect.dataShape="NCR.CashDrawerDS"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description=""
                             name="assetName"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetPropertiesForComputerSystem">
                        <ResultType
                         aspect.dataShape="NCR.ComputerSystemDS"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description=""
                             name="assetName"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetPropertiesForCPU">
                        <ResultType
                         aspect.dataShape="NCR.CPUDS"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description=""
                             name="assetName"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetPropertiesForDrive">
                        <ResultType
                         aspect.dataShape="NCR.DriveDS"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description=""
                             name="assetName"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetPropertiesForGeoLocation">
                        <ResultType
                         aspect.dataShape="NCR.GeoLocationDS"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description=""
                             name="assetName"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetPropertiesForMemory">
                        <ResultType
                         aspect.dataShape="NCR.MemoryDS"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description=""
                             name="assetName"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetPropertiesForOS">
                        <ResultType
                         aspect.dataShape="NCR.OSDS"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description=""
                             name="assetName"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetPropertiesForPrinter">
                        <ResultType
                         aspect.dataShape="NCR.PrinterDS"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description=""
                             name="assetName"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetPropertiesForScanner">
                        <ResultType
                         aspect.dataShape="NCR.ScannerDS"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description=""
                             name="assetName"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetPropertiesForScreen">
                        <ResultType
                         aspect.dataShape="NCR.ScreenDS"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description=""
                             name="assetName"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetPropertiesForSoftware">
                        <ResultType
                         aspect.dataShape="NCR.SoftwareDS"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description=""
                             name="assetName"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetPropertiesForSWD">
                        <ResultType
                         aspect.dataShape="NCR.SWDDS"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description=""
                             name="assetName"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetPropertiesForThing">
                        <ResultType
                         aspect.dataShape="NCR.DCS.BaseDeviceDS"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description=""
                             name="assetName"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description="for performance mashup"
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getPropertyHistoryAllPerformance">
                        <ResultType
                         aspect.dataShape="NCR.DCS.PropertyHistoryAll"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="assetName"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             baseType="DATETIME"
                             description=""
                             name="endDate"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="DATETIME"
                             description=""
                             name="startDate"
                             ordinal="2"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetPropertyHistoryForNamedProperty">
                        <ResultType
                         aspect.dataShape="NCR.DCS.PropertyHistoryDS"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="assetName"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             baseType="DATETIME"
                             description=""
                             name="endDate"
                             ordinal="5"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="propertyJSONKey"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="propertyName"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             baseType="DATETIME"
                             description=""
                             name="startDate"
                             ordinal="4"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description="to implement service on all things"
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetPropertyHistoryForNamedPropertyInNumber">
                        <ResultType
                         aspect.dataShape="NCR.DCS.PropertyHistoryDS"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="assetName"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="propertyJSONKey"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="propertyName"
                             ordinal="2"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetRebootServicesForAsset">
                        <ResultType
                         aspect.dataShape="NCR.DCS.RemoteActionCommandsDS"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="assetName"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description=""
                             name="assetType"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetRestartServicesForAsset">
                        <ResultType
                         aspect.dataShape="NCR.DCS.RemoteActionCommandsDS"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="assetName"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description=""
                             name="assetType"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetSerialNumberForAssetByType">
                        <ResultType
                         baseType="STRING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description=""
                             name="assetName"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetSoftwareContentManagementMSName">
                        <ResultType
                         baseType="STRING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="tabName"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetStatusCodesForEventsDD">
                        <ResultType
                         aspect.dataShape="NCR.DCS.AssetEventsStatusDS"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="assetName"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetStatusSelectionsForAssetEvents">
                        <ResultType
                         aspect.dataShape="NCR.DCS.AssetEventsStatusDS"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetStorageGaugeValDispStr">
                        <ResultType
                         baseType="STRING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="assetName"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetTabNameForMashup">
                        <ResultType
                         baseType="STRING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="tabName"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetVisibilityForRemoteActions">
                        <ResultType
                         baseType="BOOLEAN"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description="check device docked status"
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="IsDeviceDocked">
                        <ResultType
                         baseType="BOOLEAN"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="assetName"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="ProcessAgentConfig">
                        <ResultType
                         baseType="STRING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="option"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="ProcessEventRulesCSVImport">
                        <ResultType
                         aspect.dataShape="NCR.DCS.EventRulesDS"
                         baseType="STRING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="fileName"
                             ordinal="4"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="path"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             baseType="THINGNAME"
                             description=""
                             name="repositoryName"
                             ordinal="2"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="ProcessHandHeldRemoteAction">
                        <ResultType
                         baseType="HTML"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="assetName"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="blueToothTest"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="brightnessAutoMode"
                             ordinal="13"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="brightnesscontrol"
                             ordinal="4"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="cacheSize"
                             ordinal="13"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="clearCache"
                             ordinal="6"></FieldDefinition>
                            <FieldDefinition
                             baseType="BOOLEAN"
                             description=""
                             name="deviceDocked"
                             ordinal="12"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="enableBluetooth"
                             ordinal="7"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="getSystemDiagnostics"
                             ordinal="5"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="ledFlashCradle"
                             ordinal="8"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="rebootHandHeld"
                             ordinal="11"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="unLockHandheld"
                             ordinal="10"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="wifiTest"
                             ordinal="3"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="ProcessHandHeldRemoteActionCopy">
                        <ResultType
                         baseType="HTML"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="assetName"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="blueToothTest"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="brightnessAutoControl"
                             ordinal="12"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="brightnesscontrol"
                             ordinal="4"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="cacheSize"
                             ordinal="13"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="clearCache"
                             ordinal="6"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="enableBluetooth"
                             ordinal="7"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="getSystemDiagnostics"
                             ordinal="5"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="ledFlashCradle"
                             ordinal="8"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="rebootHandheld"
                             ordinal="14"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="unLockHandheld"
                             ordinal="10"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="wifiTest"
                             ordinal="3"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="resetAssetDropDown">
                        <ResultType
                         baseType="STRING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="SetSCMImageVisibility">
                        <ResultType
                         baseType="BOOLEAN"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="selectedTabValue"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="SetSCMImageVisibilityForMenu">
                        <ResultType
                         baseType="BOOLEAN"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="selectedMenu"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="SetSearchVisibility">
                        <ResultType
                         baseType="BOOLEAN"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="selectedTabValue"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="SetSearchVisibilityForMenu">
                        <ResultType
                         baseType="BOOLEAN"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="selectedMenu"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="SetVisibilityFileCopyButtons">
                        <ResultType
                         baseType="BOOLEAN"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="BOOLEAN"
                             description=""
                             name="state"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="SetVisibleAssetWidgets">
                        <ResultType
                         baseType="BOOLEAN"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="ShowFilesTabAssetMashup">
                        <ResultType
                         baseType="BOOLEAN"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description=""
                             name="assetType"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="ShowRemoteActions">
                        <ResultType
                         baseType="BOOLEAN"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description=""
                             name="assetType"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="TerminateUserSession">
                        <ResultType
                         baseType="NOTHING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="USERNAME"
                             description=""
                             name="userName"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category="Interface"
                     description="Update an Incident in the ITSM system via the SOUP interface."
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="UpdateFromSoupService">
                        <ResultType
                         baseType="STRING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="IncidentCompany"
                             ordinal="8"></FieldDefinition>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description=""
                             name="IncidentNum"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="StatusReason"
                             ordinal="7"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="UpdateNotes"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="UpdateStatus"
                             ordinal="6"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="UpdateSummary"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="UpdateUrgency"
                             ordinal="4"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="UpdateWOInfoSummary"
                             ordinal="5"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                </ServiceDefinitions>
                <EventDefinitions></EventDefinitions>
                <ServiceMappings></ServiceMappings>
                <ServiceImplementations>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="calculateAssetCompMenuItems">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        // var menuItems  = Menus['NCR.DCS.AssetComponentMenu'].GetMenuItems();
                                        var menuItems = Menus["NCR.DCS.AssetComponentMenu"].GetEffectiveMenu();
                                        
                                        var length = menuItems.rows.length;
                                        
                                        var atype;
                                        if (assetType == null || assetType == '') {
                                            atype = 'default';
                                        } else {
                                            atype = assetType;
                                        }
                                        
                                        for (var item = 0; item < length; item++) {
                                                        
                                            var menuItem = menuItems.rows[item];
                                            var title = menuItem.getValue('title');
                                        	
                                            // if(menuItem.getValue('title') == 'ATM Components' && assetType == 'POS' ){
                                            if(title == 'ATM Inventory') {
                                                if (atype.toUpperCase() != 'ATM') {
                                                    menuItems.RemoveRow(item);
                                                    length--;
                                                    item--;
                                                }
                                            }
                                            if(title == 'ATM Status') {
                                                if (atype.toUpperCase() != 'ATM') {
                                                    menuItems.RemoveRow(item);
                                                    length--;
                                                    item--;
                                                }
                                            }
                                            if(title == 'Scanner' 
                                                      || title == 'Cash Drawer') {
                                                if (atype.toUpperCase() != 'POS') {
                                                	menuItems.RemoveRow(item);
                                                    length--;
                                                    item--;
                                                }
                                            }
                                            if(title == 'Battery') {
                                                if (atype != 'Handheld') {
                                               		menuItems.RemoveRow(item);
                                                    length--;
                                                    item--;
                                                }
                                            } 
                                             if(title == 'Geo') {
                                                if (atype != 'Handheld') {
                                               		menuItems.RemoveRow(item);
                                                    length--;
                                                    item--;
                                                }
                                            }	
                                        	if(title == 'SW') {
                                                if (atype.toUpperCase() != 'POS' && atype.toUpperCase() != 'ATM' && atype.toUpperCase() != 'LAPTOP' && atype.toUpperCase() != 'MGMTSERVER') {
                                               		menuItems.RemoveRow(item);
                                                    length--;
                                                    item--;
                                                }
                                            } 
                                            if(title == 'Services') {
                                                if (atype.toUpperCase() != 'POS' && atype.toUpperCase() != 'ATM' && atype.toUpperCase() != 'LAPTOP' && atype.toUpperCase() != 'MGMTSERVER') {
                                               		menuItems.RemoveRow(item);
                                                    length--;
                                                    item--;
                                                }
                                            }
                                        }
                                        
                                        var result = menuItems;
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="calculateCommandString">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var result;
                                        if (parameters != "") {
                                            result = command + " " + parameters;
                                        } else {
                                            result = command;
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="calculateCPUUtilized">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        // var result = Math.floor(Math.random() * 101); 
                                        // Get Data from JSON string stored in CPU_ALL property LoadPercentage
                                        
                                        var params = {
                                        	propertyName: "CPU_ALL" /* STRING */
                                        };
                                        
                                        // result: STRING
                                        var invall;
                                        
                                        if (assetName && assetName != '') {
                                        	invall = Things[assetName].GetStringPropertyValue(params);
                                        } else {
                                            invall = '';
                                        }
                                        
                                        
                                        
                                        if (invall && invall != "") {	
                                            if (invall.indexOf("[") != 0) {
                                                invall = "[" + invall + "]";
                                            }    
                                        } 
                                        
                                        if (invall == null || invall =='') {
                                            invall = '[{"LoadPercentage":""}]';
                                        }
                                        
                                        // Create JSON object from String
                                        var objJSON = JSON.parse(invall); 
                                        
                                        var result = parseInt(objJSON[0].LoadPercentage);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="calculateDCSMashupMenuItems">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var menuItems = Menus["NCR.DCS.HeaderMenu"].GetEffectiveMenu();
                                        
                                        // Get Groups from Session var uAG = Resources["CurrentSessionInfo"].GetCurrentUserGroups();
                                        // result: INFOTABLE dataShape: EntityList
                                        var uAG = Users[userName].GetGroups();
                                        var SCMGroup = false;
                                        var RMGroup = false;
                                        var DAGroup = false;
                                        
                                        var tableLength = uAG.rows.length;
                                        for (var y = 0; y < tableLength; y++) {
                                            if (uAG.rows[y].name == 'NCR.SCMDistributorGroup') {
                                                SCMGroup = true;    
                                            }
                                            if (uAG.rows[y].name == 'NCR.ReleaseManagementGroup') {
                                                RMGroup = true;
                                            }
                                            if (uAG.rows[y].name == 'NCR.DCS.DATAADMIN') {
                                                DAGroup = true;
                                            }
                                        }
                                        
                                        var length = menuItems.rows.length;
                                        for (var item = 0; item < length; item++) {                
                                            var menuItem = menuItems.rows[item];
                                            var title = menuItem.getValue('title');	
                                            if (title == 'SOFTWARE CONTENT MANAGEMENT') {
                                                if (SCMGroup == false) {
                                                    menuItems.RemoveRow(item);
                                                    length--;
                                                    item--;
                                                }
                                            }
                                            if (title == 'ADMINISTRATION') {
                                                if (RMGroup == false && DAGroup == false) {
                                                    menuItems.RemoveRow(item);
                                                    length--;
                                                    item--;
                                                }
                                            }        
                                        }
                                        
                                        var result = menuItems;
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="calculateDiskSpaceUtilized">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        // DSK_ALL
                                        // DEBUG var result = Math.floor(Math.random() * 101);
                                        
                                        var params = {
                                        	propertyName: "DSK_ALL" /* STRING */
                                        };
                                        
                                        // result: STRING
                                        var invall;
                                        if (assetName && assetName != '') {
                                        	invall = Things[assetName].GetStringPropertyValue(params);
                                        } else {
                                            invall = '';
                                        }
                                        
                                        if (invall && invall != "") {	
                                            if (invall.indexOf("[") != 0) {
                                                invall = "[" + invall + "]";
                                            }    
                                        } 
                                        
                                        if (invall == null || invall =='') {
                                            invall = '[{"Size":"","FreeSpace":""}]';
                                        }
                                        
                                        // Create JSON object from String
                                        var objJSON = JSON.parse(invall); 
                                        
                                        // Parse through and look for object that has Name == 'C:'
                                        var objC;
                                        for (var i = 0; i < objJSON.length; i++) {
                                            if (objJSON[i].Name == "C:") {
                                                objC = objJSON[i];
                                            }    
                                         }
                                        
                                         var result = 0;
                                        
                                         try {
                                        
                                            // Formula (Size - FreeSpace) / Size * 100 = Utilized
                                            // var utilized = ((parseInt(objJSON[0].Size) - parseInt(objJSON[0].FreeSpace)) / parseInt(objJSON[0].Size)) * 100;
                                            var utilized = ((parseInt(objC.Size) - parseInt(objC.FreeSpace)) / parseInt(objC.Size)) * 100;
                                        
                                            result = parseInt(utilized);
                                         } catch (e) {}
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="calculateMemoryUtilized">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        // Calculation (TotalVisibleMemorySize - FreePhysicalMemory) / TotalVisibleMemorySize * 100
                                        // OS_ALL
                                        // DEBUG var result = Math.floor(Math.random() * 101);
                                        
                                        var params = {
                                        	propertyName: "OS_ALL" /* STRING */
                                        };
                                        
                                        // result: STRING
                                        var invall;
                                        if (assetName && assetName != '') {
                                        	invall = Things[assetName].GetStringPropertyValue(params);
                                        } else {
                                            invall = '';
                                        }
                                        
                                        if (invall && invall != "") {	
                                            if (invall.indexOf("[") != 0) {
                                                invall = "[" + invall + "]";
                                            }    
                                        } 
                                        
                                        if (invall == null || invall =='') {
                                            invall = '[{"TotalVisibleMemorySize":"","FreePhysicalMemory":""}]';
                                        }
                                        
                                        // Create JSON object from String
                                        var objJSON = JSON.parse(invall); 
                                        
                                        // Formula (Size - FreeSpace) / Size * 100 = Utilized
                                        var utilized = ((parseInt(objJSON[0].TotalVisibleMemorySize) - parseInt(objJSON[0].FreePhysicalMemory)) / parseInt(objJSON[0].TotalVisibleMemorySize)) * 100;
                                        
                                        var result = parseInt(utilized);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="CreateFromSoupService">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var lookupparams = {
                                            CiId: CIID1,
                                            Description: Description1
                                        };
                                        
                                        var lookupxml = Things["NCR.DCS.DATABASE.THING"].GetSoupLookup(lookupparams);
                                        
                                        var content = lookupxml.xmlinput;
                                        var headers = new Object();
                                        
                                        headers.SOAPAction = "";
                                        headers.Authorization = 'Basic c2EyMzA3NjE6V2VsY29tZURFQzIwMTdAOTBEZUMyMDE3';
                                        
                                        var params1 = {
                                            proxyScheme: undefined /* STRING */,
                                            headers: headers /* JSON */,
                                            ignoreSSLErrors: undefined /* BOOLEAN */,
                                            useNTLM: undefined /* BOOLEAN */,
                                            workstation: undefined /* STRING */,
                                            useProxy: undefined /* BOOLEAN */,
                                            withCookies: undefined /* BOOLEAN */,
                                            proxyHost: undefined /* STRING */,
                                            url: "https://osbcert-ha.ncr.com/ext/Services/NEOS/NEOSCILookupUtilityServicePS" /* STRING */,
                                            content: content /* XML */,
                                            timeout: undefined /* NUMBER */,
                                            proxyPort: undefined /* INTEGER */,
                                            password: undefined /* STRING */,
                                            domain: undefined /* STRING */,
                                            username: undefined /* STRING */
                                        };
                                        
                                        var resultXML = Resources["ContentLoaderFunctions"].PostXML(params1);
                                        
                                        var firstname = resultXML.*::Body.*::CreateResponse.*::FirstName;
                                        var lastname = resultXML.*::Body.*::CreateResponse.*::LastName;
                                        var ciname = resultXML.*::Body.*::CreateResponse.*::CIName;
                                        var serialnum = resultXML.*::Body.*::CreateResponse.*::SerialNumber;
                                        var productid = resultXML.*::Body.*::CreateResponse.*::ProductID;
                                        var sitenumber = resultXML.*::Body.*::CreateResponse.*::SiteNumber;
                                        var mcn = resultXML.*::Body.*::CreateResponse.*::MasterCustomerNumber;
                                        var country = resultXML.*::Body.*::CreateResponse.*::CountryCode;
                                        var company = resultXML.*::Body.*::CreateResponse.*::Company;
                                        
                                        var xmlparams = {
                                            FirstName: firstname,
                                            LastName: lastname,
                                            Impact: '2-Significant/Large',
                                            ReportedSource: 'Email',
                                            ServiceType: 'User Service Restoration',
                                            Status: '0',
                                            ProblemSummary: 'This is test ticket with asset',
                                            Notes: 'Test Notes',
                                            Urgency: '2-High',
                                            CIReconId: CIID1,
                                            PartNumber: productid,
                                            CITag: '',
                                            Sequence_Number: 123434567
                                        };
                                        
                                        var sqlresult = Things["NCR.DCS.DATABASE.THING"].CreateXMLForSoup(xmlparams);
                                        var content1 = sqlresult.xmlinput;
                                        
                                        var headers1 = new Object();
                                        
                                        headers1.SOAPAction = "";
                                        headers1.Authorization = 'Basic c2EyMzA3NjE6V2VsY29tZURFQzIwMTdAOTBEZUMyMDE3';
                                        
                                        var params = {
                                            proxyScheme: undefined /* STRING */,
                                            headers: headers1 /* JSON */,
                                            ignoreSSLErrors: undefined /* BOOLEAN */,
                                            useNTLM: undefined /* BOOLEAN */,
                                            workstation: undefined /* STRING */,
                                            useProxy: undefined /* BOOLEAN */,
                                            withCookies: undefined /* BOOLEAN */,
                                            proxyHost: undefined /* STRING */,
                                            url: "https://osbcert-ha.ncr.com/ext/Services/IOT/IOTNEOSIntegrationWS" /* STRING */,
                                            content: content1 /* XML */,
                                            timeout: undefined /* NUMBER */,
                                            proxyPort: undefined /* INTEGER */,
                                            password: undefined /* STRING */,
                                            domain: undefined /* STRING */,
                                            username: undefined /* STRING */
                                        };
                                        
                                        // result: XML
                                        var resultXML1 = Resources["ContentLoaderFunctions"].PostXML(params);
                                        
                                        //var result = ""+resultXML1;
                                        var result = resultXML1.*::Body.*::IOTNEOSOutputResponseService.*::Incident_Number;
                                        
                                        // TODO: ms50001: 2018-04-20: What are the error codes we can receive?
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="CustomerDeviceStatus">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var paramsHD = {
                                            infoTableName: "InfoTable",
                                            dataShapeName: "NCR.DCS.CustomerDeviceDetailsDS"
                                        };
                                        
                                        
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(paramsHD);
                                        
                                        var query = undefined;
                                        if (customer != null && customer != "") {
                                            query = {
                                                "filters": {
                                                    "fieldName": "Customer",
                                                    "type": "EQ",
                                                    "value": customer
                                                }
                                            };
                                        }
                                        
                                        var params = {
                                            maxItems: 100000 /* NUMBER */,
                                            nameMask: undefined /* STRING */,
                                            query: query /* QUERY */,
                                            tags: undefined /* TAGS */
                                        };
                                        
                                        
                                        var assets = ThingTemplates["NCR.BaseDevice"].QueryImplementingThingsWithData(params);
                                        var aIT;
                                        
                                        // logger.debug("Customer"  + customer)
                                        
                                        if (customer != null && customer != '') {
                                            var params = {
                                                inclusive: true /* BOOLEAN */,
                                                fieldName: "Customer" /* STRING */,
                                                t: assets /* INFOTABLE */,
                                                matchValues: customer /* STRING */
                                            };
                                        
                                            // result: INFOTABLE
                                            aIT = Resources["InfoTableFunctions"].SetFilter(params);
                                        
                                        } else {
                                            aIT = assets;
                                        }
                                        
                                        //result = aIT
                                        
                                        var info = new Object()
                                        var tableLength = aIT.rows.length
                                        logger.debug("NoRows"+tableLength)
                                        
                                        if(aIT != null){
                                            for(var y = 0; y < tableLength ;y++){
                                                var info = new Object()
                                                
                                            if (aIT.rows[y].name != null && aIT.rows[y].name !='')
                                                info.DeviceName = aIT.rows[y].name
                                            if (aIT.rows[y].Asset_Type != null && aIT.rows[y].Asset_Type != '')
                                                info.AssetType = aIT.rows[y].Asset_Type
                                        
                                            if (aIT.rows[y].Customer != null && aIT.rows[y].Customer != '')
                                                info.Customer = aIT.rows[y].Customer
                                        
                                        
                                            if (aIT.rows[y].Asset_StoreIdentifier != null && aIT.rows[y].Asset_StoreIdentifier != '')
                                                info.Store = aIT.rows[y].Asset_StoreIdentifier
                                        
                                            if (aIT.rows[y].isConnected != null && aIT.rows[y].isConnected != '')
                                                info.Connected = aIT.rows[y].isConnected  
                                        
                                        
                                            if (aIT.rows[y].lastConnection != null && aIT.rows[y].lastConnection != '')
                                                info.LastConnected = aIT.rows[y].lastConnection
                                        
                                                result.AddRow(info);
                                                logger.debug("Y value" + y + "Obejct"  + info)
                                        
                                            
                                            
                                        
                                            
                                            }
                                        }
                                        
                                        var params = {
                                        
                                            t: result /* INFOTABLE */,
                                        
                                            query: Query /* QUERY */
                                        
                                        };
                                        
                                        var result = Resources["InfoTableFunctions"].Query(params);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="dateValidation">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var query = undefined;
                                        if (customer != null && customer != "") {
                                            query = {
                                                "filters": {
                                                    "fieldName": "Customer",
                                                    "type": "EQ",
                                                    "value": "Ahold-Delhaize"
                                                }
                                            };
                                        }
                                        
                                        var params = {
                                            maxItems: 100000 /* NUMBER */,
                                            nameMask: undefined /* STRING */,
                                            query: query /* QUERY */,
                                            tags: undefined /* TAGS */
                                        };
                                        
                                        
                                        var assets = ThingTemplates["NCR.BaseDevice"].QueryImplementingThingsWithData(params);
                                        var aIT;
                                        
                                        // logger.debug("Customer"  + customer)
                                        
                                        if (customer != null && customer != '') {
                                            var params = {
                                                inclusive: true /* BOOLEAN */,
                                                fieldName: "Customer" /* STRING */,
                                                t: assets /* INFOTABLE */,
                                                matchValues: customer /* STRING */
                                            };
                                        
                                            // result: INFOTABLE
                                            aIT = Resources["InfoTableFunctions"].SetFilter(params);
                                        
                                        } else {
                                            aIT = assets;
                                        }
                                        
                                        result = aIT
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="DeviceStatusAnalysis">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var numberofAssetsConnected = 0;            //Connected Assets of Customer
                                        var numberofAssetsDisconnected = 0;         //Disconnected Assets  of Customer
                                        var numberOfAssetsTotal = 0;               //Total Assets of Customer
                                        
                                        
                                        
                                        var paramsHD = {
                                          infoTableName: "InfoTable",
                                          dataShapeName : "NCR.DCS.CustomerDeviceAnalysis"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(NCR.DCS.PropertyHistoryDS)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(paramsHD);
                                        
                                        var query = undefined; 
                                        if (customer != null && customer != "") {
                                            query = {
                                                "filters": {
                                                    "fieldName": "Customer",
                                                    "type": "EQ",
                                                    "value": customer
                                                }
                                            };
                                        }
                                        
                                        var params = {
                                          maxItems: 100000 /* NUMBER */,
                                          nameMask: undefined /* STRING */,
                                          query: query /* QUERY */,
                                          tags: undefined /* TAGS */
                                        };
                                        
                                        // result: INFOTABLE dataShape: RootEntityList
                                        var assets = ThingTemplates["NCR.BaseDevice"].QueryImplementingThingsWithData(params);
                                        var aIT;
                                        
                                        if (customer != null && customer != '') {
                                          var params = {
                                            inclusive: true /* BOOLEAN */,
                                            fieldName: "Customer" /* STRING */,
                                            t: assets /* INFOTABLE */,
                                            matchValues: customer /* STRING */
                                          };
                                        
                                          // result: INFOTABLE
                                          aIT = Resources["InfoTableFunctions"].SetFilter(params);
                                        
                                        } else {
                                          aIT = assets;
                                        }
                                        
                                        //result = assets
                                        
                                        var tableLength = aIT.rows.length;
                                        numberOfAssetsTotal = tableLength;
                                        for (var y = 0; y < tableLength; y++) {
                                          if (aIT.rows[y].isConnected) {
                                            numberofAssetsConnected++;
                                          } else {
                                            numberofAssetsDisconnected++;
                                          }
                                        }
                                        
                                        
                                        //Disconnected Devices
                                        var rowObject = new Object();
                                        
                                        rowObject.id = "Disconnected Devices";
                                        rowObject.deviceInfo = numberofAssetsDisconnected;
                                        rowObject.labelName = "Disconnected Devices (" + numberofAssetsDisconnected + ")";
                                        
                                        result.AddRow(rowObject);
                                        
                                        //Connected Devices
                                        var rowObject = new Object();
                                         
                                        rowObject.id = "Connected Devices";
                                        rowObject.deviceInfo = numberofAssetsConnected;
                                        rowObject.labelName = "Connected Devices (" + numberofAssetsConnected + ")";
                                        
                                        result.AddRow(rowObject);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="disableButton">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var result = true;
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetActiveUsers">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var params = {
                                        	maxItems: undefined /* NUMBER */
                                        };
                                        
                                        // result: INFOTABLE dataShape: UserStatus
                                        var result = Resources["CurrentSessionInfo"].GetActiveUsers(params);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetAnalyticsSummaryData">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        // DEBUG logger.debug("NCRDCSMASHUP::NCR.BaseDeviceHelper::GetAnalyticsSummaryData::customer:" + customer + ":startDate:" + startdate + ":" + endate);
                                        
                                        var numberOfAssetsTotal = 0;
                                        var numberofAssetsConnected = 0;
                                        var numberofAssetsDisconnected = 0;
                                        var numberOfEvents = 0;
                                        var numberOfIncidents = 0;
                                        var numberOfEventsCritical = 0;
                                        var numberofEventsMultiple = 0;
                                        
                                        // Assets Data
                                        // GetImplementingThingsWithData() only returns 500 records; need to use QueryImplementedThingsWithData()
                                        // var assets = ThingTemplates["NCR.BaseDevice"].GetImplementingThingsWithData();
                                        
                                        var query = undefined; 
                                        if (customer != null && customer != "") {
                                            query = {
                                                "filters": {
                                                    "fieldName": "Customer",
                                                    "type": "EQ",
                                                    "value": customer
                                                }
                                            };
                                        }
                                        
                                        var params = {
                                        	maxItems: 100000 /* NUMBER */,
                                        	nameMask: undefined /* STRING */,
                                        	query: query /* QUERY */,
                                        	tags: undefined /* TAGS */
                                        };
                                        
                                        // result: INFOTABLE dataShape: RootEntityList
                                        var assets = ThingTemplates["NCR.BaseDevice"].QueryImplementingThingsWithData(params);
                                        
                                        // DEBUG 
                                        logger.debug("NCRDCSMASHUP::NCR.BaseDeviceHelper::GetAnalyticsSummaryData::assets:tablelength:" + assets.rows.length);
                                        
                                        
                                        var aIT = assets;
                                        /*
                                        // Not needed since QueryImplementingThingsWithData()
                                        var aIT;
                                        if (customer != null && customer != '') {
                                            var paramsAIT = {
                                                inclusive: true // BOOLEAN,
                                                fieldName: "Customer" // STRING,
                                                t: assets // INFOTABLE *,
                                                matchValues: customer // STRING
                                            };
                                        
                                            // result: INFOTABLE
                                            aIT = Resources["InfoTableFunctions"].SetFilter(paramsAIT);
                                            
                                        } else { 
                                            aIT= assets;
                                        }
                                        */
                                        
                                        var tableLength = aIT.rows.length;
                                        numberOfAssetsTotal = tableLength;
                                        for (var y = 0; y < tableLength; y++) {
                                            if (aIT.rows[y].isConnected) {
                                                numberofAssetsConnected++;
                                            } else {
                                                numberofAssetsDisconnected++;
                                            }
                                        }
                                        
                                        // Events Data
                                        
                                        if (customer != null && customer != '') {
                                               
                                            /*
                                                DataTables: Never set maxItems to a “Super High” number like 1000000, why? 
                                                It prefetch an array in memory of that size and also it makes queries slower 
                                                ( as it’s allocating the memory ), always pass on maxItems: me.GetDataTableEntryCount() 
                                                it costs almost 0ms to get the rows count ( Neo4J, PostgreSQL it has some cost this service** ).
                                            */
                                        
                                            // TODO: Filter Customer
                                            
                                            var queryC = {
                                                "filters": {
                                                "fieldName": "customer",
                                                "type": "EQ",
                                                "value": customer
                                            }};
                                            
                                        
                                            var paramsNOE = {
                                        	    maxItems: 10000 /* NUMBER */,
                                        	    values: undefined /* INFOTABLE*/,
                                        	    query: queryC /* QUERY */,
                                        	    source: undefined /* STRING */,
                                        	    tags: undefined /* TAGS */
                                            };
                                        
                                            // result: INFOTABLE
                                            var itNOE = Things["NCR.DCS.EventsDT"].QueryDataTableEntries(paramsNOE);
                                        
                                            // Process Events for Customer
                                            var tableLengthE = itNOE.rows.length;
                                            numberOfEvents = tableLengthE;
                                            for (var y = 0; y < tableLengthE; y++) {
                                                if (itNOE.rows[y].count > 1) {
                                                    numberofEventsMultiple++;
                                                }
                                                if (itNOE.rows[y].severity.toUpperCase() == 'CRITICAL') {
                                                    numberOfEventsCritical++;
                                                }
                                                if (itNOE.rows[y].incident != null && itNOE.rows[y].incident != '') {
                                                    numberOfIncidents++;
                                                } 
                                            }
                                        
                                            /* 
                                            // FindDataTableEntries better for performance; only returns 500 entries
                                            */
                                        
                                        
                                        } else {
                                            // result: INTEGER
                                            numberOfEvents = Things["NCR.DCS.EventsDT"].GetDataTableEntryCount();
                                        
                                            /* 
                                                Build InfoTable with only entries from Data Table using query 
                                                for events that have an incident or a count > 0; performance
                                            */   
                                        
                                            /*
                                            var values = Things["NCR.DCS.EventsDT"].CreateValues();
                                            values.duration = undefined; //INTEGER
                                            values.severity = undefined; //STRING
                                            values.statuscode = undefined; //STRING
                                            values.eventid = undefined; //STRING [Primary Key]
                                            values.count = undefined; //INTEGER
                                            values.assetName = undefined; //STRING [Primary Key]
                                            values.description = undefined; //STRING
                                            values.category = undefined; //STRING
                                            values.incident = undefined; //STRING
                                            values.timestamp = undefined; //DATETIME
                                            */
                                        
                                            var query1 =
                                                {
                                                    "filters": {
                                                        "type": "or",
                                                        "filters": [
                                                            {
                                                                "type": "EQ",
                                                                "fieldName": "severity",
                                                                "value": "Critical"
                                                            },
                                                            {
                                                                "type": "GT",
                                                                "fieldName": "count",
                                                                "value": 0
                                                            },
                                                            {
                                                                "type": "NE",
                                                                "fieldName": "incident",
                                                                "value": ""
                                                            }
                                                        ]
                                                    }
                                                };
                                        
                                            var paramsITNOE = {
                                                maxItems: 100000 /* NUMBER */,
                                                values: undefined /* INFOTABLE*/,
                                                query: query1 /* QUERY */,
                                                source: undefined /* STRING */,
                                                tags: undefined /* TAGS */
                                            };
                                        
                                            // result: INFOTABLE
                                            var itNOE = Things["NCR.DCS.EventsDT"].QueryDataTableEntries(paramsITNOE);
                                        
                                            // Process Events for Customer
                                            var tableLengthE = itNOE.rows.length;
                                            for (var y = 0; y < tableLengthE; y++) {
                                                if (itNOE.rows[y].count > 0) {
                                                    numberofEventsMultiple++;
                                                }
                                                if (itNOE.rows[y].severity.toUpperCase() == 'CRITICAL') {
                                                    numberOfEventsCritical++;
                                                }
                                                if (itNOE.rows[y].incident != null && itNOE.rows[y].incident != '') {
                                                    numberOfIncidents++;
                                                }
                                            }
                                        }
                                        
                                        
                                        // return InfoTable
                                        var paramsR = {
                                            infoTableName: "InfoTable",
                                            dataShapeName: "NCR.DCS.AnalyticsSummaryDS"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(NCR.DCS.RemoteActionCommandsDS)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(paramsR);
                                        
                                        // Commands
                                        var newEntry = new Object();
                                        
                                        newEntry.numberOfAssetsTotal = numberOfAssetsTotal.toFixed(0);;
                                        newEntry.numberofAssetsConnected = numberofAssetsConnected;
                                        newEntry.numberofAssetsDisconnected = numberofAssetsDisconnected;
                                        newEntry.numberOfEvents = numberOfEvents;
                                        newEntry.numberOfIncidents = numberOfIncidents;
                                        newEntry.numberOfEventsCritical = numberOfEventsCritical;
                                        newEntry.numberofEventsMultiple = numberofEventsMultiple;
                                        result.AddRow(newEntry);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetAssetManagementMSName">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        //DEBUG 
                                        logger.debug("NCRDCSMASHUP::NCR.BaseDeviceHelper::GetAssetMangementMSName::assetType:" + assetType + ":assetName:" + assetName);
                                        
                                        if (!assetType) {
                                        	assetType = '';
                                        }
                                        
                                        var result;
                                        var msname;
                                        var disableSWCM = false;
                                        
                                        if (assetType.toUpperCase() == 'SCALE') {
                                            msname = 'NCR.AssetsKSMashup';
                                            disableSWCM = true;
                                        } else if (assetType.toUpperCase() == 'HANDHELD') {
                                        	msname = "NCR.AssetsHandHeldMashup";
                                        } else if (assetType.toUpperCase() == 'PRINTER') {
                                        	msname = "NCR.AssetsSNMPMashup";
                                        	disableSWCM = true;
                                        } else {
                                        	msname = "NCR.AssetsMashup";
                                        }
                                        
                                        if (!assetName || assetName == '') {
                                            msname = "NCR.DCS.DefaultAssetManagementMashup";
                                        }
                                        
                                        var params = {
                                        	infoTableName : "InfoTable",
                                        	dataShapeName : "NCR.DCS.AssetsMashupSelectionDS"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(NCR.DCS.AssetsMashupSelectionDS)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        // Commands
                                        var newEntry = new Object();
                                        
                                        newEntry.msname = msname;
                                        newEntry.disableSWCM = disableSWCM;
                                        result.AddRow(newEntry);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetAssetsForCustomer">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        // DEBUG logger.debug("NCRDCSMASHUP::NCR.BaseDeviceHelper::GetAssetsForCustomer::customer:" + customer);
                                        
                                        // Create Empty InfoTable
                                         var params = {
                                         	infoTableName: "InfoTable",
                                         	dataShapeName: "NCR.DCS.CollectionDemo"
                                         };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(NCR.DCS.AssetEventsStatusDS)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        // return empty selection for resetting 
                                        	
                                        
                                        
                                        	var query = {
                                        		"filters": {
                                        			"type": "And",
                                        			"filters": [{
                                        				"type": "EQ",
                                        				"fieldName": "Customer",
                                        				"value": customer
                                        			}]
                                        		},
                                        		"filter": [{
                                        			"fieldName": "Asset_Type",
                                        			"type": "EQ",
                                        			"value": "HANDHELD"
                                        		}],
                                        		"sorts": [{
                                        			"fieldName": "Customer",
                                        			"isAscending": "false"
                                        		}]
                                        	};
                                        
                                        	if (siteName != undefined && siteName != '') {
                                        		query.filters.filters.push({
                                        			"fieldName": "Asset_StoreIdentifier",
                                        			"type": "LIKE",
                                        			"value": "%" + siteName + "%"
                                        		});
                                        	}   
                                        
                                        	
                                        
                                        	var params2 = {
                                        		maxItems: 100000 /* NUMBER */,
                                        		nameMask: undefined /* STRING */,
                                        		query: query /* QUERY */,
                                        		tags: undefined /* TAGS */
                                        	};
                                        
                                        	// result: INFOTABLE dataShape: RootEntityList
                                        	var aIT = ThingTemplates["NCR.BaseDevice"].QueryImplementingThingsWithData(params2);
                                        	//DEBUG logger.debug("NCRDCSMASHUP::NCR.BaseDeviceHelper::GetAssetsForCustomer::tablelength:" + aIT.rows.length);
                                        
                                        	
                                        
                                        	//DEBUG logger.debug("NCRDCSMASHUP::NCR.BaseDeviceHelper::GetAssetsForCustomer::tablelength:" + aIT.rows.length);
                                        	var param = {
                                        		propertyName: "BAT_ALL" /* STRING */
                                        	};
                                        	var tableLength = aIT.rows.length;
                                        	var state = false
                                        	for (var y = 0; y < tableLength; y++) {
                                        		var deviceDocked = false
                                        		if (aIT.rows[y].Asset_Type != "HANDHELD")
                                        		continue
                                        		var sc = new Object()
                                        		sc.name = aIT.rows[y].name;
                                        		var assetName = aIT.rows[y].name;
                                        		if (assetName) {
                                        			if (Things[assetName].GetStringPropertyValue(param) != null || Things[assetName].GetStringPropertyValue(param) !=''){
                                        			var invall = Things[assetName].GetStringPropertyValue(param);}
                                        			if(invall){
                                        			if (JSON.parse(invall) != null || JSON.parse(invall) != '') {
                                        				
                                        				var batteryObj = JSON.parse(invall);
                                        				if(batteryObj != '' && batteryObj != null){
                                        					if (batteryObj["Docked"])
                                        				 deviceDocked = batteryObj["Docked"]
                                        				logger.debug("Docked" + deviceDocked)}
                                        			}
                                        			if (deviceDocked)
                                        				state = true;
                                        			else
                                        				state = false;
                                        		}}
                                        		sc.Asset_Type = aIT.rows[y].Asset_Type;
                                        		if (state)
                                        			sc.AssetImage = "/Thingworx/MediaEntities/NCR.DCS.Handheld.Docked";
                                        		else
                                        			sc.AssetImage = "/Thingworx/MediaEntities/NCR.DCS.Handheld.Undocked";
                                        		// result: INFOTABLE  
                                        		result.AddRow(sc);
                                        	}
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetAssetTypeIncAndEventAnalysis">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var params = {																// Data Shape 
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "NCR.DCS.CustomerIncidentAnalysis"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable")
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        
                                        var stDate = new Date(startDate.getFullYear(), startDate.getMonth(), startDate.getDate())
                                        logger.debug("StartDate" + stDate)
                                        
                                        var edDate = new Date(endDate.getFullYear(), endDate.getMonth(), endDate.getDate())
                                        logger.debug("EndDate" + edDate)
                                        
                                        // Query based on input as a Device, Customer and  Store
                                        var queryC;
                                        var status = true
                                        switch(selectionType){
                                        	case 'Customer' :
                                         queryC = {
                                        	"filters": {
                                        		"type": "AND",
                                        		"filters": [
                                        			{
                                        				"fieldName": "customer",
                                        				"type": "EQ",
                                        				"value": name
                                        			},
                                        			{
                                        				"fieldName": "timestamp",
                                        				"type": "Between",
                                        				"from": stDate,
                                        				"to": edDate
                                        			}
                                        
                                        		]
                                        	}
                                        }
                                        	break;
                                        	case 'Store':
                                        		queryC = {
                                        			"filters": {
                                        				"type": "AND",
                                        				"filters": [
                                        					{
                                        						"fieldName": "storeidentifier",
                                        						"type": "EQ",
                                        						"value": name
                                        					},
                                        					{
                                        						"fieldName": "timestamp",
                                        						"type": "Between",
                                        						"from": stDate,
                                        						"to": edDate
                                        					}
                                        
                                        				]
                                        			}
                                        		}
                                        		break;
                                        	case 'Device' :
                                        		queryC = {
                                        			"filters": {
                                        				"type": "AND",
                                        				"filters": [
                                        					{
                                        						"fieldName": "assetName",
                                        						"type": "EQ",
                                        						"value": name
                                        					},
                                        					{
                                        						"fieldName": "timestamp",
                                        						"type": "Between",
                                        						"from": stDate,
                                        						"to": edDate
                                        					}
                                        
                                        				]
                                        			}
                                        		}
                                        		break;
                                        	default :
                                        		status = true    //Make it false after testing
                                        		
                                        		break;
                                        
                                        }
                                        
                                        if(status != false) {
                                        
                                        var params = {
                                        	maxItems: 10000 /* NUMBER */,
                                        	values: undefined /* INFOTABLE*/,
                                        	query: queryC /* QUERY */,
                                        	source: undefined /* STRING */,
                                        	tags: undefined /* TAGS */
                                        };
                                        
                                        // result: INFOTABLE
                                        var tableEvent = Things["NCR.DCS.EventsDT"].QueryDataTableEntries(params);
                                        //result = tableEvent
                                        
                                        
                                        var newEntry = new Object();
                                        newEntry.Date = '2108-04-24';
                                        newEntry.numberOfNormalEvents = 10
                                        newEntry.numberOfEventsCritical = 9
                                        newEntry.numberOfEvents = 19
                                        newEntry.numberOfIncidents = 4
                                        result.AddRow(newEntry);
                                        
                                        newEntry.Date = '2108-04-23';
                                        newEntry.numberOfNormalEvents = 10
                                        newEntry.numberOfEventsCritical = 6
                                        newEntry.numberOfEvents = 16
                                        newEntry.numberOfIncidents = 4
                                        result.AddRow(newEntry);
                                        
                                        newEntry.Date = '2108-04-22';
                                        newEntry.numberOfNormalEvents = 15
                                        newEntry.numberOfEventsCritical = 10
                                        newEntry.numberOfEvents = 25
                                        newEntry.numberOfIncidents = 8
                                        result.AddRow(newEntry);
                                        
                                        newEntry.Date = '2108-04-21';
                                        newEntry.numberOfNormalEvents = 22
                                        newEntry.numberOfEventsCritical = 11
                                        newEntry.numberOfEvents = 11
                                        newEntry.numberOfIncidents = 9
                                        result.AddRow(newEntry);
                                        
                                        newEntry.Date = '2108-04-20';
                                        newEntry.numberOfNormalEvents = 10
                                        newEntry.numberOfEventsCritical = 6
                                        newEntry.numberOfEvents = 16
                                        newEntry.numberOfIncidents = 5
                                        result.AddRow(newEntry);
                                        
                                        newEntry.Date = '2108-04-19';
                                        newEntry.numberOfNormalEvents = 10
                                        newEntry.numberOfEventsCritical = 11
                                        newEntry.numberOfEvents = 21
                                        newEntry.numberOfIncidents = 9
                                        result.AddRow(newEntry);
                                        
                                        newEntry.Date = '2108-04-18';
                                        newEntry.numberOfNormalEvents = 10
                                        newEntry.numberOfEventsCritical = 9
                                        newEntry.numberOfEvents = 19
                                        newEntry.numberOfIncidents = 8
                                        result.AddRow(newEntry);
                                        
                                        newEntry.Date = '2108-04-17';
                                        newEntry.numberOfNormalEvents = 6
                                        newEntry.numberOfEventsCritical = 12
                                        newEntry.numberOfEvents = 18
                                        newEntry.numberOfIncidents = 7
                                        result.AddRow(newEntry);
                                        
                                        newEntry.Date = '2108-04-16';
                                        newEntry.numberOfNormalEvents = 14
                                        newEntry.numberOfEventsCritical = 5
                                        newEntry.numberOfEvents = 19
                                        newEntry.numberOfIncidents = 8
                                        result.AddRow(newEntry);
                                        
                                        newEntry.Date = '2108-04-15';
                                        newEntry.numberOfNormalEvents = 10
                                        newEntry.numberOfEventsCritical = 7
                                        newEntry.numberOfEvents = 17
                                        newEntry.numberOfIncidents = 10
                                        result.AddRow(newEntry);
                                        
                                        newEntry.Date = '2108-04-26';
                                        newEntry.numberOfNormalEvents = 11
                                        newEntry.numberOfEventsCritical = 8
                                        newEntry.numberOfEvents = 19
                                        newEntry.numberOfIncidents = 10
                                        result.AddRow(newEntry);
                                        
                                        newEntry.Date = '2108-04-27';
                                        newEntry.numberOfNormalEvents = 12
                                        newEntry.numberOfEventsCritical = 7
                                        newEntry.numberOfEvents = 19
                                        newEntry.numberOfIncidents = 10
                                        result.AddRow(newEntry);
                                        
                                          // Code to get Incidents
                                        /*
                                        var tableLengthE = tableEvent.rows.length;
                                        logger.debug("tableLength :  " + tableLengthE)
                                        
                                        var lastDate = new Date();
                                        var numberOfEvents = 0;
                                        var numberOfEventsCritical = 0;
                                        var numberOfIncidents = 0;
                                        var numberOfNormalEvents = 0;
                                        
                                        
                                        
                                        for (var y = 0; y < tableLengthE; y++) {
                                        
                                        	//getting Date field from timeStamp Column
                                        	var timeStamp = tableEvent.rows[y].timestamp
                                        	var newDate = new Date(timeStamp.getFullYear(), timeStamp.getMonth(), timeStamp.getDate())
                                        
                                        
                                        	if (y == 0)
                                        		lastDate = newDate;
                                        
                                        	//if row date not matches with last scanned row date saved the entry otherwise increment events ans incident of that date
                                        	if (lastDate.getTime() !== newDate.getTime()) {
                                        		var newEntry = new Object();
                                        		newEntry.Date = lastDate;
                                        		newEntry.numberOfNormalEvents = numberOfNormalEvents;
                                        		newEntry.numberOfEventsCritical = numberOfEventsCritical;
                                        		newEntry.numberOfEvents = numberOfEvents;
                                        		newEntry.numberOfIncidents = numberOfIncidents;
                                        		result.AddRow(newEntry);
                                        
                                        
                                        		lastDate = newDate
                                        		numberOfEvents = 0;
                                        		numberOfIncidents = 0;
                                        		numberOfEventsCritical = 0;
                                        		numberOfNormalEvents = 0;
                                        
                                        	}
                                        
                                        
                                        
                                        	numberOfEvents++;
                                        	logger.debug("Event  " + numberOfEvents + " : y : " + y + " : new Date  :  " + newDate)
                                        
                                        
                                        	if (tableEvent.rows[y].severity.toUpperCase() == 'CRITICAL')
                                        		numberOfEventsCritical++;
                                        	else
                                        		numberOfNormalEvents++;
                                        
                                        
                                        	if (tableEvent.rows[y].incident != null && tableEvent.rows[y].incident != '') {
                                        		numberOfIncidents++;
                                        
                                        	}
                                        
                                        // last scanned row save the object in info table
                                        	if (y == tableLengthE - 1) {
                                        
                                        
                                        		var newEntry = new Object();
                                        		newEntry.Date = lastDate;
                                        		newEntry.numberOfNormalEvents = numberOfNormalEvents;
                                        		newEntry.numberOfEvents = numberOfEvents;
                                        		newEntry.numberOfIncidents = numberOfIncidents;
                                        		newEntry.numberOfEventsCritical = numberOfEventsCritical;
                                        		result.AddRow(newEntry);
                                        
                                        	}
                                        
                                        } */
                                        
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetAvailabilityAssetsForCustomer">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        //DEBUG logger.debug("NCRDCSMASHUP::NCR.BaseDeviceHelper::GetAvailabilityForCustomerBySite::customerName:" + customerName + ":startDate:"+ startDate + ":endDate:" + endDate);
                                        /*
                                        GetAvailabilityAssetsForCustomer -> 
                                        GetAvailabilityHHsForCustomer {NCR.DCS.AssetAvailabiltyBySiteAllDS: assetName,siteName,availability}
                                        */
                                        
                                        var params = {
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "NCR.DCS.AssetAvailabiltyBySiteAllDS"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(NCR.DCS.AssetAvailabiltyBySiteAllDS)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        if (customerName == "Ahold-Delhaize") {
                                        	// Call Service GetAvailabilityHHsForCustomer
                                        	var params = {
                                        		endDate: endDate /* DATETIME */,
                                        		customerName: customerName /* STRING */,
                                        		startDate: startDate /* DATETIME */
                                        	};
                                        
                                        	// result: INFOTABLE dataShape: NCR.DCS.AssetAvailabiltyBySiteAllDS
                                        	result = Things["NCR.BaseDeviceHelper"].GetAvailabilityHHsForCustomer(params);
                                        
                                        } else {
                                        	var newRow = new Object();
                                        	newRow.siteName = "";
                                        	newRow.availability = 0;
                                        	newRow.assetName = "";
                                        	result.AddRow(newRow);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetAvailabilityForCustomerBySite">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        //DEBUG logger.debug("NCRDCSMASHUP::NCR.BaseDeviceHelper::GetAvailabilityForCustomerBySite::customerName:" + customerName);
                                        /*
                                        GetAvailabilityForCustomerBySite -> 
                                            GetAvailabilityHHsForCustomerBySite 
                                                {NCR.DCS.AnalyticsAvailForCustBySiteDS: 
                                                    AvailabilityBySiteIT:
                                                        NCR.DCS.AvailabilityBySiteDS {SiteName,Availability}, 
                                                    AssetAvailabiltyBySiteAllIT:
                                                        NCR.DCS.AssetAvailabiltyBySiteAllDS {siteName,assetName,availability}}
                                        
                                        For HH: GetAvailabilityForCustomerBySite -> 
                                                GetAvailabilityHHsForCustomerBySite -> GetAvailabilityHHsForCustomer
                                        */
                                        
                                        var params = {
                                            infoTableName: "InfoTable",
                                            dataShapeName: "NCR.DCS.AnalyticsAvailForCustBySiteDS"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        // Next iterate through the list of Things and Generate Infotable of Availability
                                        if (customerName == "Ahold-Delhaize") {
                                            // Call Service GetAvailabilityHHsForCustomerBySite
                                            var paramsAHFCBS = {
                                        	    endDate: endDate /* DATETIME */,
                                        	    customerName: customerName /* STRING */,
                                        	    startDate: startDate /* DATETIME */
                                            };
                                        
                                            // result: INFOTABLE dataShape: NCR.DCS.AnalyticsAvailForCustBySiteDS
                                            result = Things["NCR.BaseDeviceHelper"].GetAvailabilityHHsForCustomerBySite(paramsAHFCBS);
                                           
                                        } else {
                                        
                                            // NCR.DCS.AvailabilityBySiteDS
                                            var paramsABS = {
                                                infoTableName: "InfoTable",
                                                dataShapeName: "NCR.DCS.AvailabilityBySiteDS"
                                            };
                                        
                                            // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING)
                                            var absIT = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(paramsABS);
                                        
                                            // Create Empty Row
                                            var newRow = new Object();
                                            newRow.SiteName = "";
                                            newRow.Availability = 0;
                                            absIT.AddRow(newRow);
                                        
                                            // NCR.DCS.AssetAvailabiltyBySiteAllDS
                                            var paramsAABSA = {
                                                infoTableName: "InfoTable",
                                                dataShapeName: "NCR.DCS.AssetAvailabiltyBySiteAllDS"
                                            };
                                        
                                            // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING)
                                            var aabsaIT = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(paramsAABSA);
                                        
                                            // Create Empty Row
                                            var newRow = new Object();
                                            newRow.assetName = "";
                                            newRow.siteName = "";
                                            newRow.availability = 0;
                                            aabsaIT.AddRow(newRow);
                                        
                                            // Populate result InfoTable
                                            var newRow = new Object();
                                            newRow.AvailabilityBySiteIT = absIT;
                                            newRow.AssetAvailabiltyBySiteAllIT = aabsaIT;
                                            result.AddRow(newRow);
                                        
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetAvailabilityHHCurrent">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        //DEBUG logger.debug("NCRDCSMASHUP::NCR.BaseDeviceHelper::GetAvailabilityHHCurrent::assetName:" + assetName +":startDate:" + startDate +":endDate:" + endDate);
                                        
                                        if (startDate == undefined) {
                                            endDate = undefined;
                                        }
                                        
                                        var params = {
                                            oldestFirst: false /* BOOLEAN */,
                                            maxItems: 5000 /* NUMBER */,
                                            propertyName: undefined /* STRING */,
                                            endDate: endDate /* DATETIME */,
                                            query: undefined /* QUERY */,
                                            startDate: startDate /* DATETIME */
                                        };
                                        
                                        // result: INFOTABLE dataShape: StringValueStream
                                        var propertyHist = Things[assetName].QueryPropertyHistory(params);
                                        
                                        // Sort by startDate so calculate oldest first from set
                                        var sort = new Object();
                                        sort.name = "timestamp";
                                        sort.ascending = true;
                                        propertyHist.Sort(sort); 
                                        
                                        // Iterate through Infotable
                                        var tableLength = propertyHist.rows.length;
                                        
                                        var result = 0;
                                        var currentAvailability = 100;
                                        var unAvailCount = 0;
                                        
                                        //DEBUG logger.debug("NCRDCSMASHUP::NCR.BaseDeviceHelper::GetAvailabilityHHCurrent::tableLength:" + tableLength);
                                        
                                        if (tableLength == 0) {
                                            currentAvailability = 0;
                                        }
                                        
                                        for (var x = 0; x < tableLength; x++) {
                                            var row = propertyHist.rows[x];
                                        
                                            if (row != null) {               
                                                var soft_running = row.SOFT_Running;
                                                var bat_all = row.BAT_ALL;        
                                                var wifi_all = row.WIFI_ALL;
                                        
                                                // DEBUG
                                                /*
                                                    if (x == 0 || x == (tableLength - 1)) {
                                                        logger.debug("NCRDCSMASHUP::NCR.BaseDeviceHelper::GetAvailabilityHHCurrent::Date Range:" + row.timestamp);
                                                    }
                                                */
                                                // E DEBUG
                                                                       
                                                var unAvailReason = "";
                                                
                                                // SW (which specific software?) is not running; initially just check all SW
                                                if (soft_running && soft_running != null) {
                                                    var objJSONSW = JSON.parse(soft_running);
                                                    if (objJSONSW && objJSONSW != null) {
                                                        //DEBUG logger.debug("NCRDCSMASHUP::NCR.BaseDeviceHelper::GetAvailabilityHHCurrent::JSON.stringify(objJSONSW):" + JSON.stringify(objJSONSW))
                                                        if (JSON.stringify(objJSONSW) == "" || JSON.stringify(objJSONSW) == "{}") {
                                                            unAvailReason = "SW not Running";
                                                        }                
                                                    } else {
                                                        unAvailReason = "SW not Running";
                                                    }
                                                } else {
                                                    unAvailReason = "SW not Running";
                                                }        
                                        
                                                // Battery Level < 1 and Charging = false and Docked = false
                                                if (bat_all && bat_all != null) {
                                                    var objJSONBT = JSON.parse(bat_all);
                                                    if (objJSONBT && objJSONBT != null) {
                                                        if (JSON.stringify(objJSONBT) != "") {
                                                            if (objJSONBT.Level < 20 && 
                                                                objJSONBT.Charging == false && objJSONBT.Docked == false) {
                                                                if (unAvailReason == "") {
                                                                    unAvailReason = "Battery Critical";
                                                                } else {
                                                                    unAvailReason = unAvailReason + ",Battery Critical";
                                                                }
                                                            }      
                                                        }
                                                    } 
                                                }
                                        
                                                // WifiSignalStrength < -90 OR WifiSignalStrengthLevel = Unusable
                                                if (wifi_all && wifi_all != null) {
                                                    var objJSONWF = JSON.parse(wifi_all);
                                                    if (objJSONWF && objJSONWF != null) {
                                                        if (JSON.stringify(objJSONWF) != "") {
                                                            if (objJSONWF.WifiSignalStrengthLevel != null ) {
                                                                if (objJSONWF.WifiSignalStrengthLevel.toUpperCase() == "UNUSABLE" ||
                                                                objJSONWF.WifiSignalStrength < -90) {
                                                                    if (unAvailReason == "") {
                                                                        unAvailReason = "WiFi Signal Unusable";
                                                                    } else {
                                                                        unAvailReason = unAvailReason + ",WiFi Signal Unusable";
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                        
                                                if (unAvailReason != "") {
                                                    unAvailCount = unAvailCount + 1;                      
                                                }
                                        
                                                if (x == 0 && unAvailCount == 1) {
                                                    currentAvailability = 0;
                                                } else {
                                                    currentAvailability = 100 - ((unAvailCount / (x + 1) * 100)); 
                                                }       
                                            }
                                        }
                                        
                                        result = currentAvailability;
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetAvailabilityHHOverTime">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        //DEBUG logger.debug("NCRDCSMASHUP::NCR.BaseDeviceHelper::GetAvailabilityInfoTableHandHeld::assetName:" + assetName +":startDate:" + startDate +":endDate:" + endDate);
                                        
                                        if (startDate == undefined) {
                                            endDate = undefined;
                                        }
                                        
                                        var tableLength = 0;
                                        
                                        var params = {
                                            oldestFirst: false /* BOOLEAN */,
                                            maxItems: 1000 /* NUMBER */,
                                            propertyName: undefined /* STRING */,
                                            endDate: endDate /* DATETIME */,
                                            query: undefined /* QUERY */,
                                            startDate: startDate /* DATETIME */
                                        };
                                        
                                        if (startDate != undefined) {
                                            // result: INFOTABLE dataShape: StringValueStream
                                            var propertyHist = Things[assetName].QueryPropertyHistory(params);
                                        
                                            // Sort by startDate so calculate oldest first from set
                                            var sort = new Object();
                                            sort.name = "timestamp";
                                            sort.ascending = true;
                                            propertyHist.Sort(sort); 
                                        
                                            // Iterate through Infotable
                                            tableLength = propertyHist.rows.length;
                                        }
                                        
                                        var paramsHD = {
                                            infoTableName: "InfoTable",
                                            dataShapeName: "NCR.DCS.AvailabilityHandHeldDS"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(NCR.DCS.PropertyHistoryDS)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(paramsHD);
                                        
                                        var currentAvailability = 100;
                                        var unAvailCount = 0;
                                        
                                        //DEBUG logger.debug("NCRDCSMASHUP::NCR.BaseDeviceHelper::GetAvailabilityInfoTableHandHeld::tableLength:" + tableLength);
                                        
                                        if (tableLength == 0) {
                                            var newRow = new Object();
                                            newRow.timestamp = endDate;
                                            newRow.currentAvailability = 0;
                                            newRow.unAvailReason = "";
                                            result.AddRow(newRow);
                                        }
                                        
                                        for (var x = 0; x < tableLength; x++) {
                                            var row = propertyHist.rows[x];
                                        
                                            if (row != null) {               
                                                var soft_running = row.SOFT_Running;
                                                var bat_all = row.BAT_ALL;        
                                                var wifi_all = row.WIFI_ALL;
                                        
                                                // Create JSON object from String
                                                var newRow = new Object();
                                                newRow.timestamp = row.timestamp;
                                                // DEBUG
                                                /*
                                                    if (x == 0 || x == (tableLength - 1)) {
                                                        logger.debug("NCRDCSMASHUP::NCR.BaseDeviceHelper::GetAvailabilityInfoTableHandHeld::Date Range:" + row.timestamp);
                                                    }
                                                */
                                                // E DEBUG
                                                                       
                                                var unAvailReason = "";
                                                
                                                // SW (which specific software?) is not running; initially just check all SW
                                                if (soft_running && soft_running != null) {
                                                    var objJSONSW = JSON.parse(soft_running);
                                                    if (objJSONSW && objJSONSW != null) {
                                                        //DEBUG logger.debug("NCRDCSMASHUP::NCR.BaseDeviceHelper::GetAvailabilityInfoTableHandHeld::JSON.stringify(objJSONSW):" + JSON.stringify(objJSONSW))
                                                        if (JSON.stringify(objJSONSW) == "" || JSON.stringify(objJSONSW) == "{}") {
                                                            unAvailReason = "SW not Running";
                                                        }                
                                                    } else {
                                                        unAvailReason = "SW not Running";
                                                    }
                                                } else {
                                                    unAvailReason = "SW not Running";
                                                }
                                                
                                        
                                                // Battery Level < 1 and Charging = false and Docked = false
                                                if (bat_all && bat_all != null) {
                                                    var objJSONBT = JSON.parse(bat_all);
                                                    if (objJSONBT && objJSONBT != null) {
                                                        if (JSON.stringify(objJSONBT) != "") {
                                                            if (objJSONBT.Level < 20 && 
                                                                objJSONBT.Charging == false && objJSONBT.Docked == false) {
                                                                if (unAvailReason == "") {
                                                                    unAvailReason = "Battery Critical";
                                                                } else {
                                                                    unAvailReason = unAvailReason + ",Battery Critical";
                                                                }
                                                            }      
                                                        }
                                                    } 
                                                }
                                        
                                                // WifiSignalStrength < -90 OR WifiSignalStrengthLevel = Unusable
                                                if (wifi_all && wifi_all != null) {
                                                    var objJSONWF = JSON.parse(wifi_all);
                                                    if (objJSONWF && objJSONWF != null) {
                                                        if (JSON.stringify(objJSONWF) != "") {
                                                            if (objJSONWF.WifiSignalStrengthLevel != null ) {
                                                                if (objJSONWF.WifiSignalStrengthLevel.toUpperCase() == "UNUSABLE" ||
                                                                objJSONWF.WifiSignalStrength < -90) {
                                                                    if (unAvailReason == "") {
                                                                        unAvailReason = "WiFi Signal Unusable";
                                                                    } else {
                                                                        unAvailReason = unAvailReason + ",WiFi Signal Unusable";
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                        
                                                if (unAvailReason != "") {
                                                    unAvailCount = unAvailCount + 1;                      
                                                }
                                        
                                                if (x == 0 && unAvailCount == 1) {
                                                    currentAvailability = 0;
                                                } else {
                                                    currentAvailability = 100 - ((unAvailCount / (x + 1) * 100)); 
                                                }
                                                 
                                                /* 
                                                if (unAvailReason == "") {
                                                    unAvailReason = "Available";
                                                }
                                                */
                                                
                                                // DEBUG newRow.currentAvailability = 100 - Math.floor(Math.random() * 10);
                                                newRow.currentAvailability = currentAvailability;
                                                newRow.unAvailReason = unAvailReason;
                                                result.AddRow(newRow);
                                            }
                                        }
                                        
                                        // Sort by startDate so calculate oldest first from set
                                        var sortE = new Object();
                                        sortE.name = "timestamp";
                                        sortE.ascending = true;
                                        result.Sort(sortE);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetAvailabilityHHsForCustomer">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        //DEBUG logger.debug("NCRDCSMASHUP::NCR.BaseDeviceHelper::GetAvailabilityHHsForCustomer::customerName:" + customerName);
                                        
                                        // First get a list of all things that implement the NCR.HANDHELD Thing Template that are associated with Customer/Site
                                        var queryC = {
                                                "filters": {
                                                "fieldName": "Customer",
                                                "type": "EQ",
                                                "value": customerName
                                        		}
                                        };
                                            
                                        var params = {
                                        	maxItems: 10000 /* NUMBER */,
                                        	nameMask: undefined /* STRING */,
                                        	query: queryC /* QUERY */,
                                        	tags: undefined /* TAGS */
                                        };
                                        
                                        // result: INFOTABLE dataShape: RootEntityList
                                        var tWD = ThingTemplates["NCR.HANDHELD"].QueryImplementingThingsWithData(params);
                                        
                                        // Sort by startDate so calculate oldest first from set
                                        var sort = new Object();
                                        sort.name = "Asset_StoreIdentifier";
                                        sort.ascending = true;
                                        tWD.Sort(sort);
                                        
                                        // Iterate through Infotable
                                        var tableLength = tWD.rows.length;
                                        
                                        var paramsHD = {
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "NCR.DCS.AssetAvailabiltyBySiteAllDS"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(paramsHD);
                                        
                                        // Next iterate through the list of Things and Generate Infotable of Availability
                                        if (customerName == "Ahold-Delhaize") {	
                                        	
                                        	if (tableLength == 0) {
                                        		var newRow = new Object();
                                        		newRow.assetName = "";
                                        		newRow.siteName = "";
                                        		newRow.availability = 0;
                                        		result.AddRow(newRow);
                                        	} else {
                                        		for (var x = 0; x < tableLength; x++) {
                                        			var row = tWD.rows[x];
                                            		if (row != null) {               
                                        				var newRow = new Object();
                                        				newRow.assetName = row.name;
                                        				if (row.Asset_StoreIdentifier && row.Asset_StoreIdentifier != "") {
                                        					newRow.siteName = row.Asset_StoreIdentifier;
                                        				} else {
                                        					newRow.siteName = "Unknown";
                                        				}			
                                        
                                        				// Call Service NCR.BaseDeviceHelper::GetAvailabilityHHCurrent
                                        				var params = {
                                        					endDate: endDate /* DATETIME */,
                                        					assetName: row.name /* STRING */,
                                        					startDate: startDate /* DATETIME */
                                        				};
                                        
                                        				// result: NUMBER
                                        				var availNum = Things["NCR.BaseDeviceHelper"].GetAvailabilityHHCurrent(params);
                                        				newRow.availability = availNum;
                                        				result.AddRow(newRow);
                                        			}
                                        		}
                                        	}		
                                        
                                        } else {
                                        	var newRow = new Object();
                                        	newRow.assetName = "";
                                        	newRow.siteName = "";
                                        	newRow.availability = 0;		
                                        	result.AddRow(newRow);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetAvailabilityHHsForCustomerBySite">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        //DEBUG logger.debug("NCRDCSMASHUP::NCR.BaseDeviceHelper::GetAvailabilityHHsForCustomerBySite::customerName:" + customerName + ":startDate:"+ startDate + ":endDate:" + endDate);
                                        
                                        // Get Data by calling Service GetAvailabilityHHsForCustomer
                                        var params = {
                                        	endDate: endDate /* DATETIME */,
                                        	customerName: customerName /* STRING */,
                                        	startDate: startDate /* DATETIME */
                                        };
                                        
                                        // result: INFOTABLE dataShape: NCR.DCS.AssetAvailabiltyBySiteAllDS
                                        var availHHsIT = Things["NCR.BaseDeviceHelper"].GetAvailabilityHHsForCustomer(params);
                                        
                                        var params = {
                                        	infoTableName : "InfoTable",
                                        	dataShapeName : "NCR.DCS.AvailabilityBySiteDS"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(NCR.DCS.AvailabilityBySiteDS)
                                        var availBySiteIT = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        // Iterate through InfoTable and calculate Availability by Site and populate InfoTable NCR.DCS.AvailabilityBySiteDS
                                        var tableLength = availHHsIT.rows.length;
                                        // Next iterate through the list of Things and Generate Infotable of Availability
                                        
                                        if (tableLength == 0) {
                                        	var newRow = new Object();
                                        	newRow.SiteName = "";
                                        	newRow.Availability = 0;
                                        	availBySiteIT.AddRow(newRow);
                                        } else {
                                        	
                                        	var siteAvailability = 0;
                                        	var currentSite = "";
                                        	var currentCount = 0;
                                        
                                        	for (var x = 0; x < tableLength; x++) {
                                        		var row = availHHsIT.rows[x];	
                                        
                                        		if (row != null) {
                                        			// If first row
                                        			if (x == 0) {
                                        				// If only 1 row
                                        				if (tableLength == 1) {
                                        					var newRow = new Object();
                                        					newRow.SiteName = row.siteName;
                                        					newRow.Availability = row.availability;
                                        					availBySiteIT.AddRow(newRow);
                                        				} else {
                                        					currentCount = 1;
                                        					currentSite = row.siteName;
                                        					siteAvailability = row.availability;
                                        				}
                                        				
                                        			} else {
                                        				// If same site
                                        				if (row.siteName == currentSite) {
                                        					// If last row
                                        					if (x == (tableLength - 1)) {
                                        						var newRow = new Object();
                                        						newRow.SiteName = currentSite;
                                        						if (siteAvailability == 0) {
                                        							newRow.Availability = "0";
                                        						} else {
                                        							newRow.Availability = siteAvailability / currentCount;
                                        						}
                                        						availBySiteIT.AddRow(newRow);
                                        					} else {
                                        						currentCount = currentCount + 1;
                                        						siteAvailability = siteAvailability + row.availability;
                                        					}					
                                        				} else {
                                        					// If last row
                                        					if (x == (tableLength - 1)) {
                                        						// Process Previous Row
                                        						var newRow = new Object();
                                        						newRow.SiteName = currentSite;
                                        						if (siteAvailability == 0) {
                                        							newRow.Availability = "0";
                                        						} else {
                                        							newRow.Availability = siteAvailability / currentCount;
                                        						}
                                        						availBySiteIT.AddRow(newRow);
                                        						
                                        						// Process last row
                                        						var newRow = new Object();
                                        						newRow.SiteName = row.siteName;
                                        						newRow.Availability = row.availability;
                                        						availBySiteIT.AddRow(newRow);
                                        					} else {
                                        						// Process Previous Row
                                        						var newRow = new Object();
                                        						newRow.SiteName = currentSite;
                                        						if (siteAvailability == 0) {
                                        							newRow.Availability = "0";
                                        						} else {
                                        							newRow.Availability = siteAvailability / currentCount;
                                        						}
                                        						availBySiteIT.AddRow(newRow);
                                        
                                        						// New Site
                                        						currentCount = 1;
                                        						currentSite = row.siteName;
                                        						siteAvailability = row.availability;
                                        					}			
                                        					
                                        				}
                                        			}
                                        		}
                                        	}
                                        }
                                        
                                        // Generate result 
                                        var params = {
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "NCR.DCS.AnalyticsAvailForCustBySiteDS"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(NCR.DCS.AnalyticsAvailForCustBySiteDS)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        var newRow = new Object();
                                        newRow.AvailabilityBySiteIT = availBySiteIT;
                                        newRow.AssetAvailabiltyBySiteAllIT = availHHsIT;
                                        result.AddRow(newRow);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getBluetoothState">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var params = {
                                            propertyName : "BLUETOOTH_Info"
                                        };
                                        
                                        
                                        var invall = Things[assetName].GetStringPropertyValue(params)
                                        
                                        
                                        if (invall == null || invall == '') {
                                            invall = '{ "status" : "","address":"",  "name":"",  "scanMode":0, "state":0}';
                                        }
                                        
                                        // Create JSON object from String
                                        var objJSON = JSON.parse(invall);
                                        
                                        var stateString = objJSON["status"]
                                        logger.debug("status" + stateString)
                                        if (stateString != null || stateString != "") {
                                            if (stateString === "ON")
                                                var result = true
                                            else
                                                result = false
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getBrigtnessMode">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var params = {
                                            propertyName: "BRIGHTNESS_Info" /* STRING */
                                        };
                                        
                                        // result: STRING
                                        var invall = Things[assetName].GetStringPropertyValue(params);
                                        
                                        if (invall == null || invall == '') {
                                            invall = '{"brightness_mode": "","brightness_value": 0}';
                                        }
                                        
                                        // Create JSON object from String
                                        var objJSON = JSON.parse(invall); 
                                        
                                        var result = undefined
                                        var stateString = objJSON["brightness_mode"]
                                        logger.debug("Mode" + stateString)
                                        if(stateString != null || stateString !=""){
                                            if(stateString === "Auto")
                                                 result = true
                                            else
                                                result = false
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetCollectionUsedInfoForDemo">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code></code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetCommandsForAsset">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var params = {
                                        	infoTableName : "InfoTable",
                                        	dataShapeName : "NCR.DCS.RemoteActionCommandsDS"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(NCR.DCS.RemoteActionCommandsDS)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        // Commands
                                        var newEntry = new Object();
                                        
                                        // Get Path from Property Asset_ProgramDir
                                        // Data Directory propertyName: "Asset_DataDir" /* STRING */ 
                                        var paramsPD = {
                                            propertyName: "Asset_ProgramDir" /* STRING */        
                                        };
                                        
                                        var apd = Things[assetName].GetStringPropertyValue(paramsPD);
                                        var progPathDefault = "C:\\Microserver";
                                        var progPath;
                                        if (apd != null && apd != '') {
                                            progPath = apd.replace(/\\/g, '\\');
                                        } else {
                                            progPath = progPathDefault.replace(/\\/g, '\\');
                                        }
                                        // logger.debug("progPath:" + progPath);
                                        // Enclose Path/Commands in Double Quotes
                                        newEntry.CommandName = "MS - Forceful Reboot";
                                        newEntry.Command = '"' + progPath + '\\etc\\custom\\scripts\\NCR.DCS.Windows.Console.exe" PROC Run JSON "cmd" "/c shutdown -f -r -t 10" false';
                                        newEntry.Parameters = '';
                                        result.AddRow(newEntry);
                                        
                                        newEntry.CommandName = "MS - Graceful Reboot";
                                        newEntry.Command = '"' + progPath + '\\etc\\custom\\scripts\\NCR.DCS.Windows.Console.exe" PROC Run JSON "cmd" "/c %%PROGRAM_LOCATION_FILES%%\\NCR APTRA\\SM Primitives\\SSTManage.exe" /LC abc 6" false';
                                        newEntry.Parameters = '';
                                        result.AddRow(newEntry);
                                        
                                        newEntry.CommandName = "MS - Restart McAfee Services";
                                        newEntry.Command = '"' + progPath + '\\etc\\custom\\scripts\\NCR.DCS.Windows.Console.exe" SVC Stop JSON McAfeeFramework && "' + progPath + '\\etc\\custom\\scripts\\NCR.DCS.Windows.Console.exe" SVC Start JSON McAfeeFramework';
                                        newEntry.Parameters = '';
                                        result.AddRow(newEntry);
                                        
                                        newEntry.CommandName = "MS - Restart CAF Services";
                                        newEntry.Command = '"' + progPath + '\\etc\\custom\\scripts\\NCR.DCS.Windows.Console.exe SVC Stop JSON caf && "' + progPath + '\\etc\\custom\\scripts\\NCR.DCS.Windows.Console.exe" SVC Stop JSON WmiApSrv && ' + progPath + '\\etc\\custom\\scripts\\NCR.DCS.Windows.Console.exe SVC Start JSON caf && ' + progPath + '\\etc\\custom\\scripts\\NCR.DCS.Windows.Console.exe SVC Start JSON WmiApSrv';
                                        newEntry.Parameters = '';
                                        result.AddRow(newEntry);
                                        
                                        newEntry.CommandName = "MS - Restart CCM Services";
                                        newEntry.Command = '"' + progPath + '\\etc\\custom\\scripts\\NCR.DCS.Windows.Console.exe SVC Stop JSON CcmExec && "'+ progPath + '\\etc\\custom\\scripts\\NCR.DCS.Windows.Console.exe" SVC Stop JSON WmiApSrv && "' + progPath + '\\etc\\custom\\scripts\\NCR.DCS.Windows.Console.exe" SVC Stop JSON WMI && "' + progPath + '\\etc\\custom\\scripts\\NCR.DCS.Windows.Console.exe" SVC Stop JSON BITS && "' + progPath + '\\etc\\custom\\scripts\\NCR.DCS.Windows.Console.exe" SVC Stop JSON winmgmt && "' + progPath + '\\etc\\custom\\scripts\\NCR.DCS.Windows.Console.exe" SVC Start JSON CcmExec && "' + progPath + '\\etc\\custom\\scripts\\NCR.DCS.Windows.Console.exe" SVC Start JSON WmiApSrv && "' + progPath + '\\etc\\custom\\scripts\\NCR.DCS.Windows.Console.exe" SVC Start JSON WMI && "' + progPath + '\\etc\\custom\\scripts\\NCR.DCS.Windows.Console.exe" SVC Start JSON BITS && "' + progPath + '\\etc\\custom\\scripts\\NCR.DCS.Windows.Console.exe" SVC Start JSON winmgmt';
                                        newEntry.Parameters = '';
                                        result.AddRow(newEntry);
                                        
                                        // newEntry.CommandName = "MS - Restart MG Soft Services";
                                        // newEntry.Command = '';
                                        // newEntry.Parameters = '';
                                        // result.AddRow(newEntry);
                                        
                                        newEntry.CommandName = "MS - PortQuery SCCM";
                                        newEntry.Command = '"' + progPath + '\\etc\\custom\\scripts\\NCR.DCS.Windows.Console.exe" NET Query JSON "192.127.2.51:80,192.127.2.54:80,192.127.2.80:80,192.127.2.69:80,192.127.2.68:80,192.127.2.155:80,192.127.2.157:80,192.127.2.159:80,192.127.2.79:80,192.127.2.51:443,192.127.2.54:443,192.127.2.80:443,192.127.2.69:443,192.127.2.68:443,192.127.2.155:443,192.127.2.157:443,192.127.2.159:443,192.127.2.79:443 5" && "' + progPath + '\\etc\\custom\\scripts\\NCR.DCS.Windows.Console.exe" NET Netstat JSON';
                                        newEntry.Parameters = '';
                                        result.AddRow(newEntry);
                                        
                                            newEntry.CommandName = "MS - PortQuery AV 2.5";
                                            newEntry.Command = '"' + progPath + '\\etc\\custom\\scripts\\NCR.DCS.Windows.Console.exe" NET Query JSON "192.127.229.142:8443,192.127.229.141:8443,192.127.229.120:8443,192.127.229.150:8443,192.127.229.151:8443,192.127.229.140:8443,192.127.229.96:8443" && "' + progPath + '\\etc\\custom\\scripts\\NCR.DCS.Windows.Console.exe" NET Netstat JSON';
                                            newEntry.Parameters = '';
                                            result.AddRow(newEntry);
                                        
                                            newEntry.CommandName = "MS - PortQuery EJ";
                                            newEntry.Command = '"' + progPath + '\\etc\\custom\\scripts\\NCR.DCS.Windows.Console.exe" NET Query JSON "192.127.254.79:11000,192.127.254.80:11000,192.127.254.81:11000,192.127.254.79:12500,192.127.254.80:12500,192.127.254.81:12500,192.127.254.79:443,192.127.254.80:443,192.127.254.81:443 5" && "' + progPath + '\\etc\\custom\\scripts\\NCR.DCS.Windows.Console.exe" NET Netstat JSON';
                                            newEntry.Parameters = '';
                                            result.AddRow(newEntry);
                                        
                                            newEntry.CommandName = "MS - PortQuery EPM 1.3";
                                            newEntry.Command = '"' + progPath + '\\etc\\custom\\scripts\\NCR.DCS.Windows.Console.exe" NET Query JSON "192.127.229.125:4728,192.127.229.122:4728,192.127.229.126:4728,192.127.229.139:4728,192.127.229.125:7163,192.127.229.122:7163,192.127.229.126:7163,192.127.229.139:7163 5" && "' + progPath + '\\etc\\custom\\scripts\\NCR.DCS.Windows.Console.exe" NET Netstat JSON';
                                            newEntry.Parameters = '';
                                            result.AddRow(newEntry);
                                        
                                            newEntry.CommandName = "MS - PortQuery EPM 2.3";
                                            newEntry.Command = '"' + progPath + '\\etc\\custom\\scripts\\NCR.DCS.Windows.Console.exe" NET Query JSON "192.127.229.175:80,192.127.229.176:80,192.127.229.177:80,192.127.229.178:80,192.127.229.179:80,192.127.229.180:80,192.127.229.243:443,192.127.229.244:443,192.127.229.245:443,192.127.229.246:443,192.127.229.247:443,192.127.229.248:443,192.127.229.249:443,192.127.229.251:443 5" && "' + progPath + '\\etc\\custom\\scripts\\NCR.DCS.Windows.Console.exe" NET Netstat JSON';
                                            newEntry.Parameters = '';
                                            result.AddRow(newEntry);
                                        
                                            newEntry.CommandName = "MS - PortQuery EPO";
                                            newEntry.Command = '"' + progPath + '\\etc\\custom\\scripts\\NCR.DCS.Windows.Console.exe" NET Query JSON "192.127.2.108:443,192.127.2.120:443 5" && "' + progPath + '\\etc\\custom\\scripts\\NCR.DCS.Windows.Console.exe" NET Netstat JSON';
                                            newEntry.Parameters = '';
                                            result.AddRow(newEntry);
                                        
                                            newEntry.CommandName = "MS - Netstat";
                                            newEntry.Command = '"' + progPath + '\\etc\\custom\\scripts\\NCR.DCS.Windows.Console.exe" NET Netstat JSON';
                                            newEntry.Parameters = '';
                                            result.AddRow(newEntry);
                                        
                                        if (assetType == 'ATM') {
                                        	    
                                        } else if (assetType == 'POS') {
                                            
                                        } else {
                                            
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetCompanyAssetHierarchy">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        // DEBUG logger.debug("NCRDCSMASHUP::NCR.BaseDeviceHelper::GetCompanyAssetHierarchy::customerName:" + customerName + ":siteName:" + siteName + ":assetName:" + assetName + ":assetType:" + assetType + ":assetID:" + assetID + ":assetTag:" + assetTag + ":assetSerialNumber:" + assetSerialNumber );
                                        
                                        // DEBUG assetType = "LAPTOP";
                                        
                                        var queryC = undefined;
                                        var maxItems = 5000;
                                        // Query
                                        if (customerName == undefined && siteName == undefined && assetName == undefined 
                                            && assetType == undefined && assetID == undefined && assetID == undefined 
                                            && assetTag == undefined && assetSerialNumber == undefined) {
                                            var queryC = {
                                                "filters": {
                                                    "fieldName": "Customer",
                                                    "type": "NE",
                                                    "value": ""
                                                }
                                            };
                                            maxItems = 1000;
                                        } else {
                                            var queryC = {
                                                "filters": {
                                                    "type": "And",
                                                    "filters": [{
                                                        "type": "NE",
                                                        "fieldName": "Customer",
                                                        "value": "TEST"
                                                    }]
                                                },
                                                "sorts": [{
                                                    "fieldName": "Customer",
                                                    "isAscending": "false"
                                                }]
                                            };    
                                        
                                            if (customerName && customerName != '') {
                                                queryC.filters.filters.push({
                                                    "fieldName": "Customer",
                                                    "type": "EQ",
                                                    "value": customerName
                                                });
                                            }
                                            
                                            if (siteName && siteName != '') {
                                                queryC.filters.filters.push({
                                                    "fieldName": "Asset_StoreIdentifier",
                                                    "type": "LIKE",
                                                    "value": "%" + siteName + "%"
                                                });
                                            }    
                                            
                                            if (assetName && assetName != '') {
                                                queryC.filters.filters.push({
                                                    "fieldName": "name",
                                                    "type": "LIKE",
                                                    "value": "%" + assetName + "%"
                                                });
                                            }
                                        
                                            if (assetType && assetType != '') {
                                                queryC.filters.filters.push({
                                                    "fieldName": "Asset_Type",
                                                    "type": "EQ",
                                                    "value": assetType
                                                });
                                            }
                                        
                                            if (assetID && assetID != '') {
                                                queryC.filters.filters.push({
                                                    "fieldName": "Asset_ID",
                                                    "type": "LIKE",
                                                    "value": "%" + assetID + "%"
                                                });
                                            }
                                        
                                            if (assetTag && assetTag != '') {
                                                queryC.filters.filters.push({
                                                    "fieldName": "Asset_Tag",
                                                    "type": "LIKE",
                                                    "value": "%" + assetTag + "%"
                                                });
                                            }
                                        
                                            if (assetSerialNumber && assetSerialNumber != '') {
                                                queryC.filters.filters.push({
                                                    "fieldName": "Asset_Serial_Number",
                                                    "type": "LIKE",
                                                    "value": "%" + assetSerialNumber + "%"
                                                });
                                            }
                                            
                                        }
                                        
                                        var params = {
                                            maxItems: maxItems   /* NUMBER */,
                                            nameMask: undefined /* STRING */,
                                            query: queryC /* QUERY */,
                                            tags: undefined /* TAGS */
                                        };
                                        
                                        // result: INFOTABLE dataShape: RootEntityList
                                        var bdData = ThingTemplates["NCR.BaseDevice"].QueryImplementingThingsWithData(params);
                                        
                                        /*
                                        // Use QueryImplementingThingsWithData() since can set maxItems
                                        // result: INFOTABLE dataShape: RootEntityList
                                        var bdData = ThingTemplates["NCR.BaseDevice"].GetImplementingThingsWithData();
                                        */
                                        
                                        // DEBUG logger.debug("NCRDCSMASHUP::NCR.BaseDeviceHelper::GetCompanyAssetHierarchy::bdData.rows.length:" + bdData.rows.length);
                                        
                                        // Sort results by Customer
                                        var sort = new Object();
                                        sort.name = "Customer";
                                        sort.ascending = false;
                                        bdData.Sort(sort);
                                        
                                        // Create Empty InfoTable
                                        var params = {
                                            infoTableName: "InfoTable",
                                            dataShapeName: "NCR.DCS.HierarchyDS"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(NCR.DCS.HierarchyDS)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        var tableLength = bdData.rows.length;
                                        for (var y = 0; y < tableLength; y++) {
                                            var sc = bdData.rows[y];
                                        
                                            // Customer - Parent Row
                                            var crName = "";
                                            if (y != 0) {
                                                if (bdData.rows[y - 1].Customer != sc.Customer) {
                                                    var newRow = new Object();
                                                    newRow.parentName = "";
                                                    newRow.entityState = "Customer";
                                                    if (!sc.Customer || sc.Customer == '') {
                                                        newRow.name = "Unknown";
                                                        newRow.displayName = "Unknown";
                                                        newRow.toolTipLabel = "";
                                                        crName = "Unknown";
                                                    } else {
                                                        newRow.name = sc.Customer;
                                                        if (sc.Customer.length > 20) {
                                                            newRow.displayName = sc.Customer.substr(0, 20) + "...";
                                                            newRow.toolTipLabel = sc.Customer;
                                                        } else {
                                                            newRow.displayName = sc.Customer;
                                                            newRow.toolTipLabel = "";
                                                        }
                                                        crName = sc.Customer;
                                                    }
                                                    
                                                    newRow.type = '';
                                                    newRow.sortBy = crName + "1";
                                        
                                                    result.AddRow(newRow);
                                                }
                                        
                                            } else {
                                                var newRow = new Object();
                                                newRow.parentName = "";
                                                newRow.entityState = "Customer";
                                                if (!sc.Customer || sc.Customer == '') {
                                                    newRow.name = "Unknown";
                                                    newRow.displayName = "Unknown";
                                                    newRow.toolTipLabel = "";
                                                    crName = "Unknown";
                                                } else {
                                                    newRow.name = sc.Customer;
                                                    if (sc.Customer.length > 20) {
                                                        newRow.displayName = sc.Customer.substr(0, 20) + "...";
                                                        newRow.toolTipLabel = sc.Customer;
                                                    } else {
                                                        newRow.displayName = sc.Customer;
                                                        newRow.toolTipLabel = "";
                                                    }
                                                    crName = sc.Customer;
                                                }
                                                
                                                newRow.type = '';
                                                newRow.sortBy = crName + "1";
                                        
                                                result.AddRow(newRow);
                                            }
                                        
                                            // Site Row 
                                            if (y != 0) {
                                                var srCustN = "";
                                                var srSiteN = "";
                                        
                                                if (!sc.Customer || sc.Customer == '') {
                                                    srCustN = "Unknown";
                                                } else {
                                                    srCustN = sc.Customer;
                                                }
                                        
                                                if (!sc.Asset_StoreIdentifier || sc.Asset_StoreIdentifier == '') {
                                                    srSiteN = "SiteUnknown";
                                                } else {
                                                    srSiteN = sc.Asset_StoreIdentifier;
                                        
                                                }
                                        
                                                // Check to see if row already exits (can use var checkIfSiteExitIT = InfoTable.Find(yourRowValueObjectHere))         
                                                var newRowSR = new Object();
                                                var vc = new Object();
                                                vc.parentName = srCustN;
                                                vc.entityState = "Site";
                                                vc.name = srCustN + srSiteN;
                                                // vc.displayName = sc.Asset_StoreIdentifier;
                                                // vc.toolTipLabel = srSiteN;
                                                vc.type = "";
                                        
                                                newRowSR = result.Find(vc);
                                        
                                                if (newRowSR == null) {
                                                    // New Site Row           
                                                    var newRow = new Object();
                                                    newRow.parentName = srCustN;
                                                    newRow.entityState = "Site";
                                                    newRow.name = srCustN + srSiteN;
                                        
                                                    if (!sc.Asset_StoreIdentifier || sc.Asset_StoreIdentifier == '') {
                                                        newRow.displayName = "SiteUnknown";
                                                        newRow.toolTipLabel = "";
                                                    } else {
                                                        if (sc.Asset_StoreIdentifier.length > 20) {
                                                            newRow.displayName = sc.Asset_StoreIdentifier.substr(0, 20) + "...";
                                                            newRow.toolTipLabel = sc.Asset_StoreIdentifier;
                                                        } else {
                                                            newRow.displayName = sc.Asset_StoreIdentifier;
                                                            newRow.toolTipLabel = "";
                                                        }
                                                        
                                                    }
                                                    newRow.type = '';
                                                    newRow.sortBy = srCustN + "2" + srSiteN;
                                                    result.AddRow(newRow);
                                                }
                                        
                                            } else {
                                        
                                                var custN = "";
                                                var siteN = "";
                                                var newRow = new Object();
                                                if (!sc.Customer || sc.Customer == '') {
                                                    custN = "Unknown";
                                                } else {
                                                    custN = sc.Customer;
                                                }
                                                newRow.parentName = custN;
                                        
                                                newRow.entityState = "Site";
                                                if (!sc.Asset_StoreIdentifier || sc.Asset_StoreIdentifier == '') {
                                                    siteN = "SiteUnknown";
                                                    newRow.displayName = "SiteUnknown";
                                                    newRow.toolTipLabel = "";
                                                } else {
                                                    siteN = sc.Asset_StoreIdentifier;
                                                    if (sc.Asset_StoreIdentifier.length > 20) {
                                                        newRow.displayName = sc.Asset_StoreIdentifier.substr(0, 20) + "...";
                                                        newRow.toolTipLabel = sc.Asset_StoreIdentifier;
                                                    } else {
                                                        newRow.displayName = sc.Asset_StoreIdentifier;
                                                        newRow.toolTipLabel = "";
                                                    }
                                                }
                                                newRow.name = custN + siteN;        
                                                newRow.type = '';
                                                newRow.sortBy = custN + "2" + siteN;
                                        
                                                result.AddRow(newRow);
                                            }
                                        
                                            // Asset Type Row
                                            var arCustN = "";
                                            var arSiteN = "";
                                            var arTypeN = "";
                                        
                                            if (!sc.Customer || sc.Customer == '') {
                                                arCustN = "Unknown";
                                            } else {
                                                arCustN = sc.Customer;
                                            }
                                            if (!sc.Asset_StoreIdentifier || sc.Asset_StoreIdentifier == '') {
                                                arSiteN = "SiteUnknown";
                                        
                                            } else {
                                                arSiteN = sc.Asset_StoreIdentifier;
                                        
                                            }
                                            if (!sc.Asset_Type || sc.Asset_Type == '') {
                                                arTypeN = "Undefined";
                                            } else {
                                                arTypeN = sc.Asset_Type;
                                            }
                                        
                                            if (y != 0) {
                                        
                                                // Check if row exists for this Type
                                                var newRowAR = new Object();
                                                var vcAR = new Object();
                                        
                                                vcAR.entityState = "AssetType";
                                                vcAR.parentName = arCustN + arSiteN;
                                                vcAR.name = arCustN + arSiteN + arTypeN;
                                                // vc.toolTipLabel = arTypeN;
                                                // vc.displayName = arTypeN;       
                                                vcAR.type = arTypeN;
                                        
                                                newRowAR = result.Find(vcAR);
                                        
                                                if (newRowAR == null) {
                                                    // New Asset Type row           
                                                    var newRow = new Object();
                                                    newRow.entityState = "AssetType";
                                                    newRow.parentName = arCustN + arSiteN;
                                                    // Name should include Customer and Site Name to make unique across all customers        
                                                    newRow.name = arCustN + arSiteN + arTypeN;
                                        
                                                    if (sc.Asset_Type != '') {
                                                        if (sc.Asset_Type.length > 20) {
                                                            newRow.displayName = sc.Asset_Type.substr(0, 20) + "...";
                                                            newRow.toolTipLabel = sc.Asset_Type;
                                                        } else {
                                                            newRow.displayName = sc.Asset_Type;
                                                            newRow.toolTipLabel = "";
                                                        }
                                                    } else {
                                                        newRow.displayName = "Undefined";
                                                        newRow.toolTipLabel = "";
                                                    }
                                                    
                                                    newRow.type = arTypeN;
                                                    newRow.sortBy = arCustN + "3" + arSiteN + arTypeN;
                                        
                                                    result.AddRow(newRow);
                                                }
                                        
                                            } else {
                                        
                                                var newRow = new Object();
                                        
                                                newRow.entityState = "AssetType";
                                                newRow.parentName = arCustN + arSiteN
                                                newRow.name = arCustN + arSiteN + arTypeN;
                                                
                                                if (sc.Asset_Type != '') {
                                                    if (sc.Asset_Type.length > 20) {
                                                        newRow.displayName = sc.Asset_Type.substr(0, 20) + "...";
                                                        newRow.toolTipLabel = sc.Asset_Type;
                                                    } else {
                                                        newRow.displayName = sc.Asset_Type;
                                                        newRow.toolTipLabel = "";
                                                    }
                                                } else {
                                                    newRow.displayName = "Undefined";
                                                    newRow.toolTipLabel = "";
                                                }
                                        
                                                newRow.type = arTypeN;
                                                newRow.sortBy = arCustN + "3" + arSiteN + arTypeN;
                                                result.AddRow(newRow);
                                            }
                                        
                                            // Asset - Child Row 
                                            var newRow = new Object();
                                        
                                            newRow.parentName = arCustN + arSiteN + arTypeN;
                                        
                                            // 05-04-18 Handheld not showing correctly if (sc.isConnected) {
                                            if (sc.isConnected == true) {
                                                // Set Asset:Unhealthy for ATM if ATM Status has in the JSON string "Attention"
                                                if (sc.Asset_Type == 'ATM') {
                                        
                                                    var invall = "";
                                        
                                                    try {
                                        
                                                        // Get Properties for Thing
                                                        var params = {
                                                            propertyName: "ATMCMP_STATUSALL" /* STRING */
                                                        };
                                                        // result: STRING
                                                        invall = Things[sc.name].GetStringPropertyValue(params);
                                                    } catch (e) {
                                                        logger.debug("NCRDCSMASHUP::NCR.BaseDeviceHelper::GetCompanyAssetHierarchy::Error:" + e.toString());
                                                    }
                                        
                                                    if (invall.indexOf("Attention Soon") > - 1) {
                                                        newRow.entityState = "Asset:Unhealthy";
                                                    } else {
                                                        newRow.entityState = "Asset:Connected";
                                                    }
                                                } else {
                                                    newRow.entityState = "Asset:Connected";
                                                }
                                            } else {
                                                newRow.entityState = "Asset:Disconnected";
                                            }
                                        
                                            newRow.name = sc.name;    
                                        
                                            // Use Computer Name (CS_ALL:Caption) instead of Thing Name
                                            var computerName = "";
                                        
                                            if (sc.Asset_Type.toUpperCase() == 'ATM' || sc.Asset_Type.toUpperCase() == 'POS'
                                                || sc.Asset_Type.toUpperCase() == 'LAPTOP' || sc.Asset_Type.toUpperCase() == 'BOSERVER' 
                                                || sc.Asset_Type.toUpperCase() == 'MGMTSERVER') {
                                                var params = {
                                                    assetName: sc.name /* STRING */
                                                };
                                        
                                                // result: INFOTABLE dataShape: NCR.ComputerSystemDS
                                                var cs_all = Things["NCR.BaseDeviceHelper"].GetPropertiesForComputerSystem(params);
                                                if (cs_all[0].Caption && cs_all[0].Caption != undefined) {
                                                    computerName = cs_all[0].Caption;
                                                }
                                        
                                            }
                                        
                                            // DEBUG logger.debug("NCRDCSMASHUP::NCR.BaseDeviceHelper::GetCompanyAssetHierarchy:computerName:" + computerName);
                                            if (computerName != "") {
                                                if (computerName.length > 27) {
                                                    newRow.displayName = computerName.substr(0, 27) + "...";
                                                } else {
                                                    newRow.displayName = computerName;            
                                                }
                                                newRow.toolTipLabel = computerName;
                                            } else {
                                                if (sc.name.length > 27) {
                                                    newRow.displayName = sc.name.substr(0, 27) + "...";            
                                                } else {
                                                    newRow.displayName = sc.name;
                                                }
                                                newRow.toolTipLabel = sc.name;
                                            }
                                        
                                            newRow.type = sc.Asset_Type;
                                            newRow.sortBy = arCustN + "4" + arSiteN + arTypeN + sc.name;
                                        
                                            result.AddRow(newRow);
                                        }
                                        
                                        // Sort to organize as network
                                        var sortL = new Object();
                                        sortL.name = "sortBy";
                                        sortL.ascending = true;
                                        result.Sort(sortL);
                                        
                                        // Remove sortBy field since not needed for Tree Grid
                                        result.RemoveField("sortBy");
                                        
                                        // DEBUG 
                                        /*
                                        // Create Empty InfoTable
                                        var paramsDIT = {
                                            infoTableName: "InfoTable",
                                            dataShapeName: "NCR.DCS.HierarchyDS"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(NCR.DCS.HierarchyDS)
                                        var debugIT = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(paramsDIT);
                                        var newRow = new Object();
                                        
                                        newRow.entityState = "Customer:Connected";
                                        newRow.parentName = "";
                                        newRow.name = "AHD";
                                        newRow.toolTipLabel = "AHD";
                                        newRow.displayName = "AHD";
                                        newRow.type = "";
                                        debugIT.AddRow(newRow);
                                        
                                        newRow.entityState = "Site:Connected";
                                        newRow.parentName = "AHD";
                                        newRow.name = "AHDAHD001";
                                        newRow.toolTipLabel = "AHD001";
                                        newRow.displayName = "AHD001";
                                        newRow.type = "";
                                        debugIT.AddRow(newRow);
                                        
                                        newRow.entityState = "AssetType:Connected";
                                        newRow.parentName = "AHDAHD001";
                                        newRow.name = "AHDAHD001HANDHELD";
                                        newRow.toolTipLabel = "HANDHELD";
                                        newRow.displayName = "HANDHELD";
                                        newRow.type = "";
                                        debugIT.AddRow(newRow);
                                        
                                        newRow.entityState = "AssetType:Connected";
                                        newRow.parentName = "AHDAHD001";
                                        newRow.name = "AHDAHD001ATM";
                                        newRow.toolTipLabel = "ATM";
                                        newRow.displayName = "ATM";
                                        newRow.type = "";
                                        debugIT.AddRow(newRow);
                                        
                                        newRow.entityState = "Asset:Disconnected";
                                        newRow.parentName = "AHDAHD001HANDHELD";
                                        newRow.name = "AHD40506779954d8daa";
                                        newRow.toolTipLabel = "AHD40506779954d8daa";
                                        newRow.displayName = "AHD40506779954d...";
                                        newRow.type = "HANDHELD";
                                        debugIT.AddRow(newRow);
                                        
                                        newRow.entityState = "Asset:Unhealthy";
                                        newRow.parentName = "AHDAHD001ATM";
                                        newRow.name = "WHQ_00_07_32_45_6E_09";
                                        newRow.toolTipLabel = "WHQ_00_07_32_45_6E_09";
                                        newRow.displayName = "ATM171";
                                        newRow.type = "ATM";
                                        debugIT.AddRow(newRow);
                                        
                                        newRow.entityState = "Customer:Connected";
                                        newRow.parentName = "";
                                        newRow.name = "NCR Corporation";
                                        newRow.toolTipLabel = "NCR Corporation";
                                        newRow.displayName = "NCR Corporation";
                                        newRow.type = "";
                                        debugIT.AddRow(newRow);
                                        
                                        newRow.entityState = "Site:Connected";
                                        newRow.parentName = "NCR Corporation";
                                        newRow.name = "NCR CorporationNCR001";
                                        newRow.toolTipLabel = "NCR001";
                                        newRow.displayName = "NCR001";
                                        newRow.type = "";
                                        debugIT.AddRow(newRow);
                                        
                                        newRow.entityState = "Site:Connected";
                                        newRow.parentName = "NCR Corporation";
                                        newRow.name = "NCR CorporationNCR002";
                                        newRow.toolTipLabel = "NCR002";
                                        newRow.displayName = "NCR002";
                                        newRow.type = "";
                                        debugIT.AddRow(newRow);
                                        
                                        newRow.entityState = "AssetType:Connected";
                                        newRow.parentName = "NCR CorporationNCR001";
                                        newRow.name = "NCR CorporationNCR001LAPTOP";
                                        newRow.toolTipLabel = "LAPTOP";
                                        newRow.displayName = "LAPTOP";
                                        newRow.type = "LAPTOP";
                                        debugIT.AddRow(newRow);
                                        
                                        newRow.entityState = "AssetType:Connected";
                                        newRow.parentName = "NCR CorporationNCR001";
                                        newRow.name = "NCR CorporationNCR001ATM";
                                        newRow.toolTipLabel = "ATM";
                                        newRow.displayName = "ATM";
                                        newRow.type = "ATM";
                                        debugIT.AddRow(newRow);
                                        
                                        newRow.entityState = "Asset:Disconnected";
                                        newRow.parentName = "NCR CorporationNCR001LAPTOP";
                                        newRow.name = "DIS_30_0E_D5_2A_A0_ED";
                                        newRow.toolTipLabel = "DIS_30_0E_D5_2A_A0_ED";
                                        newRow.displayName = "DIS_30";
                                        newRow.type = "LAPTOP";
                                        debugIT.AddRow(newRow);
                                        
                                        newRow.entityState = "Asset:Disconnected";
                                        newRow.parentName = "NCR CorporationNCR001ATM";
                                        newRow.name = "ATM001";
                                        newRow.toolTipLabel = "ATM001";
                                        newRow.displayName = "ATM001";
                                        newRow.type = "ATM";
                                        debugIT.AddRow(newRow);
                                        
                                        newRow.entityState = "AssetType:Connected";
                                        newRow.parentName = "NCR CorporationNCR002";
                                        newRow.name = "NCR CorporationNCR002LAPTOP";
                                        newRow.toolTipLabel = "LAPTOP";
                                        newRow.displayName = "LAPTOP";
                                        newRow.type = "LAPTOP";
                                        debugIT.AddRow(newRow);
                                        
                                        newRow.entityState = "AssetType:Connected";
                                        newRow.parentName = "NCR CorporationNCR002";
                                        newRow.name = "NCR CorporationNCR002ATM";
                                        newRow.toolTipLabel = "ATM";
                                        newRow.displayName = "ATM";
                                        newRow.type = "ATM";
                                        debugIT.AddRow(newRow);
                                        
                                        newRow.entityState = "Asset:Disconnected";
                                        newRow.parentName = "NCR CorporationNCR002LAPTOP";
                                        newRow.name = "LBG_00_23_24_4F_1D_9E";
                                        newRow.toolTipLabel = "LBG_00_23_24_4F_1D_9E";
                                        newRow.displayName = "NCR-G7OG93DS74C";
                                        newRow.type = "LAPTOP";
                                        debugIT.AddRow(newRow);
                                        
                                        newRow.entityState = "Asset:Disconnected";
                                        newRow.parentName = "NCR CorporationNCR002ATM";
                                        newRow.name = "ATM002";
                                        newRow.toolTipLabel = "ATM002";
                                        newRow.displayName = "ATM002";
                                        newRow.type = "ATM";
                                        debugIT.AddRow(newRow);
                                        
                                        result = debugIT;
                                        
                                        // Create Empty InfoTable
                                        var paramsDITSiteRow = {
                                            infoTableName: "InfoTable",
                                            dataShapeName: "NCR.DCS.HierarchyDS"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(NCR.DCS.HierarchyDS)
                                        var debugITSiteRow = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(paramsDITSiteRow);
                                        
                                        // Get Infotable of only 1 row if exists, used to check if need to create new site or asset type row
                                        var newRowSR = new Object();
                                        var vc = new Object();
                                        vc.entityState = "Asset:Disconnected";
                                        vc.parentName = "NCR CorporationNCR002LAPTOP";
                                        vc.name = "LBG_00_23_24_4F_1D_9E";
                                        vc.toolTipLabel = "LBG_00_23_24_4F_1D_9E";
                                        //vc.displayName = "NCR-G7OG93DS74C";
                                        vc.type = "LAPTOP";
                                        
                                        newRowSR = result.Find(vc);
                                        debugITSiteRow.AddRow(newRowSR);
                                        
                                        //DEBUG 
                                        logger.debug("NCRDCSMASHUP::NCR.BaseDeviceHelper::GetCompanyAssetHierarchy::newRowSR:" + newRowSR);
                                        
                                        result = debugITSiteRow;
                                        
                                        */
                                        
                                        // DEBUG logger.debug("NCRDCSMASHUP::NCR.BaseDeviceHelper::GetCompanyAssetHierarchy::Completed");
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getComponentMenu">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        //var menuItems  = Menus['NCR.DCS.AssetComponentMenu-b0312sod'].GetMenuItems();
                                        
                                        var menuItems = Menus["NCR.DCS.AssetComponentMenu-b0312sod"].GetEffectiveMenu();
                                        
                                        var result = menuItems;
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetCPUGaugeValDispStr">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        // var result = Math.floor(Math.random() * 101); 
                                        // Get Data from JSON string stored in CPU_ALL property Name
                                        
                                        var params = {
                                        	propertyName: "CPU_ALL" /* STRING */
                                        };
                                        
                                        // result: STRING
                                        var invall;
                                        if (assetName && assetName != '') {
                                        	invall = Things[assetName].GetStringPropertyValue(params);
                                        } else {
                                            invall = '';
                                        }
                                        
                                        if (invall && invall != "") {	
                                            if (invall.indexOf("[") != 0) {
                                                invall = "[" + invall + "]";
                                            }    
                                        } 
                                        
                                        if (invall == null || invall =='') {
                                            invall = '[{"Name":""}]';
                                        }
                                        
                                        // Create JSON object from String
                                        var objJSON = JSON.parse(invall); 
                                        
                                        var result = objJSON[0].Name;
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetCurrentIPAddress">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        // result: STRING
                                        var IPAddress = Resources["CurrentSessionInfo"].GetCurrentIPAddress();
                                        
                                        var result = IPAddress;
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetCurrentUserGroups">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        // Restrict access to specific  groups
                                        // result: INFOTABLE dataShape: EntityList
                                        var result = Resources["CurrentSessionInfo"].GetCurrentUserGroups();
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetCustomerAssetType">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var queryC = {
                                            "filters": {
                                                "type": "And",
                                                "filters": [{
                                                    "type": "EQ",
                                                    "fieldName": "Customer",
                                                    "value": customerName
                                                }]
                                            },
                                            "sorts": [{
                                                "fieldName": "Customer",
                                                "isAscending": "false"
                                            }]
                                        };
                                        
                                        var params = {
                                            maxItems: 1000   /* NUMBER */,
                                            nameMask: undefined /* STRING */,
                                            query: queryC /* QUERY */,
                                            tags: undefined /* TAGS */
                                        };
                                        
                                        // result: INFOTABLE dataShape: RootEntityList
                                        var bdData = ThingTemplates["NCR.BaseDevice"].QueryImplementingThingsWithData(params);
                                        var sort = new Object();
                                        sort.name = "Asset_Type";
                                        sort.ascending = true;
                                        bdData.Sort(sort);
                                        
                                        
                                        
                                        var paramsDS = {
                                            infoTableName: "InfoTable",
                                        	dataShapeName : "NCR.DCS.CustomerAssetTypeDS"
                                        };
                                        
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(paramsDS)
                                        
                                        var tableLength = bdData.rows.length;
                                        logger.debug("tableLength" + tableLength)
                                        
                                        var newRow = new Object()
                                        newRow.assetName = "ALL"
                                        result.AddRow(newRow)
                                        logger.debug("Result" + result)
                                        
                                        for ( var y = 0; y < tableLength; y++) {
                                            if (y == 0) {
                                                logger.debug("Y value:" + y)
                                                if (bdData.rows[0].Asset_Type && bdData.rows[0].Asset_Type != ""){
                                                var newRow = new Object()
                                                newRow.assetName = bdData.rows[0].Asset_Type
                                                result.AddRow(newRow) 
                                                logger.debug("Result" +  result)}
                                              
                                        
                                            }
                                        
                                            if (y != 0) {
                                                if (bdData.rows[y - 1].Asset_Type != bdData.rows[y].Asset_Type) {
                                                    if (bdData.rows[y].Asset_Type && bdData.rows[y].Asset_Type != ""){
                                                    var newRow = new Object()
                                                    newRow.assetName = bdData.rows[y].Asset_Type
                                                    logger.debug(" newRow :" + newRow)
                                                    result.AddRow(newRow)}
                                                }
                                            }
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetCustomerAssetTypeAnalysis">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var numberOfAssetsTotal = 0
                                        var numberofAssetsDisconnected = 0
                                        var numberofAssetsConnected = 0
                                        
                                        var paramsDS = {
                                            infoTableName: "InfoTable",
                                        	dataShapeName : "NCR.DCS.CustomerDeviceAnalysis"
                                        };
                                        
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(paramsDS)
                                        
                                        
                                        
                                        var queryC = {
                                            "filters": {
                                                "type": "And",
                                                "filters": [{
                                                    "type": "EQ",
                                                    "fieldName": "Customer",
                                                    "value": customerName
                                                }]
                                            },
                                            "sorts": [{
                                                "fieldName": "Customer",
                                                "isAscending": "false"
                                            }]
                                        };
                                        
                                        
                                        if (assetType && assetType != 'ALL') {
                                            queryC.filters.filters.push({
                                                "fieldName": "Asset_Type",
                                        		"type"      : "EQ",
                                        		"value"     : assetType
                                            })
                                        }
                                        var params = {
                                            maxItems: 1000   /* NUMBER */,
                                            nameMask: undefined /* STRING */,
                                            query: queryC /* QUERY */,
                                            tags: undefined /* TAGS */
                                        };
                                        
                                        // result: INFOTABLE dataShape: RootEntityList
                                        var aIT = ThingTemplates["NCR.BaseDevice"].QueryImplementingThingsWithData(params);
                                        
                                        var tableLength = aIT.rows.length;
                                        numberOfAssetsTotal = tableLength;
                                        for (var y = 0; y < tableLength; y++) {
                                            if (aIT.rows[y].isConnected) {
                                                numberofAssetsConnected++;
                                            } else {
                                                numberofAssetsDisconnected++;
                                            }
                                        }
                                        
                                        
                                        //Disconnected Devices
                                        var rowObject = new Object();
                                        
                                        rowObject.id = "Disconnected Devices"
                                        rowObject.deviceInfo = numberofAssetsDisconnected;
                                        
                                        result.AddRow(rowObject);
                                        
                                        //Connected Devices
                                        var rowObject = new Object();
                                        
                                        rowObject.id = "Connected Devices"
                                        rowObject.deviceInfo = numberofAssetsConnected;
                                        
                                        result.AddRow(rowObject);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getCustomerIncidentAnalysis">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var params = {																// Data Shape 
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "NCR.DCS.CustomerIncidentAnalysis"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable")
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        
                                        var stDate = new Date(startDate.getFullYear(), startDate.getMonth(), startDate.getDate())
                                        logger.debug("StartDate" + stDate)
                                        
                                        var edDate = new Date(endDate.getFullYear(), endDate.getMonth(), endDate.getDate())
                                        logger.debug("EndDate" + edDate)
                                        
                                        // Query based on input as a Device, Customer and  Store
                                        var queryC;
                                        var status = true
                                        switch(selectionType){
                                        	case 'Customer' :
                                         queryC = {
                                        	"filters": {
                                        		"type": "AND",
                                        		"filters": [
                                        			{
                                        				"fieldName": "customer",
                                        				"type": "EQ",
                                        				"value": customer
                                        			},
                                        			{
                                        				"fieldName": "timestamp",
                                        				"type": "Between",
                                        				"from": stDate,
                                        				"to": edDate
                                        			}
                                        
                                        		]
                                        	}
                                        }
                                        	break;
                                        	case 'Store':
                                        		queryC = {
                                        			"filters": {
                                        				"type": "AND",
                                        				"filters": [
                                        					{
                                        						"fieldName": "storeidentifier",
                                        						"type": "EQ",
                                        						"value": customer
                                        					},
                                        					{
                                        						"fieldName": "timestamp",
                                        						"type": "Between",
                                        						"from": stDate,
                                        						"to": edDate
                                        					}
                                        
                                        				]
                                        			}
                                        		}
                                        		break;
                                        	case 'Device' :
                                        		queryC = {
                                        			"filters": {
                                        				"type": "AND",
                                        				"filters": [
                                        					{
                                        						"fieldName": "assetName",
                                        						"type": "EQ",
                                        						"value": customer
                                        					},
                                        					{
                                        						"fieldName": "timestamp",
                                        						"type": "Between",
                                        						"from": stDate,
                                        						"to": edDate
                                        					}
                                        
                                        				]
                                        			}
                                        		}
                                        		break;
                                        	default :
                                        		status = false 
                                        		
                                        		break;
                                        
                                        }
                                        
                                        if(status != false) {
                                        
                                        var params = {
                                        	maxItems: 10000 /* NUMBER */,
                                        	values: undefined /* INFOTABLE*/,
                                        	query: queryC /* QUERY */,
                                        	source: undefined /* STRING */,
                                        	tags: undefined /* TAGS */
                                        };
                                        
                                        // result: INFOTABLE
                                        var tableEvent = Things["NCR.DCS.EventsDT"].QueryDataTableEntries(params);
                                        //result = tableEvent
                                        
                                          // Code to get Incidents
                                        
                                        var tableLengthE = tableEvent.rows.length;
                                        logger.debug("tableLength :  " + tableLengthE)
                                        
                                        var lastDate = new Date();
                                        var numberOfEvents = 0;
                                        var numberOfEventsCritical = 0;
                                        var numberOfIncidents = 0;
                                        var numberOfNormalEvents = 0;
                                        
                                        
                                        
                                        for (var y = 0; y < tableLengthE; y++) {
                                        
                                        	//getting Date field from timeStamp Column
                                        	var timeStamp = tableEvent.rows[y].timestamp
                                        	var newDate = new Date(timeStamp.getFullYear(), timeStamp.getMonth(), timeStamp.getDate())
                                        
                                        
                                        	if (y == 0)
                                        		lastDate = newDate;
                                        
                                        	//if row date not matches with last scanned row date saved the entry otherwise increment events ans incident of that date
                                        	if (lastDate.getTime() !== newDate.getTime()) {
                                        		var newEntry = new Object();
                                        		newEntry.Date = lastDate;
                                        		newEntry.numberOfNormalEvents = numberOfNormalEvents;
                                        		newEntry.numberOfEvents = numberOfEvents;
                                        		newEntry.numberOfIncidents = numberOfIncidents;
                                        		newEntry.numberOfEventsCritical = numberOfEventsCritical;
                                        		result.AddRow(newEntry);
                                        
                                        
                                        		lastDate = newDate
                                        		numberOfEvents = 0;
                                        		numberOfIncidents = 0;
                                        		numberOfEventsCritical = 0;
                                        		numberOfNormalEvents = 0;
                                        
                                        	}
                                        
                                        
                                        
                                        	numberOfEvents++;
                                        	logger.debug("Event  " + numberOfEvents + " : y : " + y + " : new Date  :  " + newDate)
                                        
                                        
                                        	if (tableEvent.rows[y].severity.toUpperCase() == 'CRITICAL')
                                        		numberOfEventsCritical++;
                                        	else
                                        		numberOfNormalEvents++;
                                        
                                        
                                        	if (tableEvent.rows[y].incident != null && tableEvent.rows[y].incident != '') {
                                        		numberOfIncidents++;
                                        
                                        	}
                                        
                                        // last scanned row save the object in info table
                                        	if (y == tableLengthE - 1) {
                                        
                                        
                                        		var newEntry = new Object();
                                        		newEntry.Date = lastDate;
                                        		newEntry.numberOfNormalEvents = numberOfNormalEvents;
                                        		newEntry.numberOfEvents = numberOfEvents;
                                        		newEntry.numberOfIncidents = numberOfIncidents;
                                        		newEntry.numberOfEventsCritical = numberOfEventsCritical;
                                        		result.AddRow(newEntry);
                                        
                                        	}
                                        
                                        }
                                        
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getCustomerName">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var paramsHD = {
                                            infoTableName: "InfoTable",
                                            dataShapeName: "NCR.DCS.CustomerNameShape"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(NCR.DCS.PropertyHistoryDS)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(paramsHD);
                                        
                                        var customer =new Object();
                                        customer.customerName ="Ahold-Delhaize" ;
                                        result.AddRow(customer);
                                        
                                        
                                        var customer = new Object();
                                        customer.customerName = "NCR Corporation";
                                        result.AddRow(customer);
                                        
                                        
                                        
                                        var customer = new Object();
                                        customer.customerName = "Walmart USA";
                                        result.AddRow(customer);
                                        
                                        var customer = new Object();
                                        customer.customerName = "Sobeys Inc";
                                        result.AddRow(customer);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getDeviceIncidentAnalysis">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var params = {
                                            infoTableName: "InfoTable",
                                            dataShapeName: "NCR.DCS.CustomerIncidentAnalysis"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(NCR.DCS.RemoteActionCommandsDS)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        
                                        var stDate = new Date(startDate.getFullYear(), startDate.getMonth(), startDate.getDate())
                                        logger.debug("StartDate" + stDate)
                                        var edDate = new Date(endDate.getFullYear(), endDate.getMonth(), endDate.getDate())
                                        logger.debug("EndDate" + edDate)
                                        var queryC = {
                                            "filters": {
                                                "type": "AND",
                                                "filters": [
                                                    {
                                                        "fieldName": "assetName",
                                                        "type": "EQ",
                                                        "value":assetName
                                                    },
                                                    {
                                                        "fieldName": "timestamp",
                                                        "type": "Between",
                                                        "from": stDate,
                                                        "to": edDate
                                                    }
                                        
                                                ]
                                            }
                                        }
                                        
                                        
                                        
                                        
                                        
                                        var params = {
                                            maxItems: 10000 /* NUMBER */,
                                            values: undefined /* INFOTABLE*/,
                                            query: queryC /* QUERY */,
                                            source: undefined /* STRING */,
                                            tags: undefined /* TAGS */
                                        };
                                        
                                        var itNOE = Things["NCR.DCS.EventsDT"].QueryDataTableEntries(params);
                                        
                                        // Process Events for Customer
                                        var tableLengthE = itNOE.rows.length;
                                        numberOfEvents = tableLengthE;
                                        for (var y = 0; y < tableLengthE; y++) {
                                            if (itNOE.rows[y].count > 0) {
                                                numberofEventsMultiple++;
                                            }
                                            if (itNOE.rows[y].severity.toUpperCase() == 'CRITICAL') {
                                                numberOfEventsCritical++;
                                            }
                                            if (itNOE.rows[y].incident != null && itNOE.rows[y].incident != '') {
                                                numberOfIncidents++;
                                            }
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetEventsForAsset">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        /*
                                        var values = Things["NCR.DCS.EventsDT"].CreateValues();
                                        
                                        values.duration = undefined; //INTEGER
                                        values.severity = undefined; //STRING
                                        values.statuscode = undefined; //STRING
                                        values.eventid = undefined; //STRING [Primary Key]
                                        values.assetName = undefined; //STRING [Primary Key]
                                        values.description = undefined; //STRING
                                        values.category = undefined; //STRING
                                        values.incident = undefined; //STRING
                                        values.timestamp = undefined; //DATETIME
                                        */
                                        
                                        if (!assetName) {
                                            assetName = '';
                                        }
                                        
                                        var query = {
                                            "filters": {
                                                "type":"And",
                                                 "filters": [{
                                                     "type": "EQ",
                                                     "fieldName": "assetName",             
                                                     "value": assetName
                                                 }]
                                            },
                                            "sorts": [{
                                                    "fieldName": "timestamp",
                                                    "isAscending": "false"
                                             }]
                                        };
                                        
                                        if (statuscode && statuscode != '' && statuscode != 'ALL') {
                                            query.filters.filters.push({
                                                "fieldName": "statuscode",
                                                "type": "EQ",
                                                "value": statuscode
                                            });
                                        }
                                        
                                        if (incident && incident != '') {
                                            query.filters.filters.push({
                                                "fieldName": "incident",
                                                "type": "EQ",
                                                "value": incident
                                            });
                                        }
                                        
                                        if (endate && startdate){
                                            query.filters.filters.push({
                                                "fieldName": "timestamp",
                                                "type": "Between",
                                                "from": startdate,
                                                "to": endate
                                            });
                                        } 
                                        /*else {
                                            enddate = new Date();
                                            startdate = new Date();
                                            enddate.setDate(enddate.getDate()+1);
                                            startdate.setDate(startdate.getDate()-14);
                                            query.filters.filters.push({
                                                "fieldName": "timestamp",
                                                "type": "BETWEEN",
                                                "from": startdate,
                                                "to": enddate
                                            });
                                        }*/
                                        
                                        var params = {
                                        	maxItems: 500 /* NUMBER */,
                                        	values: undefined /* INFOTABLE*/,
                                        	query: query /* QUERY */,
                                        	source: undefined /* STRING */,
                                        	tags: undefined /* TAGS */
                                        };
                                        
                                        // result: INFOTABLE
                                        var result = Things["NCR.DCS.EventsDT"].QueryDataTableEntries(params);
                                        
                                        /* Hardcoded
                                        
                                        var params = {
                                        	infoTableName : "InfoTable",
                                        	dataShapeName : "NCR.DCS.AssetEventsDS"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(NCR.DCS.RemoteActionCommandsDS)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        // Events
                                        var newEntry = new Object();
                                        
                                        newEntry.assetName = assetName;
                                        newEntry.timestamp = new Date("Mar 07 2018 09:56:24 GMT+0100");
                                        newEntry.description = 'High CPU Usage';
                                        newEntry.category = 'SW';
                                        newEntry.severity = 'High';
                                        newEntry.incident = '';
                                        newEntry.duration = 10;
                                        newEntry.statuscode = 'M10';
                                        result.AddRow(newEntry);
                                        
                                        
                                        newEntry.assetName = assetName;
                                        newEntry.timestamp = new Date("Mar 06 2018 03:13:23 GMT+0100");
                                        newEntry.description = 'Dispenser Sensor Jam';
                                        newEntry.category = 'HW';
                                        newEntry.severity = 'High';
                                        newEntry.incident = 'INC98765432';
                                        newEntry.duration = 8;
                                        newEntry.statuscode = 'M23';
                                        result.AddRow(newEntry);
                                        
                                        newEntry.assetName = assetName;
                                        newEntry.timestamp = new Date("Mar 05 2018 11:18:01 GMT+0100");
                                        newEntry.description = 'Cash Low';
                                        newEntry.category = 'MEDIA CASH';
                                        newEntry.severity = 'Medium';
                                        newEntry.incident = 'INC12345678';
                                        newEntry.duration = 7;
                                        newEntry.statuscode = 'M12';
                                        result.AddRow(newEntry);
                                        
                                        newEntry.assetName = assetName;
                                        newEntry.timestamp = new Date("Mar 04 2018 08:25:19 GMT+0100");
                                        newEntry.description = 'Receipt Paper Empty';
                                        newEntry.category = 'MEDIA PAPER';
                                        newEntry.severity = 'Low';
                                        newEntry.incident = '';
                                        newEntry.duration = 6;
                                        newEntry.statuscode = 'M90';
                                        result.AddRow(newEntry);
                                        
                                        newEntry.assetName = assetName;
                                        newEntry.timestamp = new Date("Mar 03 2018 07:03:12 GMT+0100");
                                        newEntry.description = 'High CPU Usage';
                                        newEntry.category = 'SW';
                                        newEntry.severity = 'High';
                                        newEntry.incident = '';
                                        newEntry.duration = 10;
                                        newEntry.statuscode = 'M10';
                                        result.AddRow(newEntry);
                                        
                                        newEntry.assetName = assetName;
                                        newEntry.timestamp = new Date("Mar 02 2018 03:13:23 GMT+0100");
                                        newEntry.description = 'Dispenser Sensor Jam';
                                        newEntry.category = 'HW';
                                        newEntry.severity = 'High';
                                        newEntry.incident = 'INC98765432';
                                        newEntry.duration = 8;
                                        newEntry.statuscode = 'M23';
                                        result.AddRow(newEntry);
                                        
                                        newEntry.assetName = assetName;
                                        newEntry.timestamp = new Date("Mar 01 2018 11:18:01 GMT+0100");
                                        newEntry.description = 'Cash Low';
                                        newEntry.category = 'MEDIA CASH';
                                        newEntry.severity = 'Medium';
                                        newEntry.incident = 'INC12345678';
                                        newEntry.duration = 7;
                                        newEntry.statuscode = 'M12';
                                        result.AddRow(newEntry);
                                        
                                        newEntry.assetName = assetName;
                                        newEntry.timestamp = new Date("Feb 28 2018 08:25:19 GMT+0100");
                                        newEntry.description = 'Receipt Paper Empty';
                                        newEntry.category = 'MEDIA PAPER';
                                        newEntry.severity = 'Low';
                                        newEntry.incident = '';
                                        newEntry.duration = 6;
                                        newEntry.statuscode = 'M90';
                                        result.AddRow(newEntry);
                                        
                                        newEntry.assetName = assetName;
                                        newEntry.timestamp = new Date("Feb 26 2018 11:45:01 GMT+0100");
                                        newEntry.description = 'High CPU Usage';
                                        newEntry.category = 'SW';
                                        newEntry.severity = 'High';
                                        newEntry.incident = '';
                                        newEntry.duration = 10;
                                        newEntry.statuscode = 'M10';
                                        result.AddRow(newEntry);
                                        
                                        newEntry.assetName = assetName;
                                        newEntry.timestamp = new Date("Feb 26 2018  08:25:19 GMT+0100");
                                        newEntry.description = 'Dispenser Sensor Jam';
                                        newEntry.category = 'HW';
                                        newEntry.severity = 'High';
                                        newEntry.incident = 'INC98765432';
                                        newEntry.duration = 8;
                                        newEntry.statuscode = 'M23';
                                        result.AddRow(newEntry);
                                        
                                        newEntry.assetName = assetName;
                                        newEntry.timestamp = new Date("Feb 26 2018  08:25:19 GMT+0100");
                                        newEntry.description = 'Cash Low';
                                        newEntry.category = 'MEDIA CASH';
                                        newEntry.severity = 'Medium';
                                        newEntry.incident = 'INC12345678';
                                        newEntry.duration = 7;
                                        newEntry.statuscode = 'M12';
                                        result.AddRow(newEntry);
                                        
                                        newEntry.assetName = assetName;
                                        newEntry.timestamp = new Date("Feb 26 2018  08:25:19 GMT+0100");
                                        newEntry.description = 'Receipt Paper Empty';
                                        newEntry.category = 'MEDIA PAPER';
                                        newEntry.severity = 'Low';
                                        newEntry.incident = '';
                                        newEntry.duration = 6;
                                        newEntry.statuscode = 'M90';
                                        result.AddRow(newEntry);
                                        */
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetEventsFromLTEventsTable">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var params = {
                                        	oldestFirst: false /* BOOLEAN */,
                                        	maxItems: 1000 /* NUMBER */,
                                        	sourceTags: undefined /* TAGS */,
                                        	endDate: undefined /* DATETIME */,
                                        	query: query /* QUERY */,
                                        	source: undefined /* STRING */,
                                        	startDate: undefined /* DATETIME */,
                                        	tags: undefined /* TAGS */
                                        };
                                        
                                        // result: INFOTABLE
                                        var result = Things["NCR.DCS.LTEVENTSs"].QueryStreamData(params);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetFileNameFromExecCommandResult">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var rsJSON = resultstring;
                                        
                                        if (rsJSON && rsJSON != "") {	
                                            if (rsJSON.indexOf("[") != 0) {
                                                rsJSON = "[" + rsJSON + "]";
                                            }    
                                        } 
                                        
                                        if (rsJSON == null || rsJSON =='') {
                                            rsJSON = '[{"Name":"Failed to process request"}]';
                                        }
                                        
                                        // Create JSON object from String
                                        var objJSON = JSON.parse(rsJSON); 
                                        
                                        var result = objJSON[0].Name;
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetFilesToGenRetrieveForAsset">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var params = {
                                        	infoTableName : "InfoTable",
                                        	dataShapeName : "NCR.DCS.RemoteActionGenRetrieveFilesDS"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(NCR.DCS.RemoteActionCommandsDS)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        // Files List
                                        var newEntry = new Object();
                                        
                                        // Get Path from Property Asset_ProgramDir
                                        var paramsPD = {
                                        	propertyName: "Asset_ProgramDir" /* STRING */ 
                                        };
                                        var apd = Things[assetName].GetStringPropertyValue(paramsPD);
                                        
                                        var progPathDefault = "C:\\Microserver";
                                        var progPath;
                                        if (apd != null && apd != '') {
                                        	progPath = apd.replace(/\\/g, '\\');
                                        } else {
                                        	progPath = progPathDefault.replace(/\\/g, '\\');
                                        }
                                        // logger.debug("progPath:" + progPath);
                                        
                                        // Get Data Path
                                        var paramsDataPath = {
                                        	// New Agent change propertyName: "Asset_ProgramDir" /* STRING */
                                        	propertyName: "Asset_DataDir" /* STRING */
                                        };
                                        var adatap = Things[assetName].GetStringPropertyValue(paramsDataPath);
                                        
                                        var dataPathDefault = "C:\\Microserver";
                                        var dataPath;
                                        if (adatap != null && adatap != '') {
                                        	dataPath = adatap.replace(/\\/g, '\\');
                                        } else {
                                        	dataPath = dataPathDefault.replace(/\\/g, '\\');
                                        }
                                        
                                        // Enclose Path/Command in double quotes
                                        newEntry.CommandName = "MS - Retrieve Windows host File";
                                        newEntry.Command = '"' + progPath + '\\etc\\custom\\scripts\\NCR.DCS.Windows.Console.exe" FILE Copy JSON "C:\\Windows\\system32\\drivers\\etc" "hosts" "' + dataPath + '\\Other" True';
                                        newEntry.Parameters = '';
                                        result.AddRow(newEntry);
                                        
                                        /*
                                        newEntry.CommandName = "MS - Retrieve EKernel Log Files (For Axeda)";
                                        newEntry.Command = '';
                                        newEntry.Parameters = '';
                                        result.AddRow(newEntry);
                                        
                                        newEntry.CommandName = "MS - Retrieve Backup of Windows Event Logs";
                                        newEntry.Command = '';
                                        newEntry.Parameters = '';
                                        result.AddRow(newEntry);
                                        */
                                        if (assetType == 'ATM') {
                                        	newEntry.CommandName = "MS - Retrieve Today Archive Log";
                                        	newEntry.Command = '';
                                        	newEntry.Parameters = '';
                                        	result.AddRow(newEntry);
                                        
                                        	newEntry.CommandName = "MS - Retrieve Yesterday Archive Log";
                                        	newEntry.Command = '';
                                        	newEntry.Parameters = '';
                                        	result.AddRow(newEntry);
                                            
                                        } else if (assetType == "ATM" || assetType == "ITM") {
                                        	newEntry.CommandName = "MS - Retrieve Archive Log Directory";
                                        	newEntry.Command = '';
                                        	newEntry.Parameters = '';
                                        	result.AddRow(newEntry);
                                        
                                        } else if (assetType == 'ITM') {
                                        	newEntry.CommandName = "MS - Retrieve Yesterday ArchMan Log";
                                        	newEntry.Command = '';
                                        	newEntry.Parameters = '';
                                        	result.AddRow(newEntry);
                                        } else if (assetType == 'POS') {
                                        	newEntry.CommandName = "MS - Retrieve SSCO install log";
                                        	newEntry.Command = '';
                                        	newEntry.Parameters = '';
                                        	result.AddRow(newEntry);
                                        
                                        } else {
                                            
                                        }
                                        
                                        /* 2018-03-23 ms500001 changing format of commands to fit overall command structure.
                                        
                                        newEntry.Name = "MS - Retrieve EKernel Log Files (For Axeda)";
                                        newEntry.SeqFile = 'RetrieveEKernelLogs.seq';
                                        result.AddRow(newEntry);
                                        
                                        newEntry.Name = "MS - Retrieve Backup of Windows Event Logs";
                                        newEntry.SeqFile = 'UploadBackupWindowsEventLogs.seq';
                                        result.AddRow(newEntry);
                                        
                                        newEntry.Name = "MS - Retrieve Windows host File";
                                        newEntry.SeqFile = 'C:\\Microserver\\etc\\custom\\scripts\\NCR.DCS.Windows.Console.exe FILE Copy JSON "C:\\Windows\\system32\\drivers\\etc" "hosts" "C:\\Microserver\\logs" True';
                                        result.AddRow(newEntry);
                                        
                                        
                                        if (assetType == 'ATM') {
                                        	newEntry.Name = "MS - Retrieve Today Archive Log";
                                        	newEntry.SeqFile = 'RetrieveArchiveLogForToday.seq';
                                        	result.AddRow(newEntry);
                                            
                                            newEntry.Name = "MS - Retrieve Yesterday Archive Log";
                                        	newEntry.SeqFile = 'RetrieveArchiveLogForYesterday.seq';
                                        	result.AddRow(newEntry);
                                        } else if (assetType == "ATM" || assetType == "ITM") {
                                        	newEntry.Name = "MS - Retrieve Archive Log Directory";
                                        	newEntry.SeqFile = 'RetrieveArchiveLogDirectory.seq';
                                        	result.AddRow(newEntry);
                                        } else if (assetType == 'ITM') {
                                            newEntry.Name = "MS - Retrieve Yesterday ArchMan Log";
                                        	newEntry.SeqFile = 'RetrieveArchmanLogForYesterdayITM.seq';
                                        	result.AddRow(newEntry);
                                        } else if (assetType == 'POS') {
                                            newEntry.Name = "MS - Retrieve SSCO install log";
                                        	newEntry.SeqFile = 'Retrieve_InstallLogs.seq';
                                        	result.AddRow(newEntry);
                                        } else {
                                            
                                        }
                                        
                                        */
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetGroupsForUserByName">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        // result: INFOTABLE dataShape: EntityList
                                        var result = Users[userName].GetGroups();
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetHTMLPropertyTableForComponent">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        // Data Shape NCR.ATMComponentsDS defines properties: ATMCMP_INVALL, ATMCMP_STATUSALL
                                        var params = {
                                        	propertyName: propertyName /* STRING */
                                        };
                                        
                                        var invall = Things[assetName].GetStringPropertyValue(params);
                                        var txt = "";
                                        
                                        var objT;
                                        
                                        if (invall && invall != "") {	
                                            
                                            if (invall.indexOf("[") != 0) {
                                                invall = "[" + invall + "]";
                                            }
                                            
                                        	// Create JSON object from String
                                        	objT = JSON.parse(invall); 	 
                                        		
                                            //Create Property Table table rows
                                        	//Add JSON data to table as rows
                                        	txt += "<table border='1' class='tblfixed'>";
                                        	txt += "<tbody class='tbodyfixed'>";    
                                            
                                            for (x in objT[0]) {
                                            	txt += "<tr class='trfixed'>";
                                                txt += "<td class='tdfixed'>";
                                            	txt += x;
                                            	txt += "</td>";
                                                
                                                txt += "<td class='tdfixed'>";
                                            	txt += objT[0][x];
                                            	txt += "</td>";
                                                txt += "</tr>";
                                                
                                            } 	 
                                           
                                        	txt += "</tbody></table>";
                                        
                                        } else {
                                        	txt += "<table border='1' class='tblfixed'><tbody class='tbodyfixed'>";
                                        	txt += "<tr class='trfixed'><td class='tdfixed'>No Data</td><td class='tdfixed'></td></tr>";
                                        	txt += "</tbody></table>";
                                        }
                                        
                                        var result = txt;
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetHTMLTableForATMCompsINV">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        // Data Shape NCR.ATMComponentsDS defines properties: ATMCMP_INVALL, ATMCMP_STATUSALL
                                        var params = {
                                        	propertyName: "ATMCMP_INVALL" /* STRING */
                                        };
                                        
                                        // result: STRING
                                        var invall = Things[assetName].GetStringPropertyValue(params);
                                        
                                        // Create JSON object from String
                                        var objJSON = JSON.parse(invall); 
                                        
                                        if (invall == null || invall =='') {
                                            invall = '{Devices{"Name":"Data not Available","Id":"","NumberOfModules":""}}';
                                        }
                                        
                                        // This Service assumes will strip first level of JSON object
                                        var objT = objJSON.Devices;
                                        
                                        if (objJSON.Devices == '') {
                                            objJSON.Devices = {"Name":"Data not Available","Id":"","NumberOfModules":""};
                                        }
                                        
                                        var oDevices = objT;
                                        var txt = "<table border='1' class='componenttbl'>"
                                        txt += "<thead><tr><th>Devices</th></tr></thead>";
                                        txt += "<tbody><tr><td>";
                                        txt += "<table border='1'>";
                                        txt += "<thead><tr><th>Name</th><th>Id</th><th>Number of Modules</th><th>Modules</th></tr></thead>";
                                        txt += "<tbody>";
                                        for (x in oDevices) {
                                        	txt += "<tr>";
                                            txt += "<td>" + oDevices[x].Name + "</td>";
                                            txt += "<td>" + oDevices[x].Id + "</td>";
                                            txt += "<td>" + oDevices[x].NumberOfModules + "</td>";
                                            
                                            txt += "<td>";
                                            if (oDevices[x].Modules.length > 0) {
                                                
                                                txt += "<table border='1'>";
                                                txt += "<thead><tr><th>Id</th><th>Name</th><th>Serial Number</th><th>Hardware Version</th><th>Replenishable</th></tr></thead>";
                                             	txt += "<tbody>";
                                                
                                             	for (y in oDevices[x].Modules) {
                                                	txt += "<tr>";
                                            		txt += "<td>" + oDevices[x].Modules[y].Id + "</td>";
                                                    txt += "<td>" + oDevices[x].Modules[y].Name + "</td>";
                                            		txt += "<td>" + oDevices[x].Modules[y].SerialNumber + "</td>";
                                            		txt += "<td>" + oDevices[x].Modules[y].HardwareVersion + "</td>";
                                                    txt += "<td>" + oDevices[x].Modules[y].Replenishable + "</td>";
                                             		txt += "<tr>";
                                             	} 
                                               	
                                                txt += "</tbody></table>";
                                               
                                            }
                                            txt += "</td>";
                                            txt += "</tr>";  
                                           
                                        }
                                        txt += "</tbody></table></td></tr></tbody></table>";
                                        
                                        var result = txt;
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetHTMLTableForATMCompsNIC">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        // Data Shape NCR.ATMComponentsDS defines properties: ATMCMP_INVALL, ATMCMP_STATUSALL
                                        var params = {
                                        	propertyName: "IN_ALL" /* STRING */
                                        };
                                        
                                        var invall = Things[assetName].GetStringPropertyValue(params);
                                        var txt = "";
                                        
                                        if (invall && invall != "") {	
                                            
                                            if (invall.indexOf("[") != 0) {
                                                invall = "[" + invall + "]";
                                            }
                                            
                                        	// Create JSON object from String
                                        	var objT = JSON.parse(invall); 
                                        
                                        	// EXTRACT VALUE FOR HTML HEADER. 
                                        	var col = [];
                                        
                                        	for (var i = 0; i < objT.length; i++) {
                                            	for (var key in objT[i]) {
                                              	if (col.indexOf(key) === -1) {
                                                	col.push(key);
                                              	}
                                            	}
                                        	}
                                          
                                        	//Create a table
                                        	txt += "<table border='1' class='tblfixed'>";
                                        	//Create  table rows
                                        	txt += "<thead class='theadfixed'><tr>";
                                        	//Create table headers
                                        	for (var i = 0; i < col.length; i++) {
                                            	txt += "<th class='thfixed'>"; // TABLE HEADER.
                                            	txt += col[i];
                                            	txt += "</th>";
                                        	}
                                        	txt += "</tr></thead>";
                                        
                                        	//Add JSON data to table as rows
                                        	txt += "<tbody class='tbodyfixed'>";
                                        	for (var i = 0; i < objT.length; i++) {
                                           		txt += "<tr class='trfixed'>";
                                            	for (var j = 0; j < col.length; j++) {
                                              		txt += "<td class='tdfixed'>";
                                                    if (typeof objT[i][col[j]] == "object" && !Array.isArray(objT[i][col[j]])) {
                                                        // Construct Table
                                                        txt += "<table border='1' class='tblfixed'>";
                                                        var myObj = objT[i][col[j]];
                                                		for (x in myObj) {
                                                     		txt += "<tr><td>" + x + "</td><td>" + myObj[x] + "</td></tr>";
                                                		}
                                                		txt += "</table>" 
                                                                      
                                                    } else {
                                                        txt += objT[i][col[j]];
                                                    }
                                              		
                                        	  		txt += "</td>";
                                        		} 
                                            	txt += "</tr>";
                                        	}
                                        	txt += "</tbody></table>";
                                        
                                        } else {
                                            txt += "No data";
                                        }
                                        
                                        var result = txt;
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetHTMLTableForATMCompsStatus">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        // Data Shape NCR.ATMComponentsDS defines properties: ATMCMP_INVALL, ATMCMP_STATUSALL
                                        var params = {
                                        	propertyName: "ATMCMP_STATUSALL" /* STRING */
                                        };
                                        
                                        // result: STRING
                                        var invall = Things[assetName].GetStringPropertyValue(params);
                                        
                                        // Create JSON object from String
                                        var objJSON = JSON.parse(invall); 
                                        
                                        // This Service assumes will strip first level of JSON object
                                        var objT = objJSON.Devices;
                                        
                                        var oDevices = objT;
                                        var txt = "";
                                        txt += "<table class='componenttbl'>"
                                        txt += "<thead><tr><th class='componentth'>Devices</th></tr></thead>";
                                        txt += "<tbody><tr><td>";
                                        txt += "<table border='1' class='componentcomptbl'>";
                                        txt += "<thead><tr><th class='componentmodth'>ID</th><th class='componentmodth'>Name</th><th class='componentmodth'>Modules</th></tr></thead>";
                                        txt += "<tbody>";
                                        for (x in oDevices) {
                                        	txt += "<tr>";
                                            txt += "<td class='componentmodtd'>" + oDevices[x].Id + "</td>";
                                            txt += "<td class='componentmodtd'>" + oDevices[x].Name + "</td>";
                                            
                                            txt += "<td class='componentmodtd'>";
                                            if (oDevices[x].Modules.length > 0) {
                                                
                                                txt += "<table border='1' class='componentmodtbl'>";
                                                txt += "<thead><tr><th class='componentmodth'>Id</th><th class='componentmodth'>Name</th><th class='componentmodth'>Detailed Status</th><th class='componentmodth'>Summary Status</th></tr></thead>";
                                             	txt += "<tbody>";
                                                
                                                var sUnhealthyN;
                                               	var sUnhealthyDS;
                                                var sUnhealthySS;
                                                
                                             	for (y in oDevices[x].Modules) {
                                                	sUnhealthyN = "";
                                               		sUnhealthyDS = "";
                                                	sUnhealthySS = "";
                                                    
                                                    /*
                                                    if (oDevices[x].Modules[y].DetailedStatus != 'Healthy') {
                                                		 sUnhealthyN = " class='componenttdunhealthy'";
                                                         sUnhealthyDS = " class='componenttdunhealthy'";
                                                    }
                                                    */
                                                    if (oDevices[x].Modules[y].SummaryStatus != 'Healthy') {
                                                		sUnhealthyN = " class='componenttdunhealthy'";
                                                        sUnhealthySS = " class='componenttdunhealthy'";
                                                    }            
                                                    txt += "<tr>";
                                                    txt += "<td>" + oDevices[x].Modules[y].Id + "</td>";
                                                    txt += "<td" + sUnhealthyN + ">" + oDevices[x].Modules[y].Name + "</td>"; 
                                                    txt += "<td" + sUnhealthyDS + ">" + oDevices[x].Modules[y].DetailedStatus + "</td>";
                                                	txt += "<td" + sUnhealthySS + ">" + oDevices[x].Modules[y].SummaryStatus + "</td>";              		
                                             		txt += "<tr>";
                                             	} 
                                               	
                                                txt += "</tbody></table>";
                                               
                                            }
                                            txt += "</td>";
                                            txt += "</tr>";  
                                           
                                        }
                                        txt += "</tbody></table></td></tr></tbody></table>";
                                        
                                        var result = txt;
                                        
                                        var result = txt;
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetHTMLTableForCompDisk">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        // Data Shape NCR.ATMComponentsDS defines properties: ATMCMP_INVALL, ATMCMP_STATUSALL
                                        var params = {
                                        	propertyName: "DSK_ALL" /* STRING */
                                        };
                                        
                                        var invall = Things[assetName].GetStringPropertyValue(params);
                                        var txt = "";
                                        
                                        if (invall && invall != "") {	
                                            
                                            if (invall.indexOf("[") != 0) {
                                                invall = "[" + invall + "]";
                                            }
                                            
                                        	// Create JSON object from String
                                        	var objT = JSON.parse(invall); 
                                        
                                        	// EXTRACT VALUE FOR HTML HEADER. 
                                        	var col = [];
                                        
                                        	for (var i = 0; i < objT.length; i++) {
                                            	for (var key in objT[i]) {
                                              	if (col.indexOf(key) === -1) {
                                                	col.push(key);
                                              	}
                                            	}
                                        	}
                                          
                                        	//Create a table
                                        	txt += "<table border='1' class='tblfixed'>";
                                        	//Create  table rows
                                        	txt += "<thead class='theadfixed'><tr>";
                                        	//Create table headers
                                        	for (var i = 0; i < col.length; i++) {
                                            	txt += "<th class='thfixed'>"; // TABLE HEADER.
                                            	txt += col[i];
                                            	txt += "</th>";
                                        	}
                                        	txt += "</tr></thead>";
                                        
                                        	//Add JSON data to table as rows
                                        	txt += "<tbody class='tbodyfixed'>";
                                        	for (var i = 0; i < objT.length; i++) {
                                           		txt += "<tr class='trfixed'>";
                                            	for (var j = 0; j < col.length; j++) {
                                              		txt += "<td class='tdfixed'>";
                                              		txt += objT[i][col[j]];
                                        	  		txt += "</td>";
                                        		} 
                                            	txt += "</tr>";
                                        	}
                                        	txt += "</tbody></table>";
                                        
                                        } else {
                                            txt += "No data";
                                        }
                                        
                                        var result = txt;
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetHTMLTableForCompPatches">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        // Data Shape NCR.ATMComponentsDS defines properties: ATMCMP_INVALL, ATMCMP_STATUSALL
                                        var params = {
                                        	propertyName: "PAT_ALL" /* STRING */
                                        };
                                        
                                        var invall = Things[assetName].GetStringPropertyValue(params);
                                        var txt = "";
                                        
                                        if (invall && invall != "") {	
                                            
                                            if (invall.indexOf("[") != 0) {
                                                invall = "[" + invall + "]";
                                            }
                                            
                                        	// Create JSON object from String
                                        	var objT = JSON.parse(invall); 
                                        
                                        	// EXTRACT VALUE FOR HTML HEADER. 
                                        	var col = [];
                                        
                                        	for (var i = 0; i < objT.length; i++) {
                                            	for (var key in objT[i]) {
                                              	if (col.indexOf(key) === -1) {
                                                	col.push(key);
                                              	}
                                            	}
                                        	}
                                          
                                        	//Create a table
                                        	txt += "<table border='1' class='tblfixed'>";
                                        	//Create  table rows
                                        	txt += "<thead class='theadfixed'><tr>";
                                        	//Create table headers
                                        	for (var i = 0; i < col.length; i++) {
                                            	txt += "<th class='thfixed'>"; // TABLE HEADER.
                                            	txt += col[i];
                                            	txt += "</th>";
                                        	}
                                        	txt += "</tr></thead>";
                                        
                                        	//Add JSON data to table as rows
                                        	txt += "<tbody class='tbodyfixed'>";
                                        	for (var i = 0; i < objT.length; i++) {
                                           		txt += "<tr class='trfixed'>";
                                            	for (var j = 0; j < col.length; j++) {
                                              		txt += "<td class='tdfixed'>";
                                                    // Transform HTML
                                                    if (j == 0) {
                                                        txt += "<a target='dcsmswin' href='" + objT[i][col[j]] + "'>" + objT[i][col[j]] + "</a>";
                                                    } else {
                                                        txt += objT[i][col[j]];
                                                    }
                                        	  		txt += "</td>";
                                        		} 
                                            	txt += "</tr>";
                                        	}
                                        	txt += "</tbody></table>";
                                        
                                        } else {
                                            txt += "No data";
                                        }
                                        
                                        var result = txt;
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetHTMLTableForCompPrinters">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        // Data Shape NCR.ATMComponentsDS defines properties: ATMCMP_INVALL, ATMCMP_STATUSALL
                                        var params = {
                                        	propertyName: "PRT_ALL" /* STRING */
                                        };
                                        
                                        var invall = Things[assetName].GetStringPropertyValue(params);
                                        var txt = "";
                                        
                                        if (invall && invall != "") {	
                                            
                                            if (invall.indexOf("[") != 0) {
                                                invall = "[" + invall + "]";
                                            }
                                            
                                        	// Create JSON object from String
                                        	var objT = JSON.parse(invall); 
                                        
                                        	// EXTRACT VALUE FOR HTML HEADER. 
                                        	var col = [];
                                        
                                        	for (var i = 0; i < objT.length; i++) {
                                            	for (var key in objT[i]) {
                                              	if (col.indexOf(key) === -1) {
                                                	col.push(key);
                                              	}
                                            	}
                                        	}
                                          
                                        	//Create a table
                                        	txt += "<table border='1' class='tblfixed'>";
                                        	//Create  table rows
                                        	txt += "<thead class='theadfixed'><tr>";
                                        	//Create table headers
                                        	for (var i = 0; i < col.length; i++) {
                                            	txt += "<th class='thfixed'>"; // TABLE HEADER.
                                            	txt += col[i];
                                            	txt += "</th>";
                                        	}
                                        	txt += "</tr></thead>";
                                        
                                        	//Add JSON data to table as rows
                                        	txt += "<tbody class='tbodyfixed'>";
                                        	for (var i = 0; i < objT.length; i++) {
                                           		txt += "<tr class='trfixed'>";
                                            	for (var j = 0; j < col.length; j++) {
                                              		txt += "<td class='tdfixed'>";
                                              		txt += objT[i][col[j]];
                                        	  		txt += "</td>";
                                        		} 
                                            	txt += "</tr>";
                                        	}
                                        	txt += "</tbody></table>";
                                        
                                        } else {
                                            txt += "No data";
                                        }
                                        
                                        var result = txt;
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetHTMLTableForCompSoftware">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        // Data Shape NCR.ATMComponentsDS defines properties: ATMCMP_INVALL, ATMCMP_STATUSALL
                                        var params = {
                                        	propertyName: "SOFT_Installed" /* STRING */
                                        };
                                        
                                        var invall = Things[assetName].GetStringPropertyValue(params);
                                        
                                        var txt = "";
                                        
                                        if (invall && invall != "") {	
                                            
                                            if (invall.indexOf("[") != 0) {
                                                invall = "[" + invall + "]";
                                            }
                                            
                                        	// Create JSON object from String
                                        	var objT = JSON.parse(invall); 
                                        
                                        	// EXTRACT VALUE FOR HTML HEADER. 
                                        	var col = [];
                                        
                                        	for (var i = 0; i < objT.length; i++) {
                                            	for (var key in objT[i]) {
                                              	if (col.indexOf(key) === -1) {
                                                	col.push(key);
                                              	}
                                            	}
                                        	}
                                          
                                        	//Create a table
                                        	txt += "<table border='1' class='tblfixed'>";
                                        	//Create  table rows
                                        	txt += "<thead class='theadfixed'><tr>";
                                        	//Create table headers
                                        	for (var i = 0; i < col.length; i++) {
                                            	txt += "<th class='thfixed'>"; // TABLE HEADER.
                                            	txt += col[i];
                                            	txt += "</th>";
                                        	}
                                        	txt += "</tr></thead>";
                                        
                                        	//Add JSON data to table as rows
                                        	txt += "<tbody class='tbodyfixed'>";
                                        	for (var i = 0; i < objT.length; i++) {
                                           		txt += "<tr class='trfixed'>";
                                            	for (var j = 0; j < col.length; j++) {
                                              		txt += "<td class='tdfixed'>";
                                              		txt += objT[i][col[j]];
                                        	  		txt += "</td>";
                                        		} 
                                            	txt += "</tr>";
                                        	}
                                        	txt += "</tbody></table>";
                                        
                                        } else {
                                            txt += "No data";
                                        }
                                        
                                        var result = txt;
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetHTMLTableForRemoteActionsOutput">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var txt = "";
                                        
                                        if (outputRA && outputRA != "") {	
                                            
                                        	if (outputRA.indexOf("[") != 0) {
                                        		outputRA = "[" + outputRA + "]";
                                            }
                                            
                                        	// Create JSON object from String
                                        	var objT = JSON.parse(outputRA); 
                                        
                                        	// EXTRACT VALUE FOR HTML HEADER. 
                                        	var col = [];
                                        
                                        	for (var i = 0; i < objT.length; i++) {
                                            	for (var key in objT[i]) {
                                              	if (col.indexOf(key) === -1) {
                                                	col.push(key);
                                              	}
                                            	}
                                        	}
                                          
                                        	//Create a table
                                        	txt += "<table border='1' width='100%' class='tblfixed'>";
                                        	//Create  table rows
                                        	txt += "<thead class='theadfixed'><tr>";
                                        	//Create table headers
                                        	for (var i = 0; i < col.length; i++) {
                                            	txt += "<th class='thfixed'>"; // TABLE HEADER.
                                            	txt += col[i];
                                            	txt += "</th>";
                                        	}
                                        	txt += "</tr></thead>";
                                        
                                        	//Add JSON data to table as rows
                                        	txt += "<tbody class='tbodyfixed'>";
                                        	for (var i = 0; i < objT.length; i++) {
                                           		txt += "<tr class='trfixed'>";
                                            	for (var j = 0; j < col.length; j++) {
                                              		txt += "<td class='tdfixed'>";
                                                    if (typeof objT[i][col[j]] == "object" && !Array.isArray(objT[i][col[j]])) {
                                                        // Construct Table
                                                        txt += "<table border='1' class='tblfixed'>";
                                                        var myObj = objT[i][col[j]];
                                                		for (x in myObj) {
                                                     		txt += "<tr><td>" + x + "</td><td>" + myObj[x] + "</td></tr>";
                                                		}
                                                		txt += "</table>" 
                                                                      
                                                    } else {
                                                        txt += objT[i][col[j]];
                                                    }
                                              		
                                        	  		txt += "</td>";
                                        		} 
                                            	txt += "</tr>";
                                        	}
                                        	txt += "</tbody></table>";
                                        
                                        } else {
                                            txt += "No data";
                                        }
                                        
                                        var result = txt;
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetImageForAsset">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var result;
                                        
                                        if (!assetType) {
                                            assetType = '';
                                        }
                                        
                                        // logger.debug("GetImageForAsset::assetType:" + assetType);
                                        if(assetType == "ATM"){
                                        	if (assetModel == "Self Serv 88") {
                                                result = "/Thingworx/MediaEntities/NCR.DCS.SelfServ88";
                                            } else {
                                                result = "/Thingworx/MediaEntities/NCR.DCS.ATM";
                                            }
                                        } else if (assetType == "MGMTSERVER") {
                                            result = "/Thingworx/MediaEntities/NCR.MGMTSERVER";
                                        } else if (assetType == "POS") {
                                            result = "/Thingworx/MediaEntities/NCRPOS";
                                        } else if (assetType.toUpperCase() == "SCALE") {
                                             result = "/Thingworx/MediaEntities/NCR.DCS.HobartHTiScale";      
                                        } else if (assetType.toUpperCase() == "PRINTER") {
                                            result = "/Thingworx/MediaEntities/NCR.DCS.NETWORKPRINTER";
                                        } else if (assetType.toUpperCase() == "LAPTOP") {
                                            result = "/Thingworx/MediaEntities/NCR.DCS.Laptop";
                                        } else if (assetType.toUpperCase() == "HANDHELD") {    
                                            if (assetModel == "MC40N0") {
                                                result = "/Thingworx/MediaEntities/NCR.DCS.HANDHELD.ZEBRA.MC40";
                                            } else if (assetModel == "CC5000") {
                                                result = "/Thingworx/MediaEntities/NCR.DCS.HANDHELD.ZEBRA.CC5000";
                                            } else if (assetModel == "TC-51") {
                                                result = "/Thingworx/MediaEntities/NCR.DCS.HANDHELD.ZEBRA.TC51";
                                            } else if (assetModel == "MC18N0") {
                                                result = "/Thingworx/MediaEntities/NCR.DCS.HANDHELD.ZEBRA.MC18";
                                            } else {
                                                result = "/Thingworx/MediaEntities/NCR.DCS.HANDHELD.ZEBRA.MC18";
                                            }
                                        } else {
                                           result = "";
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetImageITForAsset">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var result;
                                        
                                        if(status){
                                        	result = "fas fa-circle";
                                        } else {
                                            result = "fas fa-bullseye";
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetImageStatusForAsset">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var result;
                                        // logger.debug("status received:" + status);
                                        if(status){
                                        	result = "/Thingworx/MediaEntities/NCR.DCS.connected";
                                        } else {
                                            result = "/Thingworx/MediaEntities/NCR.DCS.disconnected";
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetInfoTableForATMComponentsINV">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        // Data Shape NCR.ATMComponentsDS defines properties: ATMCMP_INVALL, ATMCMP_STATUSALL
                                        // result: INFOTABLE dataShape: "PropertyDefinition"
                                        // var result  = Things[assetName].GetPropertyValues();
                                        
                                        var params = {
                                        	propertyName: "ATMCMP_INVALL" /* STRING */
                                        };
                                        
                                        // result: STRING
                                        var invall = Things[assetName].GetStringPropertyValue(params);
                                        
                                        if (invall == null || invall =='') {
                                            invall = '{"Devices": [{"Name":"Data not Available","Id":0,"NumberOfModules":0,"Modules":[]}]}';
                                        }
                                        
                                        // Create JSON object from String
                                        var objJSON = JSON.parse(invall); 
                                        
                                        // This Service assumes will strip first level of JSON object
                                        var objT = objJSON.Devices;
                                        
                                        if (objT.length == 0) {
                                            	objT = JSON.parse('[{"Name":"Data not Available","Id":0,"NumberOfModules":0,"Modules":[]}]');
                                        }
                                        
                                        var params = {
                                        	minDateMilliseconds: undefined /* LONG */,
                                        	dateFormat: undefined /* STRING */,
                                        	json: objT /* JSON */,
                                        	dataShape: "NCR.ATMDevicesDS" /* DATASHAPENAME */
                                        };
                                        
                                        // validated by binding to Tree Grid Advanced
                                        // Bind Data to All Data->Devices; Set HasChildrenFieldName to NumberOfModules
                                        // result: INFOTABLE using datShape specified as param
                                        var result = Resources["Parsley"].ParseJSON(params).array;
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetInfoTableForATMComponentsPropertyTL">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        // Data Shape NCR.ATMComponentsDS defines properties: ATMCMP_INVALL, ATMCMP_STATUSALL
                                        // result: INFOTABLE dataShape: "PropertyDefinition"
                                        // var result  = Things[assetName].GetPropertyValues();
                                        
                                        var params = {
                                        	propertyName: propertyName /* STRING */
                                        };
                                        
                                        // result: STRING
                                        var invall = "[" + Things[assetName].GetStringPropertyValue(params) + "]";
                                        
                                        // Create JSON object from String
                                        var objT = JSON.parse(invall); 
                                        
                                        var params = {
                                        	minDateMilliseconds: undefined /* LONG */,
                                        	dateFormat: "RAW" /* STRING */,
                                        	json: objT /* JSON */,
                                        	dataShape: "NCR.ATMInventoryDS" /* DATASHAPENAME */
                                        };
                                        
                                        // validated by binding to Tree Grid Advanced
                                        // Bind Data to All Data->Devices; Set HasChildrenFieldName to NumberOfModules
                                        // result: INFOTABLE using datShape specified as param
                                        var result = Resources["Parsley"].ParseJSON(params).array;
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetInfoTableForBatteryCommonComponent">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var params = {
                                        	propertyName: "BAT_ALL" /* STRING */
                                        };
                                        
                                        // result: STRING
                                        var invall = Things[assetName].GetStringPropertyValue(params);
                                        
                                        if (invall == null || invall =='') {
                                        	invall = '{"Status": "","Description": "","Voltage": "","Level": "","Charging": "","ChargeSource": "","Docked": "","Health": "","BACKUP_BATTERY_VOLTAGE": "","MFD": "","SERIAL_NUMBER": "","PART_NUMBER": "","RATED_CAPACITY": "","CYCLE": "","health_percentage": "","present_capacity": "","base_cumulative_charge": "","total_cumulative_charge": "","present_charge": "","time_to_empty": "","time_to_full": "","CONTENT_CREATION_TIME": ""}';
                                        }
                                        
                                        // Create JSON object from String
                                        var objJSON = JSON.parse(invall); 
                                        
                                        var params = {
                                        	minDateMilliseconds: undefined /* LONG */,
                                        	dateFormat: undefined /* STRING */,
                                        	json: objJSON /* JSON */,
                                        	dataShape: "NCR.DCS.BatteryCompoDS" /* DATASHAPENAME */
                                        };
                                        
                                        var result;
                                        
                                        try {
                                        
                                        	// result: INFOTABLE using datShape specified as param
                                        	result = Resources["Parsley"].ParseJSON(params);
                                        } catch (e) {}
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetInfoTableForBrightnessCommonComponent">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var params = {
                                        	propertyName: "BRIGHTNESS_Info" /* STRING */
                                        };
                                        
                                        // result: STRING
                                        var invall = Things[assetName].GetStringPropertyValue(params);
                                        
                                        if (invall == null || invall =='') {
                                        	invall = '{"brightness_mode": "","brightness_value": 0}';
                                        }
                                        
                                        // Create JSON object from String
                                        var objJSON = JSON.parse(invall); 
                                        
                                        objJSON["brightness_value"] = Math.ceil(objJSON["brightness_value"] / 255 * 100)
                                        
                                        var params = {
                                        	minDateMilliseconds: undefined /* LONG */,
                                        	dateFormat: undefined /* STRING */,
                                        	json: objJSON /* JSON */,
                                        	dataShape: "NCR.DCS.BrightnessCompoDS" /* DATASHAPENAME */
                                        };
                                        
                                        // result: INFOTABLE using datShape specified as param
                                        var result = Resources["Parsley"].ParseJSON(params);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetInfoTableForBrightnessCommonComponentCopy">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var params = {
                                        	propertyName: "BRIGHTNESS_Info" /* STRING */
                                        };
                                        
                                        // result: STRING
                                        var invall = Things[assetName].GetStringPropertyValue(params);
                                        
                                        if (invall == null || invall =='') {
                                        	invall = '{"brightness_mode": "","brightness_value": 0}';
                                        }
                                        
                                        // Create JSON object from String
                                        var objJSON = JSON.parse(invall); 
                                        
                                        var params = {
                                        	minDateMilliseconds: undefined /* LONG */,
                                        	dateFormat: undefined /* STRING */,
                                        	json: objJSON /* JSON */,
                                        	dataShape: "NCR.DCS.BrightnessCompoDS" /* DATASHAPENAME */
                                        };
                                        
                                        // result: INFOTABLE using datShape specified as param
                                        var result = Resources["Parsley"].ParseJSON(params);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetInfoTableForComponentProperty">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        // Data Shape NCR.ATMComponentsDS defines properties: ATMCMP_INVALL, ATMCMP_STATUSALL
                                        // result: INFOTABLE dataShape: "PropertyDefinition"
                                        // var result  = Things[assetName].GetPropertyValues();
                                        
                                        var params = {
                                        	propertyName: propertyName /* STRING */
                                        };
                                        
                                        // result: STRING
                                        var invall = Things[assetName].GetStringPropertyValue(params);
                                        
                                        if (invall && invall != "") {	
                                            if (invall.indexOf("[") != 0) {
                                                invall = "[" + invall + "]";
                                            }    
                                        }
                                        
                                        if (invall == null || invall == '') {
                                            invall = '[{"Data Not Availble":"Data Not Availble"}]';
                                        }
                                        
                                        // Create JSON object from String
                                        var objJSON = JSON.parse(invall); 
                                        
                                        var params = {
                                        	json: objJSON /* JSON */
                                        };
                                        
                                        var params = {
                                        	minDateMilliseconds: undefined /* LONG */,
                                        	// Long Numeric values get converted (ex. CS, Disk, Drive) dateFormat: "RAW" /* STRING */,
                                            dateFormat: undefined /* STRING */,
                                        	json: objJSON /* JSON */,
                                        	dataShape: undefined /* DATASHAPENAME */
                                        };
                                        
                                        // result: INFOTABLE using datShape specified as param
                                        var result = Resources["Parsley"].ParseJSON(params).array;
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetInfoTableForComponentServices">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var params = {
                                        	propertyName: "SVC_ALL" /* STRING */
                                        };
                                        
                                        // result: STRING
                                        var invall = Things[assetName].GetStringPropertyValue(params);
                                        
                                        if (invall == null || invall =='') {
                                            invall = '[{"Name":"Data not Available","Description":"","Start Mode":"","Start Name":"","State":"","Status":""}]';
                                        }
                                        
                                        // Create JSON object from String
                                        var objJSON = JSON.parse(invall); 
                                        
                                        var params = {
                                        	json: objJSON /* JSON */
                                        };
                                        
                                        var params = {
                                        	minDateMilliseconds: undefined /* LONG */,
                                        	dateFormat: undefined /* STRING */,
                                        	json: objJSON /* JSON */,
                                        	dataShape: "NCR.DCS.ServicesCompDS" /* DATASHAPENAME */
                                        };
                                        
                                        // result: INFOTABLE using datShape specified as param
                                        var result = Resources["Parsley"].ParseJSON(params).array;
                                        
                                        var sort = new Object();
                                        sort.name = "Name";
                                        sort.ascending = true;
                                        result.Sort(sort);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetInfoTableForComponentSW">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var params = {
                                        	propertyName: "SOFT_Installed" /* STRING */
                                        };
                                        
                                        // result: STRING
                                        var invall = Things[assetName].GetStringPropertyValue(params);
                                        
                                        if (invall == null || invall =='') {
                                            invall = '[{"Name":"Data not Available","Version":"","Vendor":"","InstallDate":""}]';
                                        }
                                        
                                        // Create JSON object from String
                                        var objJSON = JSON.parse(invall); 
                                        
                                        var params = {
                                        	json: objJSON /* JSON */
                                        };
                                        
                                        var params = {
                                        	minDateMilliseconds: undefined /* LONG */,
                                        	dateFormat: undefined /* STRING */,
                                        	json: objJSON /* JSON */,
                                        	dataShape: "NCR.DCS.SWCompDS" /* DATASHAPENAME */
                                        };
                                        
                                        // result: INFOTABLE using datShape specified as param
                                        var result = Resources["Parsley"].ParseJSON(params).array;
                                        
                                        var sort = new Object();
                                        sort.name = "Name";
                                        sort.ascending = true;
                                        result.Sort(sort);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetInfoTableForCPU">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        // Data Shape NCR.ATMComponentsDS defines properties: ATMCMP_INVALL, ATMCMP_STATUSALL
                                        // result: INFOTABLE dataShape: "PropertyDefinition"
                                        // var result  = Things[assetName].GetPropertyValues();
                                        
                                        var params = {
                                        	propertyName: "CPU_ALL" /* STRING */
                                        };
                                        
                                        // result: STRING
                                        var invall = Things[assetName].GetStringPropertyValue(params);
                                        
                                        if (invall && invall != "") {	
                                            if (invall.indexOf("[") != 0) {
                                                invall = "[" + invall + "]";
                                            }    
                                        } 
                                        
                                        if (invall == null || invall =='') {
                                            invall = '[{"Data Not Availble":""}]';
                                        }
                                        
                                        // Create JSON object from String
                                        var objJSON = JSON.parse(invall); 
                                        
                                        var params = {
                                        	json: objJSON /* JSON */
                                        };
                                        
                                        var params = {
                                        	minDateMilliseconds: undefined /* LONG */,
                                        	dateFormat: "RAW" /* STRING */,
                                        	json: objJSON /* JSON */,
                                        	dataShape: undefined /* DATASHAPENAME */
                                        };
                                        
                                        // result: INFOTABLE using datShape specified as param
                                        var result = Resources["Parsley"].ParseJSON(params).array;
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetInfoTableForCPUCommonComponent">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var params = {
                                        	propertyName: "CPU_ALL" /* STRING */
                                        };
                                        
                                        // result: STRING
                                        var invall = Things[assetName].GetStringPropertyValue(params);
                                        
                                        if (invall == null || invall =='') {
                                        	invall = '{"Name": "","Caption": "","CpuUtilization": "","Status": "",  "VirtualizationFirmwareEnabled": "","Manufacturer": ""}';
                                        }
                                        
                                        // Create JSON object from String
                                        var objJSON = JSON.parse(invall); 
                                        
                                        var params = {
                                        	minDateMilliseconds: undefined /* LONG */,
                                        	dateFormat: undefined /* STRING */,
                                        	json: objJSON /* JSON */,
                                        	dataShape: "NCR.DCS.CPUCompoDS" /* DATASHAPENAME */
                                        };
                                        
                                        // result: INFOTABLE using datShape specified as param
                                        var result = Resources["Parsley"].ParseJSON(params);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetInfoTableForExecCommandResult">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var rsJSON = resultstring;
                                        
                                        if (rsJSON && rsJSON != "") {	
                                            if (rsJSON.indexOf("[") != 0) {
                                                rsJSON = "[" + rsJSON + "]";
                                            }    
                                        } 
                                        
                                        if (rsJSON == null || rsJSON =='') {
                                            rsJSON = '[{"Data Not Availble":""}]';
                                        }
                                        
                                        // Create JSON object from String
                                        var objJSON = JSON.parse(rsJSON); 
                                        
                                        var params = {
                                        	json: objJSON /* JSON */
                                        };
                                        
                                        var params = {
                                        	minDateMilliseconds: undefined /* LONG */,
                                        	dateFormat: "RAW" /* STRING */,
                                        	json: objJSON /* JSON */,
                                        	dataShape: undefined /* DATASHAPENAME */
                                        };
                                        
                                        // result: INFOTABLE using datShape specified as param
                                        var result = Resources["Parsley"].ParseJSON(params).array;
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetInfoTableForNetworkPrinterPRTALL">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var params = {
                                        	propertyName: "PRT_ALL" /* STRING */
                                        };
                                        
                                        // result: STRING
                                        var invall = Things[assetName].GetStringPropertyValue(params);
                                        
                                        if (invall == null || invall =='') {
                                        	invall = '{"SerialNumber": "","FirmwareVersion": "","Model": "","CurrentInterventionRequiredCode": "", "PrinterCurrentOutHopperStatus": "","InputPaperTrayStatus": "","PrinterPaperPathStatus": "", "TonerSupplyStatus": "", "CurrentServiceRequiredStatus": "", "CurrentDiskSubsystemStatus":CurrentCoverStatus": "", "CurrentComplexPageStatus": "","CurrentConnectionStatus": "", "CurrentBusyStatus": "", "TotalNumberOfPagesPrinted": ""}';
                                        }
                                        
                                        // Create JSON object from String
                                        var objJSON = JSON.parse(invall); 
                                        
                                        var params = {
                                        	minDateMilliseconds: undefined /* LONG */,
                                        	dateFormat: undefined /* STRING */,
                                        	json: objJSON /* JSON */,
                                        	dataShape: "NCR.DCS.NETPRINTERPRTALLDS" /* DATASHAPENAME */
                                        };
                                        
                                        // result: INFOTABLE using datShape specified as param
                                        var result = Resources["Parsley"].ParseJSON(params);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetInfoTableForOSCommonComponent">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var params = {
                                        	propertyName: "OS_ALL" /* STRING */
                                        };
                                        
                                        // result: STRING
                                        var invall = Things[assetName].GetStringPropertyValue(params);
                                        
                                        if (invall == null || invall =='') {
                                        	invall = '{"BuildNumber": "","Caption": "","CurrentTimeZone": "","Manufacturer": "",  "Organization": "","OSArchitecture": "","Locale": "",  "OSLanguage": "","Version": ""}';
                                        }
                                        
                                        // Create JSON object from String
                                        var objJSON = JSON.parse(invall); 
                                        
                                        var params = {
                                        	minDateMilliseconds: undefined /* LONG */,
                                        	dateFormat: undefined /* STRING */,
                                        	json: objJSON /* JSON */,
                                        	dataShape: "NCR.DCS.OSCompoDS" /* DATASHAPENAME */
                                        };
                                        
                                        // result: INFOTABLE using datShape specified as param
                                        var result = Resources["Parsley"].ParseJSON(params);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetInfoTableForRebootCommonComponent">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var params = {
                                        	propertyName: "REBOOTINFO" /* STRING */
                                        };
                                        
                                        // result: STRING
                                        var invall = Things[assetName].GetStringPropertyValue(params);
                                        
                                        if (invall == null || invall =='') {
                                        	invall = '{"rebootTime": "","timeZone": "","creation_TIME": ""}';
                                        }
                                        
                                        // Create JSON object from String
                                        var objJSON = JSON.parse(invall); 
                                        
                                        var params = {
                                        	minDateMilliseconds: undefined /* LONG */,
                                        	dateFormat: undefined /* STRING */,
                                        	json: objJSON /* JSON */,
                                        	dataShape: "NCR.DCS.RebootInfoCompoDS" /* DATASHAPENAME */
                                        };
                                        
                                        // result: INFOTABLE using datShape specified as param
                                        var result = Resources["Parsley"].ParseJSON(params);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetInfoTableForSoftRunningCommComp">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var params = {
                                        	propertyName: "SOFT_Running" /* STRING */
                                        };
                                        
                                        // result: STRING
                                        var invall = Things[assetName].GetStringPropertyValue(params);
                                        
                                        if (invall && invall != "") {
                                        	if (invall.indexOf("[") != 0) {
                                        		invall = "[" + invall + "]";
                                        	}
                                        }
                                        
                                        if (invall == null || invall =='') {
                                        	invall = '[{"": ""}]';
                                        }
                                        
                                        // Create JSON object from String
                                        var objJSON = JSON.parse(invall); 
                                        
                                        // Create Empty INFOTABLE to add result rows to after "ALL"
                                        var params = {
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "NCR.DCS.SWRunningCompoDS"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(NCR.DCS.AssetEventsStatusDS)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        var newRow = new Object();
                                        
                                        for (x in objJSON[0]) {	
                                        	newRow.path = x;
                                        	newRow.name = objJSON[0][x];		
                                        	result.AddRow(newRow);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetInfoTableForWiFiCommonComponent">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var params = {
                                        	propertyName: "WIFI_ALL" /* STRING */
                                        };
                                        
                                        // result: STRING
                                        var invall = Things[assetName].GetStringPropertyValue(params);
                                        
                                        if (invall == null || invall =='') {
                                        	invall = '{"ActiveInternetConnection": "","DeviceIpAddress": "","GatewayIpAddress": "","WifiMacAddress": "","ConnectedAccessPointMac": "","ConnectedAccessPointSSID": "","WifiFrequency": "","WifiSignalStrength": "","WifiSignalStrengthLevel": ""}';
                                        }
                                        
                                        // Create JSON object from String
                                        var objJSON = JSON.parse(invall); 
                                        
                                        var params = {
                                        	minDateMilliseconds: undefined /* LONG */,
                                        	dateFormat: undefined /* STRING */,
                                        	json: objJSON /* JSON */,
                                        	dataShape: "NCR.DCS.WiFiCompoDS" /* DATASHAPENAME */
                                        };
                                        
                                        var result = "";
                                        
                                        try {
                                        	// result: INFOTABLE using datShape specified as param
                                        	result = Resources["Parsley"].ParseJSON(params);
                                        } catch (e) {}
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetInstanceIdLicenseSubsystem">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        // result: STRING
                                        var result = Subsystems["LicensingSubsystem"].GetInstanceId();
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetMashupNameFromMenu">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        //DEBUG logger.debug("NCRDCSMASHUP::NCR.BaseDeviceHelper::GetAssetMangementMSName::assetType:" + assetType + ":assetName:" + assetName + ":menuSelected:" + menuSelected);
                                        
                                        if (!assetType) {
                                        	assetType = '';
                                        }
                                        
                                        var result;
                                        var msname;
                                        var disableSWCM = false;
                                        
                                        if (assetType.toUpperCase() == 'SCALE') {
                                            msname = 'NCR.AssetsKSMashup';
                                            disableSWCM = true;
                                        } else if (assetType.toUpperCase() == 'HANDHELD') {
                                        	msname = "NCR.AssetsHandHeldMashup";
                                        } else if (assetType.toUpperCase() == 'PRINTER') {
                                        	msname = "NCR.AssetsSNMPMashup";
                                        	disableSWCM = true;
                                        } else {
                                        	msname = "NCR.AssetsMashup";
                                        }
                                        
                                        if (!assetName || assetName == '') {
                                            msname = "NCR.DCS.DefaultAssetManagementMashup";
                                        }
                                        
                                        if (menuSelected != null && menuSelected != "") {
                                        	if (menuSelected != "NCR.DCS.DefaultAssetManagementMashup") {
                                        		msname = menuSelected;
                                        	}
                                        } 
                                        
                                        var params = {
                                        	infoTableName : "InfoTable",
                                        	dataShapeName : "NCR.DCS.AssetsMashupSelectionDS"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(NCR.DCS.AssetsMashupSelectionDS)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        // Commands
                                        var newEntry = new Object();
                                        
                                        newEntry.msname = msname;
                                        newEntry.disableSWCM = disableSWCM;
                                        result.AddRow(newEntry);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetMemoryGaugeValDispStr">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        // DEBUG result = "2170 MB / 8072 MB";
                                        // Calculation (TotalVisibleMemorySize - FreePhysicalMemory) / TotalVisibleMemorySize * 100
                                        // OS_ALL
                                        
                                        var params = {
                                        	propertyName: "OS_ALL" /* STRING */
                                        };
                                        
                                        // result: STRING
                                        var invall;
                                        if (assetName && assetName != '') {
                                        	invall = Things[assetName].GetStringPropertyValue(params);
                                        } else {
                                            invall = '';
                                        }
                                        
                                        if (invall && invall != "") {	
                                            if (invall.indexOf("[") != 0) {
                                                invall = "[" + invall + "]";
                                            }    
                                        } 
                                        
                                        if (invall == null || invall =='') {
                                            invall = '[{"TotalVisibleMemorySize":"0","FreePhysicalMemory":"0"}]';
                                        }
                                        
                                        // Create JSON object from String
                                        var objJSON = JSON.parse(invall); 
                                        
                                        // Formula Bytes/1024*1024 = MB; KB / 1024 - MB
                                        var used = (parseInt(objJSON[0].TotalVisibleMemorySize) - parseInt(objJSON[0].FreePhysicalMemory)) / 1024;
                                        var avail = parseInt(objJSON[0].TotalVisibleMemorySize) / 1024;
                                        
                                        var result = used.toFixed(2) + " MB / " + avail.toFixed(2) + " MB";
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetMemoryUtilizedHandHeld">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        // Calculation (TotalVisibleMemorySize - FreePhysicalMemory) / TotalVisibleMemorySize * 100
                                        // OS_ALL
                                        // DEBUG var result = Math.floor(Math.random() * 101);
                                        
                                        var params = {
                                            propertyName: "MEM_ALL" /* STRING */
                                        };
                                        
                                        // result: STRING
                                        var invall;
                                        if (assetName && assetName != '') {
                                        	invall = Things[assetName].GetStringPropertyValue(params);
                                        } else {
                                            invall = '';
                                        }
                                        
                                        if (invall && invall != "") {	
                                            if (invall.indexOf("[") != 0) {
                                                invall = "[" + invall + "]";
                                            }    
                                        } 
                                        
                                        if (invall == null || invall =='') {
                                            invall = '[{"MEM_UsedPhysicalMemory":"","MEM_TotalPhysicalMemory":"","MemoryUtilized":""}]';
                                        }
                                        
                                        // Create JSON object from String
                                        var objJSON = JSON.parse(invall); 
                                        
                                        // return InfoTable
                                        var params = {
                                            infoTableName: "InfoTable",
                                            dataShapeName: "NCR.DCS.MemUtilizedHH"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(NCR.DCS.RemoteActionCommandsDS)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        try {
                                        
                                        // Formula (Size - FreeSpace) / Size * 100 = Utilized
                                        var utilized = ((parseInt(objJSON[0].MEM_TotalPhysicalMemory) - parseInt(objJSON[0].MEM_FreePhysicalMemory)) / parseInt(objJSON[0].MEM_TotalPhysicalMemory)) * 100;
                                        
                                        var memutilized = parseInt(utilized);
                                        var used = parseInt(objJSON[0].MEM_UsedPhysicalMemory) / (1024 * 1024);
                                        var total = parseInt(objJSON[0].MEM_TotalPhysicalMemory) / (1024 * 1024);
                                        
                                        // Commands
                                        var newEntry = new Object();
                                        
                                        newEntry.MEM_UsedPhysicalMemory = used.toFixed(2);
                                        newEntry.MemoryUtilized = memutilized;
                                        newEntry.MEM_TotalPhysicalMemory = total.toFixed(2);
                                        result.AddRow(newEntry);
                                        } catch (e) {}
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetPortyQueryServicesForAsset">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var params = {
                                        	infoTableName : "InfoTable",
                                        	dataShapeName : "NCR.DCS.RemoteActionCommandsDS"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(NCR.DCS.RemoteActionCommandsDS)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        // Commands
                                        var newEntry = new Object();
                                        
                                        // Get Path from Property Asset_ProgramDir
                                        var paramsPD = {
                                        	propertyName: "Asset_ProgramDir" /* STRING */
                                        };
                                        
                                        var apd = Things[assetName].GetStringPropertyValue(paramsPD);
                                        var progPathDefault = "C:\\Microserver";
                                        var progPath;
                                        if (apd != null && apd != '') {
                                        	progPath = apd.replace(/\\/g, '\\');
                                        } else {
                                        	progPath = progPathDefault.replace(/\\/g, '\\');
                                        }
                                        // logger.debug("progPath:" + progPath);
                                        
                                        
                                        newEntry.CommandName = "MS - PortQuery SCCM";
                                        newEntry.Command = '"' + progPath + '\\etc\\custom\\scripts\\NCR.DCS.Windows.Console.exe" NET Query JSON "192.127.2.51:80,192.127.2.54:80,192.127.2.80:80,192.127.2.69:80,192.127.2.68:80,192.127.2.155:80,192.127.2.157:80,192.127.2.159:80,192.127.2.79:80,192.127.2.51:443,192.127.2.54:443,192.127.2.80:443,192.127.2.69:443,192.127.2.68:443,192.127.2.155:443,192.127.2.157:443,192.127.2.159:443,192.127.2.79:443 5" && "' + progPath + '\\etc\\custom\\scripts\\NCR.DCS.Windows.Console.exe" NET Netstat JSON';
                                        newEntry.Parameters = '';
                                        result.AddRow(newEntry);
                                        
                                        newEntry.CommandName = "MS - PortQuery AV 2.5";
                                        newEntry.Command = '"' + progPath + '\\etc\\custom\\scripts\\NCR.DCS.Windows.Console.exe" NET Query JSON "192.127.229.142:8443,192.127.229.141:8443,192.127.229.120:8443,192.127.229.150:8443,192.127.229.151:8443,192.127.229.140:8443,192.127.229.96:8443" && "' + progPath + '\\etc\\custom\\scripts\\NCR.DCS.Windows.Console.exe" NET Netstat JSON';
                                        newEntry.Parameters = '';
                                        result.AddRow(newEntry);
                                        
                                        newEntry.CommandName = "MS - PortQuery EJ";
                                        newEntry.Command = '"' + progPath + '\\etc\\custom\\scripts\\NCR.DCS.Windows.Console.exe" NET Query JSON "192.127.254.79:11000,192.127.254.80:11000,192.127.254.81:11000,192.127.254.79:12500,192.127.254.80:12500,192.127.254.81:12500,192.127.254.79:443,192.127.254.80:443,192.127.254.81:443 5" && "' + progPath + '\\etc\\custom\\scripts\\NCR.DCS.Windows.Console.exe" NET Netstat JSON';
                                        newEntry.Parameters = '';
                                        result.AddRow(newEntry);
                                        
                                        newEntry.CommandName = "MS - PortQuery EPM 1.3";
                                        newEntry.Command = '"' + progPath + '\\etc\\custom\\scripts\\NCR.DCS.Windows.Console.exe" NET Query JSON "192.127.229.125:4728,192.127.229.122:4728,192.127.229.126:4728,192.127.229.139:4728,192.127.229.125:7163,192.127.229.122:7163,192.127.229.126:7163,192.127.229.139:7163 5" && "' + progPath + '\\etc\\custom\\scripts\\NCR.DCS.Windows.Console.exe" NET Netstat JSON';
                                        newEntry.Parameters = '';
                                        result.AddRow(newEntry);
                                        
                                        newEntry.CommandName = "MS - PortQuery EPM 2.3";
                                        newEntry.Command = '"' + progPath + '\\etc\\custom\\scripts\\NCR.DCS.Windows.Console.exe" NET Query JSON "192.127.229.175:80,192.127.229.176:80,192.127.229.177:80,192.127.229.178:80,192.127.229.179:80,192.127.229.180:80,192.127.229.243:443,192.127.229.244:443,192.127.229.245:443,192.127.229.246:443,192.127.229.247:443,192.127.229.248:443,192.127.229.249:443,192.127.229.251:443 5" && "' + progPath + '\\etc\\custom\\scripts\\NCR.DCS.Windows.Console.exe" NET Netstat JSON';
                                        newEntry.Parameters = '';
                                        result.AddRow(newEntry);
                                        
                                        newEntry.CommandName = "MS - PortQuery EPO";
                                        newEntry.Command = '"' + progPath + '\\etc\\custom\\scripts\\NCR.DCS.Windows.Console.exe" NET Query JSON "192.127.2.108:443,192.127.2.120:443 5" && "' + progPath + '\\etc\\custom\\scripts\\NCR.DCS.Windows.Console.exe" NET Netstat JSON';
                                        newEntry.Parameters = '';
                                        result.AddRow(newEntry);
                                        
                                        
                                        if (assetType == 'ATM') {
                                        	    
                                        } else if (assetType == 'POS') {
                                            
                                        } else {
                                            
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetPropertiesForATMComponents">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        // result: INFOTABLE dataShape: "PropertyDefinition"
                                        var result  = Things[assetName].GetPropertyValues();
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetPropertiesForBaseBoard">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        // result: INFOTABLE dataShape: "PropertyDefinition"
                                        var result  = Things[assetName].GetPropertyValues();
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetPropertiesForBIOS">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        // result: INFOTABLE dataShape: "PropertyDefinition"
                                        var result  = Things[assetName].GetPropertyValues();
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetPropertiesForCashDrawer">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        // result: INFOTABLE dataShape: "PropertyDefinition"
                                        var result  = Things[assetName].GetPropertyValues();
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetPropertiesForComputerSystem">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        // Data Shape NCR.ATMComponentsDS defines properties: ATMCMP_INVALL, ATMCMP_STATUSALL
                                        // result: INFOTABLE dataShape: "PropertyDefinition"
                                        // var result  = Things[assetName].GetPropertyValues();
                                        
                                        var params = {
                                            propertyName: "CS_ALL" /* STRING */
                                        };
                                        
                                        // result: STRING
                                        var invall = Things[assetName].GetStringPropertyValue(params);
                                        
                                        if (invall && invall != "") {
                                            if (invall.indexOf("[") != 0) {
                                                invall = "[" + invall + "]";
                                            }
                                        }
                                        
                                        if (invall == null || invall == '') {
                                            invall = '[{"Data Not Availble":"Data Not Availble"}]';
                                        }
                                        
                                        // Create JSON object from String
                                        var objJSON = JSON.parse(invall);
                                        
                                        var params = {
                                            json: objJSON /* JSON */
                                        };
                                        
                                        var params = {
                                            minDateMilliseconds: undefined /* LONG */,
                                            // Long Numeric values get converted (ex. CS, Disk, Drive) dateFormat: "RAW" /* STRING */,
                                            dateFormat: undefined /* STRING */,
                                            json: objJSON /* JSON */,
                                            dataShape: undefined /* DATASHAPENAME */
                                        };
                                        
                                        // result: INFOTABLE using datShape specified as param
                                        var result = Resources["Parsley"].ParseJSON(params).array;
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetPropertiesForCPU">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        // result: INFOTABLE dataShape: "PropertyDefinition"
                                        var result  = Things[assetName].GetPropertyValues();
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetPropertiesForDrive">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        // result: INFOTABLE dataShape: "PropertyDefinition"
                                        var result  = Things[assetName].GetPropertyValues();
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetPropertiesForGeoLocation">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        // result: INFOTABLE dataShape: "PropertyDefinition"
                                        var result  = Things[assetName].GetPropertyValues();
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetPropertiesForMemory">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        // result: INFOTABLE dataShape: "PropertyDefinition"
                                        var result  = Things[assetName].GetPropertyValues();
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetPropertiesForOS">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        // result: INFOTABLE dataShape: "PropertyDefinition"
                                        var result  = Things[assetName].GetPropertyValues();
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetPropertiesForPrinter">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        // result: INFOTABLE dataShape: "PropertyDefinition"
                                        var result  = Things[assetName].GetPropertyValues();
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetPropertiesForScanner">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        // result: INFOTABLE dataShape: "PropertyDefinition"
                                        var result  = Things[assetName].GetPropertyValues();
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetPropertiesForScreen">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        // result: INFOTABLE dataShape: "PropertyDefinition"
                                        var result  = Things[assetName].GetPropertyValues();
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetPropertiesForSoftware">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        // result: INFOTABLE dataShape: "PropertyDefinition"
                                        var result  = Things[assetName].GetPropertyValues();
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetPropertiesForSWD">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        // result: INFOTABLE dataShape: "PropertyDefinition"
                                        var result  = Things[assetName].GetPropertyValues();
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetPropertiesForThing">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        //logger.debug("GetPropertiesForThing::assetName:" + assetName);
                                        // result: INFOTABLE dataShape: "PropertyDefinition"
                                        var result;
                                        if (assetName && assetName != '') {
                                            result  = Things[assetName].GetPropertyValues();
                                        } else {
                                            // return Empty InfoTable using NCR.DCS.BaseDeviceDS data shape
                                            var params = {
                                        	infoTableName : "InfoTable",
                                        	dataShapeName : "NCR.DCS.BaseDeviceDS"
                                        	};
                                        
                                        	// CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(NCR.DCS.BaseDeviceDS)
                                        	result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getPropertyHistoryAllPerformance">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var params = {
                                            oldestFirst: true /* BOOLEAN */,
                                            maxItems: 500 /* NUMBER */,
                                            /* propertyName: propertyName /* STRING */
                                            endDate:endDate /* DATETIME */,
                                            query: undefined /* QUERY */,
                                            startDate:startDate /* DATETIME */
                                        };
                                        
                                        // result: INFOTABLE dataShape: StringValueStream
                                        var propertyHist = Things[assetName].QueryPropertyHistory(params);
                                        
                                        // Iterate through Infotable
                                        var tableLength = propertyHist.rows.length;
                                        
                                        var paramsHD = {
                                            infoTableName: "InfoTable",
                                            dataShapeName: "NCR.DCS.PropertyHistoryAll"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(NCR.DCS.PropertyHistoryDS)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(paramsHD);
                                        //result=propertyHist;
                                        
                                        
                                        
                                        for (var x = 0; x < tableLength; x++) {
                                            var row = propertyHist.rows[x];
                                        
                                            //logger.debug("Row value : "+ row);
                                        
                                            if (row != null) {
                                                var battery = row.BAT_ALL;
                                                var cpu = row.CPU_ALL;
                                                var memory = row.MEM_ALL;
                                        
                                                logger.debug("Battery JSON : " + battery);
                                                logger.debug("CPU JSON : " + cpu);
                                                logger.debug("Memory JSON : " + memory);
                                        
                                                // Create JSON object from String
                                        
                                                var newRow = new Object();
                                                newRow.timestamp = row.timestamp;
                                        
                                                if (battery != null) {
                                                    var objJSON = JSON.parse(battery);
                                                    if (objJSON["Level"] != null && objJSON["Level"] != "-" && objJSON["Level"] != "")
                                                    {
                                                        if (parseInt(objJSON["Level"]) > 100)
                                                            newRow.presentBattery=100;
                                                            else
                                                        newRow.presentBattery = parseInt(objJSON["Level"]);
                                                    }
                                                }
                                        
                                                if (cpu != null) {
                                                    var objJSONCPU = JSON.parse(cpu);
                                                    if (objJSONCPU["CpuUtilization"] != null && objJSONCPU["CpuUtilization"] != "-" && objJSONCPU["CpuUtilization"] != ""){
                                                        if (objJSONCPU["CpuUtilization"] < 0)
                                                            newRow.cpuUtil = 0;
                                                        else
                                                        newRow.cpuUtil = parseInt(objJSONCPU["CpuUtilization"]);}
                                                }
                                        
                                                if (memory != null) {
                                                    var objJSONMEM = JSON.parse(memory);
                                        
                                                if (objJSONMEM["MEM_TotalPhysicalMemory"] != null && objJSONMEM["MEM_TotalPhysicalMemory"] != "-" && objJSONMEM["MEM_TotalPhysicalMemory"]!= "")
                                                 
                                                    var totalMemo =( parseInt(objJSONMEM["MEM_TotalPhysicalMemory"]) / parseInt(objJSONMEM["MEM_TotalPhysicalMemory"]) * 100 );
                                                        newRow.totalmemo= totalMemo;
                                        
                                                 logger.debug("TotalMemory :" + parseInt(objJSONMEM["MEM_TotalPhysicalMemory"]) );
                                                         
                                                    
                                                    if (objJSONMEM["MEM_FreePhysicalMemory"] != null && objJSONMEM["MEM_FreePhysicalMemory"] != "-" && objJSONMEM["MEM_FreePhysicalMemory"] != "")
                                                        newRow.freeMemo = (parseInt(objJSONMEM["MEM_FreePhysicalMemory"]) / parseInt(objJSONMEM["MEM_TotalPhysicalMemory"])  * 100) ;
                                                    if (objJSONMEM["MEM_UsedPhysicalMemory"] != null && objJSONMEM["MEM_UsedPhysicalMemory"] != "-" && objJSONMEM["MEM_UsedPhysicalMemory"] != "")
                                                        newRow.usedMemo = (parseInt(objJSONMEM["MEM_UsedPhysicalMemory"]) / parseInt(objJSONMEM["MEM_TotalPhysicalMemory"]) * 100) ;
                                                    
                                                }
                                        
                                        
                                                //  newRow.id=row.id;
                                        
                                        
                                        
                                        
                                        
                                                result.AddRow(newRow);
                                        
                                            }
                                        
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetPropertyHistoryForNamedProperty">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        //DEBUG logger.debug("NCRDCSMASHUP::NCR.BaseDeviceHelper::GetPropertyHistoryForNamedProperty::assetName:" + assetName +":startDate:" + startDate +":endDate:" + endDate);
                                        
                                        if (startDate == undefined) {
                                        	endDate = undefined;
                                        }
                                        
                                        var params = {
                                        	oldestFirst: undefined /* BOOLEAN */,
                                        	maxItems: 10000 /* NUMBER */,
                                        	propertyName: propertyName /* STRING */,
                                        	endDate: endDate /* DATETIME */,
                                        	query: undefined /* QUERY */,
                                        	startDate: startDate /* DATETIME */
                                        };
                                        
                                        var tableLength = 0;
                                        
                                        if (startDate != undefined) {
                                        
                                        	// result: INFOTABLE dataShape: StringValueStream
                                        	var propertyHist = Things[assetName].QueryStringPropertyHistory(params);
                                        
                                        	// Iterate through Infotable
                                        	tableLength = propertyHist.rows.length;
                                        }
                                        
                                        var paramsHD = {
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "NCR.DCS.PropertyHistoryDS"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(NCR.DCS.PropertyHistoryDS)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(paramsHD);
                                        
                                        if (tableLength > 0) {
                                        	for (var x = 0; x < tableLength; x++) {
                                        		var row = propertyHist.rows[x];
                                        
                                        		var jO = row.value;
                                        	
                                        		// Create JSON object from String
                                        		var objJSON = JSON.parse(jO);
                                        
                                        		//result = result + objJSON[0].Level;
                                        		var newRow = new Object();
                                        		newRow.id = row.id;
                                        		newRow.timestamp = row.timestamp;
                                        		newRow.value = objJSON[propertyJSONKey];
                                        		result.AddRow(newRow);	
                                        	}
                                        } else {
                                        	var newRow = new Object();
                                        	newRow.id = 0;
                                        	newRow.timestamp = endDate;
                                        	newRow.value = 0;
                                        	result.AddRow(newRow);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetPropertyHistoryForNamedPropertyInNumber">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var params = {
                                            oldestFirst: undefined /* BOOLEAN */,
                                            maxItems: undefined /* NUMBER */,
                                            propertyName: propertyName /* STRING */,
                                            endDate: undefined /* DATETIME */,
                                            query: undefined /* QUERY */,
                                            startDate: undefined /* DATETIME */
                                        };
                                        
                                        // result: INFOTABLE dataShape: StringValueStream
                                        var propertyHist = Things[assetName].QueryStringPropertyHistory(params);
                                        
                                        // Iterate through Infotable
                                        var tableLength = propertyHist.rows.length;
                                        
                                        var paramsHD = {
                                            infoTableName: "InfoTable",
                                            dataShapeName: "NCR.DCS.PropertyHistoryDS"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(NCR.DCS.PropertyHistoryDS)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(paramsHD);
                                        
                                        for (var x = 0; x < tableLength; x++) {
                                            var row = propertyHist.rows[x];
                                        
                                            var jO = row.value;
                                        
                                            // Create JSON object from String
                                            var objJSON = JSON.parse(jO);
                                        
                                            //result = result + objJSON[0].Level;
                                            var newRow = new Object();
                                            newRow.id = row.id;
                                            newRow.timestamp = row.timestamp;
                                            newRow.value =parseInt(objJSON[propertyJSONKey]);
                                            result.AddRow(newRow);
                                        
                                        // formatNumber(value:NUMBER,format:STRING):STRING
                                        var id = formatNumber(0, "");
                                        
                                        
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetRebootServicesForAsset">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var params = {
                                        	infoTableName : "InfoTable",
                                        	dataShapeName : "NCR.DCS.RemoteActionCommandsDS"
                                        };
                                        var params_OS = {
                                        	propertyName: "OS_ALL" /* STRING */
                                        };
                                        
                                        //Get OS to separate Windows and Linux Calls
                                        // result: STRING
                                        var invall;
                                        if (assetName && assetName != '') {
                                        	invall = Things[assetName].GetStringPropertyValue(params_OS);
                                        } else {
                                        	invall = '';
                                        }
                                        
                                        if (invall && invall != "") {
                                        	if (invall.indexOf("[") != 0) {
                                        		invall = "[" + invall + "]";
                                        	}
                                        }
                                        
                                        if (invall == null || invall == '') {
                                        	invall = '[{"Caption":""}]';
                                        }
                                        
                                        // Create JSON object from String
                                        var objJSON = JSON.parse(invall); 
                                        
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(NCR.DCS.RemoteActionCommandsDS)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        // Commands
                                        var newEntry = new Object();
                                        
                                        // Get Path from Property Asset_ProgramDir
                                        var paramsPD = {
                                        	propertyName: "Asset_ProgramDir" /* STRING */
                                        };
                                        
                                        var apd = Things[assetName].GetStringPropertyValue(paramsPD);
                                        var progPathDefault = "C:\\Microserver";
                                        var progPath;
                                        if (apd != null && apd != '') {
                                        	progPath = apd.replace(/\\/g, '\\');
                                        } else {
                                        	progPath = progPathDefault.replace(/\\/g, '\\');
                                        }
                                        // logger.debug("progPath:" + progPath);
                                        
                                        // Enclose Path/Commands in double quotes
                                        if (objJSON[0].Caption.includes("Windows"))
                                        {
                                        newEntry.CommandName = "MS - Forceful Reboot";
                                        newEntry.Command = '"' + progPath + '\\etc\\custom\\scripts\\NCR.DCS.Windows.Console.exe" PROC Run JSON "cmd" "/c shutdown -f -r -t 10" false';
                                        newEntry.Parameters = '';
                                        result.AddRow(newEntry);
                                        
                                        newEntry.CommandName = "MS - Graceful Reboot APTRA";
                                        newEntry.Command = '"' + progPath + '\\etc\\custom\\scripts\\NCR.DCS.Windows.Console.exe" PROC Run JSON "cmd" "/c %%PROGRAM_LOCATION_FILES%%\\NCR APTRA\\SM Primitives\\SSTManage.exe" /LC abc 6" false';
                                        newEntry.Parameters = '';
                                        result.AddRow(newEntry);
                                        
                                        if(assetType == 'ATM'){
                                        
                                        } 
                                        else if(assetType == 'POS'){
                                          
                                        } 
                                        else {
                                            
                                        }
                                        }else{
                                        	newEntry.CommandName = "MS - Forceful Reboot";
                                        	newEntry.Command = '"' + progPath + '\\etc\\custom\\scripts\\NCR.DCS.Linux.Console.exe" PROC Run JSON "cmd" "shutdown -r now';
                                        	newEntry.Parameters = '';
                                        	result.AddRow(newEntry);
                                        
                                        	newEntry.CommandName = "MS - Graceful Reboot APTRA";
                                        	newEntry.Command = '"'+ progPath + '\\etc\\custom\\scripts\\NCR.DCS.Linux.Console.exe" PROC Run JSON "cmd" "shutdown -r now';
                                        	newEntry.Parameters = '';
                                        	result.AddRow(newEntry);
                                        
                                        	if (assetType == 'ATM') {
                                        
                                        	}
                                        	else if (assetType == 'POS') {
                                        
                                        	} 
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetRestartServicesForAsset">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var params = {
                                        	infoTableName : "InfoTable",
                                        	dataShapeName : "NCR.DCS.RemoteActionCommandsDS"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(NCR.DCS.RemoteActionCommandsDS)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        // Commands
                                        var newEntry = new Object();
                                        
                                        // Get Path from Property Asset_ProgramDir
                                        var paramsPD = {
                                        	propertyName: "Asset_ProgramDir" /* STRING */
                                        };
                                        
                                        var apd = Things[assetName].GetStringPropertyValue(paramsPD);
                                        var progPathDefault = "C:\\Microserver";
                                        var progPath;
                                        if (apd != null && apd != '') {
                                        	progPath = apd.replace(/\\/g, '\\');
                                        } else {
                                        	progPath = progPathDefault.replace(/\\/g, '\\');
                                        }
                                        // logger.debug("progPath:" + progPath);
                                        
                                        newEntry.CommandName = "MS - Restart McAfee Services";
                                        newEntry.Command = '"' + progPath + '\\etc\\custom\\scripts\\NCR.DCS.Windows.Console.exe" SVC Stop JSON McAfeeFramework && "' + progPath + '\\etc\\custom\\scripts\\NCR.DCS.Windows.Console.exe" SVC Start JSON McAfeeFramework';
                                        newEntry.Parameters = '';
                                        result.AddRow(newEntry);
                                        
                                        newEntry.CommandName = "MS - Restart CAF Services";
                                        newEntry.Command = '"' + progPath + '\\etc\\custom\\scripts\\NCR.DCS.Windows.Console.exe" SVC Stop JSON caf && "' + progPath + '\\etc\\custom\\scripts\\NCR.DCS.Windows.Console.exe" SVC Stop JSON WmiApSrv && "' + progPath + '\\etc\\custom\\scripts\\NCR.DCS.Windows.Console.exe" SVC Start JSON caf && "' + progPath + '\\etc\\custom\\scripts\\NCR.DCS.Windows.Console.exe" SVC Start JSON WmiApSrv';
                                        newEntry.Parameters = '';
                                        result.AddRow(newEntry);
                                        
                                        newEntry.CommandName = "MS - Restart CCM Services";
                                        newEntry.Command = '"' + progPath + '\\etc\\custom\\scripts\\NCR.DCS.Windows.Console.exe" SVC Stop JSON CcmExec && "' + progPath + '\\etc\\custom\\scripts\\NCR.DCS.Windows.Console.exe" SVC Stop JSON WmiApSrv && "' + progPath + '\\etc\\custom\\scripts\\NCR.DCS.Windows.Console.exe" SVC Stop JSON WMI && "' + progPath + '\\etc\\custom\\scripts\\NCR.DCS.Windows.Console.exe" SVC Stop JSON BITS && "' + progPath + '\\etc\\custom\\scripts\\NCR.DCS.Windows.Console.exe" SVC Stop JSON winmgmt && "' + progPath + '\\etc\\custom\\scripts\\NCR.DCS.Windows.Console.exe" SVC Start JSON CcmExec && "' + progPath + '\\etc\\custom\\scripts\\NCR.DCS.Windows.Console.exe" SVC Start JSON WmiApSrv && "' + progPath + '\\etc\\custom\\scripts\\NCR.DCS.Windows.Console.exe" SVC Start JSON WMI && "' + progPath + '\\etc\\custom\\scripts\\NCR.DCS.Windows.Console.exe" SVC Start JSON BITS && "' + progPath + '\\etc\\custom\\scripts\\NCR.DCS.Windows.Console.exe" SVC Start JSON winmgmt';
                                        newEntry.Parameters = '';
                                        result.AddRow(newEntry);
                                        
                                        if (assetType == 'ATM') {
                                        	
                                        } else if (assetType == 'POS') {
                                            
                                        } else {
                                            
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetSerialNumberForAssetByType">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        //DEBUG logger.debug("NCRDCSMASHUP::NCR.BaseDeviceHelper::GetSerialNumberForAssetByType::assetName:" + assetName);
                                        
                                        // Discover Asset Type by Thing Template Implemented
                                        
                                        // result: INFOTABLE dataShape: EntityList
                                        var ttIT = Things[assetName].GetThingTemplate();
                                        
                                        var TT = ttIT.name;
                                        
                                        // Property is based on Asset Type
                                        /*
                                        Serial Number
                                        If Template is NCR.LAPTOP = Populate Asset_Serial_Number From OS. SerialNumber value
                                        If Template is NCR.HANDHELD = Populate Asset_Serial_Number From OS. SerialNumber value
                                        If Template is NCR.ATM = Populate Asset_Serial_Number From Bios. SerialNumber value
                                        If Template is NCR.POS = Populate Asset_Serial_Number From Bios. SerialNumber value
                                        */
                                        
                                        // Query based on input as a Device, Customer and  Store
                                        var params;
                                        
                                        switch (TT) {
                                            case 'NCR.LAPTOP':
                                                params = {
                                                    propertyName: "OS_ALL" /* STRING */
                                                };
                                                break;
                                            case 'NCR.HANDHELD':
                                                params = {
                                                    propertyName: "OS_ALL" /* STRING */
                                                };
                                                break;
                                            case 'NCR.ATM':
                                                params = {
                                                    propertyName: "BIOS_ALL" /* STRING */
                                                };
                                                break;
                                            case 'NCR.POS':
                                                params = {
                                                    propertyName: "BIOS_ALL" /* STRING */
                                                };
                                                break;
                                            default:
                                                params = {
                                                    propertyName: "OS_ALL" /* STRING */
                                                };
                                                break;
                                        }
                                        
                                        // result: STRING
                                        var invall = Things[assetName].GetStringPropertyValue(params);
                                        
                                        if (invall && invall != "") {
                                            if (invall.indexOf("[") != 0) {
                                                invall = "[" + invall + "]";
                                            }
                                        }
                                        
                                        if (invall == null || invall == '') {
                                            invall = '[{"Data Not Availble":"Data Not Availble"}]';
                                        }
                                        
                                        // Create JSON object from String
                                        var objJSON = JSON.parse(invall);
                                        
                                        var paramsComp = {
                                            minDateMilliseconds: undefined /* LONG */,
                                            // Long Numeric values get converted (ex. CS, Disk, Drive) dateFormat: "RAW" /* STRING */,
                                            dateFormat: undefined /* STRING */,
                                            json: objJSON /* JSON */,
                                            dataShape: undefined /* DATASHAPENAME */
                                        };
                                        
                                        // result: INFOTABLE using datShape specified as param
                                        var compIT = Resources["Parsley"].ParseJSON(paramsComp).array;
                                        
                                        var result = compIT.SerialNumber;
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetSoftwareContentManagementMSName">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var result = '';
                                        if (tabName == 'SOFTWARE CONTENT MANAGEMENT') {
                                            result = 'TW.RSM.SFW.Mashup.SoftwareDashboard';
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetStatusCodesForEventsDD">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        if (!assetName) {
                                            assetName = '';
                                        }
                                        
                                        var query = {
                                            "filters": {
                                                "type":"And",
                                                 "filters": [{
                                                     "type": "EQ",
                                                     "fieldName": "assetName",             
                                                     "value": assetName
                                                 }]
                                            },
                                            "sorts": [{
                                                    "fieldName": "statuscode",
                                                    "isAscending": "false"
                                             }]
                                        };
                                        
                                        var params = {
                                        	maxItems: 1000 /* NUMBER */,
                                        	values: undefined /* INFOTABLE*/,
                                        	query: query /* QUERY */,
                                        	source: undefined /* STRING */,
                                        	tags: undefined /* TAGS */
                                        };
                                        
                                        // result: INFOTABLE
                                        var eDT = Things["NCR.DCS.EventsDT"].QueryDataTableEntries(params);
                                        
                                        /*
                                        var sort = new Object();
                                        sort.name = "statuscode";
                                        sort.ascending = true;
                                        eDT.Sort(sort);
                                        */
                                        
                                        var params = {
                                        	t: eDT /* INFOTABLE */,
                                        	columns: "statuscode" /* STRING */
                                        };
                                        
                                        // result: INFOTABLE
                                        var scIT = Resources["InfoTableFunctions"].Distinct(params);
                                        
                                        // Create Empty INFOTABLE to add result rows to after "ALL"
                                        var params = {
                                        	infoTableName : "InfoTable",
                                        	dataShapeName : "NCR.DCS.AssetEventsStatusDS"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(NCR.DCS.AssetEventsStatusDS)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        var newRow = new Object();
                                        newRow.statuscode = "ALL";
                                        result.AddRow(newRow);
                                        
                                        var tableLength = scIT.rows.length;
                                        for (var y = 0; y < tableLength; y++) {
                                        	var sc = scIT.rows[y];
                                            // result: INFOTABLE  
                                           	result.AddRow(sc);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetStatusSelectionsForAssetEvents">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var params = {
                                            maxItems: 1000000
                                        };
                                        
                                        var shape = {
                                            infoTableName : "InfoTable",
                                            dataShapeName : "NCR.DCS.AssetEventsStatusDS"
                                        };
                                        
                                        var table = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(shape);
                                        
                                        table.AddRow({
                                            statuscode: 'All',
                                        });
                                        
                                        table.AddRow({
                                            statuscode: 'M10',
                                        });
                                        
                                        table.AddRow({
                                            statuscode: 'M12',
                                        });
                                        
                                        table.AddRow({
                                            statuscode: 'M23',
                                        });
                                        
                                        table.AddRow({
                                            statuscode: 'M90',
                                        });
                                        
                                        var result = table;
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetStorageGaugeValDispStr">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        // DEBUG result = "43.4 GB / 252.7 GB";
                                        // DSK_ALL FreeSpace / Size
                                        
                                        var params = {
                                        	propertyName: "DSK_ALL" /* STRING */
                                        };
                                        
                                        // result: STRING
                                        var invall;
                                        if (assetName && assetName != '') {
                                        	invall = Things[assetName].GetStringPropertyValue(params);
                                        } else {
                                            invall = '';
                                        }
                                        
                                        var result = "";
                                        
                                        if (invall && invall != "") {	
                                            if (invall.indexOf("[") != 0) {
                                                invall = "[" + invall + "]";
                                            }    
                                        } 
                                        
                                        if (invall == null || invall =='') {
                                            invall = '[{"Size":"0","FreeSpace":"0"}]';
                                        }
                                        
                                        // Create JSON object from String
                                        var objJSON = JSON.parse(invall); 
                                        
                                        // Parse through and look for object that has Name == 'C:'
                                        var objC;
                                        for (var i = 0; i < objJSON.length; i++) {
                                            if (objJSON[i].Name == "C:") {
                                                objC = objJSON[i];
                                            }
                                        }
                                        
                                        try {
                                        
                                            // Formula Bytes/1073741824 = GB
                                            var used = (parseInt(objC.Size) - parseInt(objC.FreeSpace)) / 1073741824;
                                            var avail = parseInt(objC.Size) / 1073741824;
                                        
                                            result = used.toFixed(2) + " GB / " + avail.toFixed(2) + " GB";
                                        
                                        } catch (e) {}
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetTabNameForMashup">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var result;
                                        if (tabName == "NCR.DCS.DefaultAssetManagementMashup") {
                                            result = "Tab1Name";
                                        } else {
                                            result = "Tab2Name";
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetVisibilityForRemoteActions">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var result = true;
                                        
                                        // Restrict access to specific  groups
                                        // result: INFOTABLE dataShape: EntityList
                                        var uAG = Resources["CurrentSessionInfo"].GetCurrentUserGroups();
                                        
                                        // TCS L2 Group
                                        var l2 = false;
                                        
                                        // Service Desk - Should not have access to Open Files
                                        var sd = false;
                                        
                                        var tableLength = uAG.rows.length;
                                        for (var y = 0; y < tableLength; y++) {
                                        	if (uAG.rows[y].name == 'NCR.ICPSpecialistL2Group') {
                                        		l2 = true;
                                        	}
                                        	if (uAG.rows[y].name == 'NCR.ServiceDesk') {
                                        		sd = true;
                                        	}
                                        }
                                        
                                        if (sd == true) { 
                                        	result = false;
                                        }
                                        
                                        // logger.debug("ShowFilesTabAssetMashup::assetType:" + assetType + "::result:" + result);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="IsDeviceDocked">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var params = {
                                            propertyName: "BAT_ALL" /* STRING */
                                        };
                                        
                                        // result: STRING
                                        var invall = Things[assetName].GetStringPropertyValue(params);
                                        if (invall != null) {
                                            var batteryObj = JSON.parse(invall);
                                            var deviceDocked = batteryObj["Docked"]
                                            logger.debug("Docked" + deviceDocked)
                                           
                                        }
                                        if (deviceDocked == false)
                                          var  result = true;
                                        else
                                          var  result = false;
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="ProcessAgentConfig">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var result = 'Executed ' + seqfile;
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="ProcessEventRulesCSVImport">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        // logger.debug("path:" + path + ":repositoryName:" + repositoryName + ":fileName:" + fileName + ":fullPath:" + fullPath);
                                        // Output: path:/:repositoryName:DemoRepo:fileName:EventRules.csv:fullPath://EventRules.csv
                                        
                                        var params = {
                                        	path: path + "" + fileName /* STRING */,
                                        	columnMappings: "EventID;Severity;Device;CustomerName;Category;EventDescription;MinimumSecondsOpen;MaximumSecondsOpen;ServiceType;Impact;Status;StatusReason;Urgency;EventCountThreshold;ITSMCategory1;ITSMCategory2;ITSMCategory3;IncidentResolveNotes" /* STRING */,
                                        	hasHeader: true /* BOOLEAN */,
                                        	longitudeField: undefined /* NUMBER */,
                                        	dateFormat: undefined /* STRING */,
                                        	fileRepository: repositoryName /* THINGNAME */,
                                        	latitudeField: undefined /* NUMBER */,
                                        	fieldDelimiter: "," /* STRING */,
                                        	stringDelimiter: undefined /* STRING */,
                                            dataShape: "NCR.DCS.EventRulesDS" /* DATASHAPENAME */
                                        };
                                        
                                        // result: INFOTABLE
                                        var csvData;
                                        var result = "File Processed Successfully";
                                        
                                        try {
                                        	
                                        	csvData = Resources["Parsley"].ParseCSV(params);
                                        
                                        	// DEBUG logger.debug("NCRDCSMASHUP::NCR.BaseDeviceHelper::ProcessEventRulesCSVImport::ParseCSV:Completed");
                                        
                                        	// Update NCR.DCS.EventsRulesDT
                                        	/*
                                        	var values = Things["NCR.DCS.EventRulesDT"].CreateValues();
                                        	
                                        	values.Impact = undefined; //STRING
                                        	values.Status = undefined; //STRING
                                        	values.StatusReason = undefined; //STRING
                                        	values.EventCountThreshold = undefined; //NUMBER
                                        	values.Category = undefined; //STRING
                                        	values.Device = undefined; //STRING
                                        	values.MinimumSecondsOpen = undefined; //NUMBER
                                        	values.Severity = undefined; //STRING [Primary Key]
                                        	values.ServiceType = undefined; //STRING
                                        	values.EventID = undefined; //STRING [Primary Key]
                                        	values.CustomerName = undefined; //STRING [Primary Key]
                                        	values.Urgency = undefined; //STRING
                                        	values.EventDescription = undefined; //STRING
                                        	values.MaximumSecondsOpen = undefined; //NUMBER
                                        	values.ITSMCategory1 = undefined; //STRING
                                        	values.ITSMCategory2 = undefined; //STRING
                                        	values.ITSMCategory3 = undefined; //STRING
                                        	values.IncidentResolveNotes = undefined; //STRING
                                        	*/
                                        	var paramsDTE = {
                                        		sourceType: undefined /* STRING */,
                                        		values: csvData /* INFOTABLE*/,
                                        		location: undefined /* LOCATION */,
                                        		source: Resources["CurrentSessionInfo"].GetCurrentUser() /* STRING */,
                                        		tags: undefined /* TAGS */
                                        	};
                                        
                                        	// no return
                                        	Things["NCR.DCS.EventRulesDT"].AddDataTableEntries(paramsDTE);
                                        
                                        	// DEBUG logger.debug("NCRDCSMASHUP::NCR.BaseDeviceHelper::ProcessEventRulesCSVImport::AddDataTableEntries:Completed");
                                        
                                        	// Delete CSV File from Repository
                                        	var paramsDF = {
                                        		path: path + "" + fileName /* STRING */
                                        	};
                                        
                                        	// no return
                                        	Things[repositoryName].DeleteFile(paramsDF);
                                        	result = "Import Successful";
                                        
                                        	// DEBUG logger.debug("NCRDCSMASHUP::NCR.BaseDeviceHelper::ProcessEventRulesCSVImport::DeleteFile:Completed");
                                        
                                        } catch (e) {
                                        	logger.error("NCRDCSMASHUP::NCR.BaseDeviceHelper::ProcessEventRulesCSVImport::Error:" + e.toString());
                                        
                                        	//Delete CSV File from Repository
                                        	var paramsDF = {
                                        		path: path + "" + fileName /* STRING */
                                        	};
                                        
                                        	//no return
                                        	Things[repositoryName].DeleteFile(paramsDF);
                                        
                                        	result = "Import Failed";
                                        }
                                        
                                        // DEBUG logger.debug("NCRDCSMASHUP::NCR.BaseDeviceHelper::ProcessEventRulesCSVImport::End Of Service");
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="ProcessHandHeldRemoteAction">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        //DEBUG logger.debug("NCRDCSMASHUP::NCR.BaseDeviceHelper::ProcessHandHeldRemoteAction::assetName:" + assetName);
                                        
                                        var data;
                                        var systemDiagdata;
                                        
                                        if (blueToothTest) {
                                        
                                            // result: STRING
                                            data = Things[assetName].getBluetoothDiagnostics();
                                        
                                        } else if (wifiTest) {
                                            
                                            // result: STRING
                                            data = Things[assetName].getWifiDiagnostics();
                                        
                                        } else if (getSystemDiagnostics) {
                                        
                                            // result: STRING contains JSON
                                            systemDiagdata = Things[assetName].getSystemDiagnostics();
                                        
                                        } else if (unLockHandheld) {
                                        
                                            // result: BOOLEAN
                                            data = Things[assetName].unLockHandheld();  
                                        
                                            if (data == true) {
                                                data = '{"Unlock Handheld": "Successful"}';
                                            } else {
                                                data = '{"Unlock Handheld": "Failed"}';
                                            }    
                                        
                                        } else if (clearCache) {
                                        
                                            // result: BOOLEAN
                                            data = Things[assetName].clearCache();
                                        
                                            if (data == true) {
                                                data = '{"Cache Cleared": "Successful"}';
                                            } else {
                                                data = '{"Cache Cleared": "Failed"}';
                                            }
                                        
                                        } else if (cacheSize) {
                                            
                                            // result: NUMBER
                                            var cSize = Things[assetName].getCacheSize();
                                            //DEBUG logger.debug("NCRDCSMASHUP::NCR.BaseDeviceHelper::ProcessHandHeldRemoteAction::cacheSize::cSize:" + cSize);
                                        
                                            data = '{"Cache Size":"' + cSize.toString() + '"}'
                                            //DEBUG logger.debug("NCRDCSMASHUP::NCR.BaseDeviceHelper::ProcessHandHeldRemoteAction::cacheSize::data:" + cSize);
                                        
                                        } else if (enableBluetooth) {
                                        
                                           //DEBUG logger.debug("NCRDCSMASHUP::NCR.BaseDeviceHelper::ProcessHandHeldRemoteAction::enableBluetooth:" + enableBluetooth);
                                           
                                            var stateBT = false;
                                        
                                            if (enableBluetooth == "true") {
                                                stateBT = true;
                                            }
                                        
                                            //DEBUG logger.debug("NCRDCSMASHUP::NCR.BaseDeviceHelper::ProcessHandHeldRemoteAction::stateBT:" + stateBT);
                                        
                                            var params = {
                                                enable: stateBT /* BOOLEAN */
                                            };
                                        
                                            // result: BOOLEAN
                                            data = Things[assetName].setBluetooth(params);
                                        
                                            if (data == true) {
                                                if (stateBT == true) {
                                                    data = '{"Bluetooth Enabled": "Successful"}';
                                                } else {
                                                    data = '{"Bluetooth Disabled": "Successful"}';
                                                }
                                                
                                            } else {
                                                if (stateBT == true) {
                                                    data = '{"Bluetooth Enabled": "Failed"}';
                                                } else {
                                                    data = '{"Bluetooth Disabled": "Failed"}';
                                                }
                                            }
                                        
                                        } else if (ledFlashCradle) {
                                        
                                            // result: BOOLEAN
                                            data = Things[assetName].ledFlashCradle();
                                        
                                            if (data == true) {
                                                data = '{"LED Flash Cradle": "Successful"}';
                                            } else {
                                                data = '{"LED Flash Cradle": "Failed"}';
                                            }
                                        
                                        } else if (rebootHandHeld) {
                                        
                                            if (deviceDocked == true) {        
                                                // no return
                                                try {
                                                    Things[assetName].rebootHandHeld();
                                                    data = '{"Reboot": "Reboot request sent to device"}';
                                                } catch (e) {
                                                    // data = '{"Reboot": "Reboot request failed"}';
                                                    data = '{"Reboot": "Reboot request sent to device"}';
                                                }
                                            } else {
                                                data = '{"Reboot": "Reboot request not sent, device needs to be docked to be rebooted"}';        
                                            }   
                                        
                                        } else if (brightnesscontrol) {
                                            
                                            var paramsBC = {
                                        	    percentage: brightnesscontrol /* NUMBER */
                                            };
                                        
                                            // result: BOOLEAN
                                            var data = Things[assetName].setCustomBrightness(paramsBC);
                                        
                                            if (data == true) {
                                                data = '{"Brightness": ' + brightnesscontrol + '}';
                                            } else {
                                                data = '{"Brightness": "Failed"}';
                                            }
                                        
                                        } else if (brightnessAutoMode) {
                                            var stateBC = false
                                            if (brightnessAutoMode == "true") {
                                                stateBC = true
                                            }
                                            var params = {
                                                mode: stateBC /* BOOLEAN */
                                            };
                                        
                                            // result: BOOLEAN
                                            data = Things[assetName].setBrightnessAutoMode(params);
                                           // logger.debug("stateBC" + stateBC);
                                        
                                            if (data == true) {
                                                if (stateBC == true) {
                                                    data = '{"Brigtness AutoMode Enabled : ": " Successful " }';
                                                } else {
                                                    data = '{"Brigtness ManualMode Enabled :": " Successful" }';
                                                }
                                            }
                                            else {
                                                if (stateBC == true) {
                                                    data = '{"Brigtness AutoMode Enabled : ": " Failed " }';
                                                } else
                                                    data = '{"Brigtness ManualMode Enabled : ": " Failed " }';
                                            }
                                        
                                        } else {
                                        
                                        }
                                        
                                        var objT;
                                        var txt = "";
                                        
                                        // Generate HTML
                                        if (data && data != "") {
                                        
                                            if (data.indexOf("[") != 0) {
                                                data = "[" + data + "]";
                                            }
                                        
                                            // Create JSON object from String
                                            objT = JSON.parse(data);
                                        
                                            //Create Property Table table rows
                                            //Add JSON data to table as rows
                                            txt += "<table border='0' class='tblfixed'>";
                                            txt += "<tbody class='tbodyfixed'>";
                                        
                                            for (x in objT[0]) {
                                                txt += "<tr class='trfixed'>";
                                                txt += "<td class='tdfixed'>";
                                                txt += x;
                                                txt += "</td>";
                                        
                                                txt += "<td class='tdfixed'>";
                                                txt += objT[0][x];
                                                txt += "</td>";
                                                txt += "</tr>";
                                        
                                            }
                                        
                                            txt += "</tbody></table>";
                                        
                                        } else if (systemDiagdata && systemDiagdata != "") {
                                            // Create JSON object from String
                                            var objDiagnostics = JSON.parse(systemDiagdata);
                                        
                                            for (var x in objDiagnostics) {
                                                var obj = {
                                                    "cpuInfoKey": "Cpu Info",
                                                    "memInfoKey": "Memory Info",
                                        
                                                    "appKey": "Installed Apps",
                                                    "batteryInfoKey": "Battery Info",
                                                    "storage_info": "Storage Info"
                                                }
                                        
                                                if (x === "current_date_time")
                                                    continue
                                        
                                                if (x === "cache_size")
                                                    continue
                                                for (var key in obj) {
                                                    if (key.match(x))
                                                        var header = obj[key]
                                                }
                                        
                                                var innerObj = objDiagnostics[x]
                                                txt += "<b>&nbsp;" + header + "<br/><br/></b>"
                                                txt += "<table class='tblfixedHH' border='0'>";
                                                txt += "<tbody class='tbodyfixed'>";
                                        
                                                for (var innerKey in innerObj) {
                                                    if (x === "storage_info") {
                                                        for (var storageKey in innerObj[innerKey]) {
                                                            txt += "<tr class='trfixed'>";
                                                            txt += "<td class='tdfixed' align='left'' width='50%'>";
                                                            txt += storageKey;
                                                            txt += "</td>";
                                                            txt += "<td class='tdfixed'width='50%' align='center'>";
                                                            txt += innerObj[innerKey][storageKey];
                                                            txt += "</td>";
                                                            txt += "</tr>";
                                                        }
                                        
                                        
                                                    }
                                                    else {
                                                        txt += "<tr class='trfixed'>";
                                                        txt += "<td class='tdfixed' width='50%' align='left'  >";
                                                        txt += innerKey;
                                                        txt += "</td>";
                                        
                                                        txt += "<td class='tdfixed' width='50%' align='center'>";
                                                        txt += innerObj[innerKey];
                                                        txt += "</td>";
                                                        txt += "</tr>";
                                                    }
                                        
                                                }
                                        
                                                txt += "</tbody></table>";
                                            }
                                        
                                        } else {
                                            txt += "<table border='0' class='tblfixed'><tbody class='tbodyfixed'>";
                                            txt += "<tr class='trfixed'><td class='tdfixed'>No Output from Remote Action</td><td class='tdfixed'></td></tr>";
                                            txt += "</tbody></table>";
                                        }
                                        
                                        var result = txt;
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="ProcessHandHeldRemoteActionCopy">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var data;
                                        var systemDiagdata;
                                        
                                        if (blueToothTest) {
                                        
                                            // result: STRING
                                            data = Things[assetName].getBluetoothDiagnostics();
                                        
                                        }
                                        else if (wifiTest) {
                                        
                                            // result: STRING
                                            data = Things[assetName].getWifiDiagnostics();
                                        
                                        } else if (getSystemDiagnostics) {
                                        
                                            // result: STRING contains JSON
                                            systemDiagdata = Things[assetName].getSystemDiagnostics();
                                        
                                        } else if (unLockHandheld) {
                                        
                                            // result: BOOLEAN
                                            data = Things[assetName].unLockHandheld();
                                        
                                            if (data == true) {
                                                data = '{"Unlock Handheld": "Successful"}';
                                            } else {
                                                data = '{"Unlock Handheld": "Failed"}';
                                            }
                                        
                                        } else if (clearCache) {
                                        
                                            // result: BOOLEAN
                                            data = Things[assetName].clearCache();
                                        
                                            if (data == true) {
                                                data = '{"Cache Cleared": "Successful"}';
                                            } else {
                                                data = '{"Cache Cleared": "Failed"}';
                                            }
                                        
                                        } else if (enableBluetooth) {
                                        
                                            var params = {
                                                enable: true /* BOOLEAN */
                                            };
                                        
                                            // result: BOOLEAN
                                            data = Things[assetName].setBluetooth(params);
                                        
                                            if (data == true) {
                                                data = '{"Bluetooth Enabled": "Successful"}';
                                            } else {
                                                data = '{"Bluetooth Enabled": "Failed"}';
                                            }
                                        
                                        } else if (ledFlashCradle) {
                                        
                                            // result: BOOLEAN
                                            data = Things[assetName].ledFlashCradle();
                                        
                                            if (data == true) {
                                                data = '{"LED Flash Cradle": "Successful"}';
                                            } else {
                                                data = '{"LED Flash Cradle": "Failed"}';
                                            }
                                        
                                        } else if (rebootHandheld) {
                                        
                                            var param = {
                                                propertyName: "BAT_ALL" /* STRING */
                                            };
                                        
                                            // result: STRING
                                            var invall = Things[assetName].GetStringPropertyValue(param);
                                            if (invall != null) {
                                                var batteryObj = JSON.parse(invall);
                                                var deviceDocked = batteryObj["Docked"]
                                                logger.debug("Docked" + deviceDocked)
                                            }
                                        
                                            if (deviceDocked == true) {
                                                // no return
                                                try {
                                                    Things[assetName].rebootHandHeld();
                                                    data = '{"Reboot": "Reboot request sent to device"}';
                                                } catch (e) {
                                                     data = '{"Reboot": "Reboot request failed"}';
                                                   // data = '{"Reboot": "Reboot request sent to device"}';
                                                }
                                            } else {
                                                data = '{"Reboot": "Reboot request not sent, device needs to be docked to be rebooted"}';
                                            }
                                        
                                        } else if (brightnesscontrol) {
                                        
                                            var paramsBC = {
                                                percentage: brightnesscontrol /* NUMBER */
                                            };
                                        
                                            // result: BOOLEAN
                                            var data = Things[assetName].setCustomBrightness(paramsBC);
                                        
                                            if (data == true) {
                                                data = '{"Brightness": ' + brightnesscontrol + '}';
                                            } else {
                                                data = '{"Brightness": "Failed"}';
                                            }
                                        
                                        } else if (brightnessAutoControl) {
                                        
                                            var stateBC = false 
                                                if(brightnessAutoControl == "true"){
                                                    stateBC = true
                                                }
                                            var params = {
                                                enable: stateBC /* BOOLEAN */
                                            };
                                        
                                            // result: BOOLEAN
                                            data = Things[assetName].setBrightnessAutoMode(params);
                                        
                                            if (data == true){ 
                                                if(stateBC == true ){
                                                data = '{"Brigtness AutoMode Enabled : ": " Successful " }';
                                                 } else {
                                                data = '{"Brigtness ManualMode Enabled :": " Successful" }'; }
                                                }
                                            else{
                                                if(stateBC == true){
                                                    data = '{"Brigtness AutoMode Enabled : ": " Failed " }';
                                                }else
                                                    data = '{"Brigtness ManualMode Enabled : ": " Failed " }';
                                            }
                                        
                                        
                                        } else if (cacheSize) {
                                            var sizeCache = Things[assetName].getCacheSize();
                                        
                                        }
                                        else {
                                        
                                        }
                                        
                                        var objT;
                                        var txt = "";
                                        
                                        // Generate HTML
                                        logger.debug("DATA   " + data)
                                        if (data && data != "") {
                                        
                                            if (data.indexOf("[") != 0) {
                                                data = "[" + data + "]";
                                            }
                                        
                                            // Create JSON object from String
                                            objT = JSON.parse(data);
                                        
                                            //Create Property Table table rows
                                            //Add JSON data to table as rows
                                            txt += "<table  border='0' class='tblfixed'>";
                                            txt += "<tbody class='tbodyfixed'>";
                                        
                                            for (x in objT[0]) {
                                                txt += "<tr class='trfixed'>";
                                                txt += "<td class='tdfixed'>";
                                                txt += x;
                                                txt += "</td>";
                                        
                                                txt += "<td class='tdfixed'>";
                                                txt += objT[0][x];
                                                txt += "</td>";
                                                txt += "</tr>";
                                        
                                            }
                                        
                                            txt += "</tbody></table>";
                                        
                                        }
                                        else if (sizeCache && sizeCache != "") {
                                            txt += "<H2>" + sizeCache + "  " + "Bytes" + "</H2>"
                                        }
                                        else if (systemDiagdata && systemDiagdata != "") {
                                            // Create JSON object from String
                                            var objDiagnostics = JSON.parse(systemDiagdata);
                                        
                                            for (var x in objDiagnostics) {
                                        
                                                var obj = {
                                                    "cpuInfoKey": "Cpu Info",
                                                    "memInfoKey": "Memory Info",
                                        
                                                    "appKey": "Installed Apps ",
                                                    "batteryInfoKey": "Battery Info",
                                                    "storage_info": "Storage Info"
                                                }
                                        
                                        
                                        
                                                if (x === "current_date_time")
                                                    continue
                                        
                                                if (x === "cache_size")
                                                    continue
                                                for (var key in obj) {
                                                    if (key.match(x))
                                                        var header = obj[key]
                                                }
                                        
                                                var innerObj = objDiagnostics[x]
                                                txt += "<H2>" + header + "</H2>"
                                                txt += "<table  width=100% class='fixed'  >";
                                                txt += "<tbody class='tbodyfixed'>";
                                        
                                        
                                        
                                                for (var innerKey in innerObj) {
                                                    if (x === "storage_info") {
                                                        for (var storageKey in innerObj[innerKey]) {
                                                            txt += "<tr class='trfixed'>";
                                                            txt += "<td class='tdfixed' align='left'' width='50%'>";
                                                            txt += storageKey;
                                                            txt += "</td>";
                                                            txt += "<td class='tdfixed'width='50%' align='center'>";
                                                            txt += innerObj[innerKey][storageKey];
                                                            txt += "</td>";
                                                            txt += "</tr>";
                                                        }
                                        
                                        
                                                    }
                                                    else {
                                                        txt += "<tr class='trfixed'>";
                                                        txt += "<td class='tdfixed' width='50%' align='left'  >";
                                                        txt += innerKey;
                                                        txt += "</td>";
                                        
                                                        txt += "<td class='tdfixed' width='50%' align='center'>";
                                                        txt += innerObj[innerKey];
                                                        txt += "</td>";
                                                        txt += "</tr>";
                                                    }
                                        
                                                }
                                        
                                        
                                        
                                        
                                                txt += "</tbody></table>";
                                            }
                                        
                                        
                                        }
                                        else {
                                            txt += "<table border='0' class='tblfixed'><tbody class='tbodyfixed'>";
                                            txt += "<tr class='trfixed'><td class='tdfixed'>No Output from Remote Action</td><td class='tdfixed'></td></tr>";
                                            txt += "</tbody></table>";
                                        }
                                        
                                        var result = txt;
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="resetAssetDropDown">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var result = '';
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="SetSCMImageVisibility">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var result;
                                        if (selectedTabValue == "SOFTWARE CONTENT MANAGEMENT") {
                                            result = true;
                                        } else {
                                            result = false;
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="SetSCMImageVisibilityForMenu">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var result;
                                        if (selectedMenu == "TW.RSM.SFW.Mashup.SoftwareDashboard") {
                                            result = true;
                                        } else {
                                            result = false;
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="SetSearchVisibility">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var result;
                                        if (selectedTabValue == "SOFTWARE CONTENT MANAGEMENT"
                                            || selectedTabValue == "EVENT MANAGEMENT"
                                            || selectedTabValue == "ANALYTICS") {
                                            result = false;
                                        } else {
                                            result = true;
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="SetSearchVisibilityForMenu">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        // NCR.DCS.DefaultAssetManagementMashup, TW.RSM.SFW.Mashup.SoftwareDashboard,
                                        // NCR.DCS.EventManagementMashup, NCR.DCS.AnalyticsMashup 
                                        var result;
                                        if (selectedMenu == "TW.RSM.SFW.Mashup.SoftwareDashboard"
                                            //|| selectedMenu == "NCR.DCS.EventManagementMashup"
                                            //|| selectedMenu == "NCR.DCS.AnalyticsMashup"
                                            ) {
                                            result = false;
                                        } else {
                                            result = true;
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="SetVisibilityFileCopyButtons">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var result = true;
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="SetVisibleAssetWidgets">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var result = true;
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="ShowFilesTabAssetMashup">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        //	DEBUG logger.debug("NCR.BaseDeviceHelper::ShowFilesTabAssetMasup::assetType:" + assetType);
                                        
                                        var result = false;
                                        var deviceSupported = false;
                                        if(assetType.toUpperCase() == "ATM"){
                                        	deviceSupported = true;
                                        }
                                        if (assetType.toUpperCase() == "POS"){
                                        	deviceSupported = true;
                                        }
                                        if (assetType.toUpperCase() == "LAPTOP") {
                                        	deviceSupported = true;
                                        }
                                        if (assetType.toUpperCase() == "HANDHELD") {
                                        	deviceSupported = true;
                                        }
                                        if (assetType.toUpperCase() == "MGMTSERVER") {
                                        	deviceSupported = true;
                                        }
                                        
                                        // Restrict access to specific  groups
                                        // result: INFOTABLE dataShape: EntityList
                                        var uAG = Resources["CurrentSessionInfo"].GetCurrentUserGroups();
                                        
                                        // TCS L2 Group
                                        var l2 = false;
                                        
                                        // Service Desk - Should not have access to Open Files
                                        var sd = false;
                                        
                                        var tableLength = uAG.rows.length;
                                        for (var y = 0; y < tableLength; y++) {
                                        	if (deviceSupported == true) {
                                        		if (uAG.rows[y].name == 'NCR.ICPSpecialistL2Group') {
                                        			l2 = true;
                                        		}
                                        		if (uAG.rows[y].name == 'NCR.ServiceDesk') {
                                        			sd = true;
                                        		}
                                        	}	
                                        }
                                        
                                        if (l2 == true && sd == false) {
                                        	result = true;
                                        }
                                        
                                        // logger.debug("ShowFilesTabAssetMashup::assetType:" + assetType + "::result:" + result);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="ShowRemoteActions">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var result = false;
                                        var deviceSupported = false;
                                        if(assetType == "ATM"){
                                        	deviceSupported = true;
                                        }
                                        if(assetType == "POS"){
                                        	deviceSupported = true;
                                        }
                                        if (assetType == "LAPTOP") {
                                        	deviceSupported = true;
                                        }
                                        if (assetType == "MGMTSERVER") {
                                        	deviceSupported = true;
                                        } 
                                        
                                        // Restrict access to specific  groups
                                        // result: INFOTABLE dataShape: EntityList
                                        var uAG = Resources["CurrentSessionInfo"].GetCurrentUserGroups();
                                        
                                        var tableLength = uAG.rows.length;
                                        for (var y = 0; y < tableLength; y++) {
                                        	if (deviceSupported == true) {
                                        		if (uAG.rows[y].name == 'NCR.ICPSpecialistL2Group') {
                                        				result = true;
                                        		}
                                        	}	
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="TerminateUserSession">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        /* Requires Administrator Group access */
                                        var params = {
                                        	userName: userName 
                                        };
                                        
                                        // no return
                                        Resources["CurrentSessionInfo"].TerminateUserSessions(params);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="UpdateFromSoupService">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var updateparams = {
                                            Summary: UpdateSummary /* STRING */,
                                            Notes: UpdateNotes /* STRING */,
                                            Resolution: UpdateResolution /* STRING */,
                                            Urgency: UpdateUrgency /* STRING */,
                                            WOInfoSummary: UpdateWOInfoSummary /* STRING */,
                                            IncidentNumber: IncidentNum /* Mandatory STRING */,
                                            Status: UpdateStatus /* STRING */,
                                            StatusReason: Statusreason,
                                            Company: IncidentCompany
                                        };
                                        
                                        var updatexml = Things["NCR.DCS.DATABASE.THING"].CreateUpdateXml(updateparams);
                                        var content = updatexml.xmlinput;
                                        var headers = new Object();
                                        
                                        headers.SOAPAction = "";
                                        headers.Authorization = 'Basic c2EyMzA3NjE6V2VsY29tZURFQzIwMTdAOTBEZUMyMDE3';
                                        
                                        var params = {
                                            proxyScheme: undefined /* STRING */,
                                            headers: headers /* JSON */,
                                            ignoreSSLErrors: undefined /* BOOLEAN */,
                                            useNTLM: undefined /* BOOLEAN */,
                                            workstation: undefined /* STRING */,
                                            useProxy: undefined /* BOOLEAN */,
                                            withCookies: undefined /* BOOLEAN */,
                                            proxyHost: undefined /* STRING */,
                                            url: "https://osbcert-ha.ncr.com/ext/Services/IOT/IOTNEOSIntegrationWS" /* STRING */,
                                            content: content /* XML */,
                                            timeout: undefined /* NUMBER */,
                                            proxyPort: undefined /* INTEGER */,
                                            password: undefined /* STRING */,
                                            domain: undefined /* STRING */,
                                            username: undefined /* STRING */
                                        };
                                        
                                        // result: XML
                                        var resultXML = Resources["ContentLoaderFunctions"].PostXML(params);
                                        var result = "" + resultXML;
                                        
                                        // TODO: ms50001: 2018-04-20: What are the error codes we can receive?
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                </ServiceImplementations>
                <Subscriptions></Subscriptions>
            </ThingShape>
            <PropertyBindings></PropertyBindings>
            <RemotePropertyBindings></RemotePropertyBindings>
            <RemoteServiceBindings></RemoteServiceBindings>
            <RemoteEventBindings></RemoteEventBindings>
            <AlertConfigurations></AlertConfigurations>
            <ImplementedShapes></ImplementedShapes>
            <ThingProperties></ThingProperties>
        </Thing>
    </Things>
</Entities>
