<?xml version="1.0" encoding="UTF-8"?>
<Entities
 build="b557"
 majorVersion="8"
 minorVersion="2"
 modelPersistenceProviderPackage="PostgresPersistenceProviderPackage"
 revision="7"
 schemaVersion="1020"
 universal="">
    <Things>
        <Thing
         description="NCR Utlities Thing"
         documentationContent=""
         effectiveThingPackage="ConfiguredThing"
         enabled="true"
         homeMashup=""
         identifier=""
         lastModifiedDate="2018-11-06T02:37:24.669Z"
         name="NCRDCS"
         projectName="DCS. Project.Main"
         published="false"
         tags="Applications:NCR"
         thingTemplate="GenericThing"
         valueStream="">
            <avatar>
            <![CDATA[
            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
            ]]>
            </avatar>
            <DesignTimePermissions>
                <Create></Create>
                <Read>
                    <Principal
                     isPermitted="false"
                     name="NCR.DCS.EMS"
                     type="Group"></Principal>
                </Read>
                <Update>
                    <Principal
                     isPermitted="false"
                     name="NCR.DCS.EMS"
                     type="Group"></Principal>
                </Update>
                <Delete>
                    <Principal
                     isPermitted="false"
                     name="NCR.DCS.EMS"
                     type="Group"></Principal>
                </Delete>
                <Metadata></Metadata>
            </DesignTimePermissions>
            <RunTimePermissions>
                <Permissions
                 resourceName="*">
                    <PropertyRead>
                        <Principal
                         isPermitted="true"
                         name="NCR.DCS.EMS"
                         type="Group"></Principal>
                    </PropertyRead>
                    <PropertyWrite>
                        <Principal
                         isPermitted="true"
                         name="NCR.DCS.EMS"
                         type="Group"></Principal>
                    </PropertyWrite>
                    <ServiceInvoke>
                        <Principal
                         isPermitted="true"
                         name="NCR.DCS.EMS"
                         type="Group"></Principal>
                    </ServiceInvoke>
                    <EventInvoke>
                        <Principal
                         isPermitted="true"
                         name="NCR.DCS.EMS"
                         type="Group"></Principal>
                    </EventInvoke>
                    <EventSubscribe>
                        <Principal
                         isPermitted="true"
                         name="NCR.DCS.EMS"
                         type="Group"></Principal>
                    </EventSubscribe>
                </Permissions>
            </RunTimePermissions>
            <VisibilityPermissions>
                <Visibility>
                    <Principal
                     isPermitted="true"
                     name="DCS:EMS"
                     type="OrganizationalUnit"></Principal>
                </Visibility>
            </VisibilityPermissions>
            <ConfigurationTables></ConfigurationTables>
            <ThingShape>
                <PropertyDefinitions></PropertyDefinitions>
                <ServiceDefinitions>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description="This service is called from the edge to register itself"
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="RegisterDevice">
                        <ResultType
                         baseType="NOTHING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description="The name of the thing template we need to use to create the Thing."
                             name="DCSthingTemplateName"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description="Serial number representing the thing for its unique name"
                             name="thingName"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description="This service is called from the edge to register itself"
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="RegisterDeviceCopy">
                        <ResultType
                         baseType="NOTHING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description="The name of the thing template we need to use to create the Thing."
                             name="DCSthingTemplateName"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description="Serial number representing the thing for its unique name"
                             name="thingName"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                </ServiceDefinitions>
                <EventDefinitions></EventDefinitions>
                <ServiceMappings></ServiceMappings>
                <ServiceImplementations>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="RegisterDevice">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        // 2018-07-11: ms500001: updated the logging to use standard NCR DCS format.
                                        
                                        var enablescriptdebug = true;
                                        
                                        if (thingName == "WMT_") {
                                            if (enablescriptdebug) { logger.warn("Things::NCRDCS::RegisterDevice::Invalid Thing Name: " + thingName); }	
                                        } else {
                                            try
                                            {	
                                                if (enablescriptdebug) { logger.debug("Things::NCRDCS::RegisterDevice::CheckThingExist: " + thingName); }
                                                Things[thingName].name;
                                                if (enablescriptdebug) { logger.debug("Things::NCRDCS::RegisterDevice::FoundThing: " + thingName);}
                                            }
                                            catch(e)
                                            {
                                                logger.info("Things::NCRDCS::RegisterDevice::CreateThing: " + thingName);
                                        
                                                var params = {
                                                    name: thingName,
                                                    description: "Automatically Registered DCS Thing",
                                                    thingTemplateName: DCSthingTemplateName,
                                                    tags: "Applications:NCR"
                                                };
                                        
                                                Resources["EntityServices"].CreateThing(params);
                                                if (enablescriptdebug) { logger.debug("Things::NCRDCS::RegisterDevice::TemplateUsed: " + DCSthingTemplateName + " for " + thingName); }
                                                // Make it available to the platform   
                                                Things[thingName].EnableThing();
                                                if (enablescriptdebug) { logger.debug("Things::NCRDCS::RegisterDevice::ThingEnabled: " + thingName); }
                                                Things[thingName].RestartThing();
                                                if (enablescriptdebug) { logger.debug("Things::NCRDCS::RegisterDevice::ThingRestarted: " + thingName); }
                                            }
                                        
                                            var virtualdevice = ((Things[thingName].thingTemplate == "NCR.NETPRINTER") || (Things[thingName].thingTemplate == "NCR.POSWM"));
                                        
                                            // ms500001: 2018-05-15: moved property assignment into seperate try_catch to deal with agent differences
                                        
                                            if (enablescriptdebug) { logger.debug("Things::NCRDCS::RegisterDevice::AddPropertiesValues: " + thingName); }
                                        
                                            if (!virtualdevice) {
                                        
                                                /*
                                                try
                                                {
                                                    Things[thingName].Asset_DataDir = Things[thingName].GetAgentDataDir();
                                                    if (enablescriptdebug) { logger.debug("Things::NCRDCS::RegisterDevice::GetAgentDataDir: " + thingName + " " + Things[thingName].Asset_DataDir); }
                                                }
                                                catch(add)
                                                {
                                                    logger.warn("Things::NCRDCS::RegisterDevice::GetAgentDataDir: " + thingName + " Could not find the GetAgentDataDir, is this function missing in the agent?");
                                                }
                                        
                                                try
                                                {
                                                    Things[thingName].Asset_ProgramDir = Things[thingName].GetAgentProgramDir();
                                                    if (enablescriptdebug) { logger.debug("Things::NCRDCS::RegisterDevice::GetAgentDataDir: " + thingName + " " + Things[thingName].Asset_ProgramDir); }
                                                }
                                                catch(apd)
                                                {
                                                    logger.warn("Things::NCRDCS::RegisterDevice::GetAgentProgramDir: " + thingName + " Could not find the GetAgentProgramDir, is this function missing in the agent?");
                                                }
                                        
                                                try
                                                {
                                                    Things[thingName].Customer = Things[thingName].GetCustomerName();
                                                    if (enablescriptdebug) { logger.debug("Things::NCRDCS::RegisterDevice::thingName: " + thingName + " " + Things[thingName].Customer); }
                                                }
                                                catch(gcm)
                                                {
                                                    logger.warn("Things::NCRDCS::RegisterDevice::Customer: " + thingName + " Could not find the Customer Name, is this function missing in the agent?");
                                                }
                                                */
                                            }
                                        
                                        
                                            if (Things[thingName].thingTemplate == "NCR.ATM") { Things[thingName].Asset_Type = "ATM" };
                                            if (Things[thingName].thingTemplate == "NCR.HANDHELD") { Things[thingName].Asset_Type = "HANDHELD" };
                                            if (Things[thingName].thingTemplate == "NCR.LAPTOP") { Things[thingName].Asset_Type = "LAPTOP" };
                                            if (Things[thingName].thingTemplate == "NCR.POS") { Things[thingName].Asset_Type = "POS" };
                                            if (Things[thingName].thingTemplate == "NCR.NETPRINTER") { Things[thingName].Asset_Type = "PRINTER" };
                                            if (Things[thingName].thingTemplate == "NCR.POSWM") { Things[thingName].Asset_Type = "POSWM"};
                                            // ec230016
                                            if (Things[thingName].thingTemplate == "NCR.POSWM") { Things[thingName].Customer = "Walmart" };
                                            // lz121597 second override for setting Customer Name on non NCR.POSWM devices
                                            if (Things[thingName].name.indexOf("WMT_") == 0) {Things[thingName].Customer = "Walmart";}
                                            if (Things[thingName].thingTemplate == "NCR.SCO") { Things[thingName].Asset_Type = "SCO" };
                                        
                                            if (enablescriptdebug) { logger.debug("Things::NCRDCS::RegisterDevice::AssetType: " + thingName + " " + Things[thingName].Asset_Type); }
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="RegisterDeviceCopy">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        // 2018-07-11: ms500001: updated the logging to use standard NCR DCS format.
                                        
                                        var enablescriptdebug = true;
                                        
                                        try
                                        {	
                                            if (enablescriptdebug) { logger.debug("Things::NCRDCS::RegisterDevice::CheckThingExist: " + thingName); }
                                            Things[thingName].name;
                                            if (enablescriptdebug) { logger.debug("Things::NCRDCS::RegisterDevice::FoundThing: " + thingName);}
                                        }
                                        catch(e)
                                        {
                                            logger.info("Things::NCRDCS::RegisterDevice::CreateThing: " + thingName);
                                        
                                            var params = {
                                                name: thingName,
                                                description: "Automatically Registered DCS Thing",
                                                thingTemplateName: DCSthingTemplateName,
                                                tags: "Applications:NCR"
                                            };
                                        
                                            Resources["EntityServices"].CreateThing(params);
                                            if (enablescriptdebug) { logger.debug("Things::NCRDCS::RegisterDevice::TemplateUsed: " + DCSthingTemplateName + " for " + thingName); }
                                         	// Make it available to the platform   
                                            Things[thingName].EnableThing();
                                            if (enablescriptdebug) { logger.debug("Things::NCRDCS::RegisterDevice::ThingEnabled: " + thingName); }
                                        	Things[thingName].RestartThing();
                                            if (enablescriptdebug) { logger.debug("Things::NCRDCS::RegisterDevice::ThingRestarted: " + thingName); }
                                        }
                                        
                                        // ms500001: 2018-05-15: moved property assignment into seperate try_catch to deal with agent differences
                                        /* lz121597 09-20-18
                                        if (enablescriptdebug) { logger.debug("Things::NCRDCS::RegisterDevice::AddPropertiesValues: " + thingName); }
                                        
                                        try
                                        {
                                            Things[thingName].Asset_DataDir = Things[thingName].GetAgentDataDir();
                                            if (enablescriptdebug) { logger.debug("Things::NCRDCS::RegisterDevice::GetAgentDataDir: " + thingName + " " + Things[thingName].Asset_DataDir); }
                                        }
                                        catch(add)
                                        {
                                            logger.warn("Things::NCRDCS::RegisterDevice::GetAgentDataDir: " + thingName + " Could not find the GetAgentDataDir, is this function missing in the agent?");
                                        }
                                        
                                        try
                                        {
                                            Things[thingName].Asset_ProgramDir = Things[thingName].GetAgentProgramDir();
                                            if (enablescriptdebug) { logger.debug("Things::NCRDCS::RegisterDevice::GetAgentDataDir: " + thingName + " " + Things[thingName].Asset_ProgramDir); }
                                        }
                                        catch(apd)
                                        {
                                            logger.warn("Things::NCRDCS::RegisterDevice::GetAgentProgramDir: " + thingName + " Could not find the GetAgentProgramDir, is this function missing in the agent?");
                                        }
                                        
                                        try
                                        {
                                            Things[thingName].Customer = Things[thingName].GetCustomerName();
                                            if (enablescriptdebug) { logger.debug("Things::NCRDCS::RegisterDevice::Customer: " + thingName + " " + Things[thingName].Customer); }
                                        }
                                        catch(gcm)
                                        {
                                            logger.warn("Things::NCRDCS::RegisterDevice::Customer: " + thingName + " Could not find the Customer Name, is this function missing in the agent?");
                                        }
                                        
                                        
                                        if (Things[thingName].thingTemplate == "NCR.ATM") { Things[thingName].Asset_Type = "ATM" };
                                        if (Things[thingName].thingTemplate == "NCR.HANDHELD") { Things[thingName].Asset_Type = "HANDHELD" };
                                        if (Things[thingName].thingTemplate == "NCR.LAPTOP") { Things[thingName].Asset_Type = "LAPTOP" };
                                        if (Things[thingName].thingTemplate == "NCR.POS") { Things[thingName].Asset_Type = "POS" };
                                        if (Things[thingName].thingTemplate == "NCR.NETPRINTER") { Things[thingName].Asset_Type = "PRINTER" };
                                        if (Things[thingName].thingTemplate == "NCR.POSWM") { Things[thingName].Asset_Type = "POSWM" };
                                        if (Things[thingName].thingTemplate == "NCR.SCO") { Things[thingName].Asset_Type = "SCO" };
                                        
                                        if (enablescriptdebug) { logger.debug("Things::NCRDCS::RegisterDevice::AssetType: " + thingName + " " + Things[thingName].Asset_Type); }
                                        */
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                </ServiceImplementations>
                <Subscriptions></Subscriptions>
            </ThingShape>
            <PropertyBindings></PropertyBindings>
            <RemotePropertyBindings></RemotePropertyBindings>
            <RemoteServiceBindings></RemoteServiceBindings>
            <RemoteEventBindings></RemoteEventBindings>
            <AlertConfigurations></AlertConfigurations>
            <ImplementedShapes></ImplementedShapes>
            <ThingProperties></ThingProperties>
        </Thing>
    </Things>
</Entities>
